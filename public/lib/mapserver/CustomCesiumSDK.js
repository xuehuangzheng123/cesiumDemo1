(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.CustomMap = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],2:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)

},{"base64-js":1,"buffer":2,"ieee754":3}],3:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],4:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],5:[function(require,module,exports){
/*
Breaks a Javascript string into individual user-perceived "characters" 
called extended grapheme clusters by implementing the Unicode UAX-29 standard, version 10.0.0

Usage:
var splitter = new GraphemeSplitter();
//returns an array of strings, one string for each grapheme cluster
var graphemes = splitter.splitGraphemes(string); 

*/
function GraphemeSplitter(){
	var CR = 0,
		LF = 1,
		Control = 2,
		Extend = 3,
		Regional_Indicator = 4,
		SpacingMark = 5,
		L = 6,
		V = 7,
		T = 8,
		LV = 9,
		LVT = 10,
		Other = 11,
		Prepend = 12,
		E_Base = 13,
		E_Modifier = 14,
		ZWJ = 15,
		Glue_After_Zwj = 16,
		E_Base_GAZ = 17;
		
	// BreakTypes
	var NotBreak = 0,
		BreakStart = 1,
		Break = 2,
		BreakLastRegional = 3,
		BreakPenultimateRegional = 4;
		
	function isSurrogate(str, pos) {
		return  0xd800 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 0xdbff && 
				0xdc00 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 0xdfff;
	}
		
	// Private function, gets a Unicode code point from a JavaScript UTF-16 string
	// handling surrogate pairs appropriately
	function codePointAt(str, idx){
		if(idx === undefined){
			idx = 0;
		}
		var code = str.charCodeAt(idx);

		// if a high surrogate
		if (0xD800 <= code && code <= 0xDBFF && 
			idx < str.length - 1){
			var hi = code;
			var low = str.charCodeAt(idx + 1);
			if (0xDC00 <= low && low <= 0xDFFF){
				return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
			}
			return hi;
		}
		
		// if a low surrogate
		if (0xDC00 <= code && code <= 0xDFFF &&
			idx >= 1){
			var hi = str.charCodeAt(idx - 1);
			var low = code;
			if (0xD800 <= hi && hi <= 0xDBFF){
				return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
			}
			return low;
		}
		
		//just return the char if an unmatched surrogate half or a 
		//single-char codepoint
		return code;
	}
	
	// Private function, returns whether a break is allowed between the 
	// two given grapheme breaking classes
	function shouldBreak(start, mid, end){
		var all = [start].concat(mid).concat([end]);
		var previous = all[all.length - 2]
		var next = end
		
		// Lookahead termintor for:
		// GB10. (E_Base | EBG) Extend* ?	E_Modifier
		var eModifierIndex = all.lastIndexOf(E_Modifier)
		if(eModifierIndex > 1 &&
			all.slice(1, eModifierIndex).every(function(c){return c == Extend}) &&
			[Extend, E_Base, E_Base_GAZ].indexOf(start) == -1){
			return Break
		}

		// Lookahead termintor for:
		// GB12. ^ (RI RI)* RI	?	RI
		// GB13. [^RI] (RI RI)* RI	?	RI
		var rIIndex = all.lastIndexOf(Regional_Indicator)
		if(rIIndex > 0 &&
			all.slice(1, rIIndex).every(function(c){return c == Regional_Indicator}) &&
			[Prepend, Regional_Indicator].indexOf(previous) == -1) { 
			if(all.filter(function(c){return c == Regional_Indicator}).length % 2 == 1) {
				return BreakLastRegional
			}
			else {
				return BreakPenultimateRegional
			}
		}
		
		// GB3. CR X LF
		if(previous == CR && next == LF){
			return NotBreak;
		}
		// GB4. (Control|CR|LF) ÷
		else if(previous == Control || previous == CR || previous == LF){
			if(next == E_Modifier && mid.every(function(c){return c == Extend})){
				return Break
			}
			else {
				return BreakStart
			}
		}
		// GB5. ÷ (Control|CR|LF)
		else if(next == Control || next == CR || next == LF){
			return BreakStart;
		}
		// GB6. L X (L|V|LV|LVT)
		else if(previous == L && 
			(next == L || next == V || next == LV || next == LVT)){
			return NotBreak;
		}
		// GB7. (LV|V) X (V|T)
		else if((previous == LV || previous == V) && 
			(next == V || next == T)){
			return NotBreak;
		}
		// GB8. (LVT|T) X (T)
		else if((previous == LVT || previous == T) && 
			next == T){
			return NotBreak;
		}
		// GB9. X (Extend|ZWJ)
		else if (next == Extend || next == ZWJ){
			return NotBreak;
		}
		// GB9a. X SpacingMark
		else if(next == SpacingMark){
			return NotBreak;
		}
		// GB9b. Prepend X
		else if (previous == Prepend){
			return NotBreak;
		}
		
		// GB10. (E_Base | EBG) Extend* ?	E_Modifier
		var previousNonExtendIndex = all.indexOf(Extend) != -1 ? all.lastIndexOf(Extend) - 1 : all.length - 2;
		if([E_Base, E_Base_GAZ].indexOf(all[previousNonExtendIndex]) != -1 &&
			all.slice(previousNonExtendIndex + 1, -1).every(function(c){return c == Extend}) &&
			next == E_Modifier){
			return NotBreak;
		}
		
		// GB11. ZWJ ? (Glue_After_Zwj | EBG)
		if(previous == ZWJ && [Glue_After_Zwj, E_Base_GAZ].indexOf(next) != -1) {
			return NotBreak;
		}

		// GB12. ^ (RI RI)* RI ? RI
		// GB13. [^RI] (RI RI)* RI ? RI
		if(mid.indexOf(Regional_Indicator) != -1) { 
			return Break;
		}
		if(previous == Regional_Indicator && next == Regional_Indicator) {
			return NotBreak;
		}

		// GB999. Any ? Any
		return BreakStart;
	}
	
	// Returns the next grapheme break in the string after the given index
	this.nextBreak = function(string, index){
		if(index === undefined){
			index = 0;
		}
		if(index < 0){
			return 0;
		}
		if(index >= string.length - 1){
			return string.length;
		}
		var prev = getGraphemeBreakProperty(codePointAt(string, index));
		var mid = []
		for (var i = index + 1; i < string.length; i++) {
			// check for already processed low surrogates
			if(isSurrogate(string, i - 1)){
				continue;
			}
		
			var next = getGraphemeBreakProperty(codePointAt(string, i));
			if(shouldBreak(prev, mid, next)){
				return i;
			}
			
			mid.push(next);
		}
		return string.length;
	};
	
	// Breaks the given string into an array of grapheme cluster strings
	this.splitGraphemes = function(str){
		var res = [];
		var index = 0;
		var brk;
		while((brk = this.nextBreak(str, index)) < str.length){
			res.push(str.slice(index, brk));
			index = brk;
		}
		if(index < str.length){
			res.push(str.slice(index));
		}
		return res;
	};

	// Returns the iterator of grapheme clusters there are in the given string
	this.iterateGraphemes = function(str) {
		var index = 0;
		var res = {
			next: (function() {
				var value;
				var brk;
				if ((brk = this.nextBreak(str, index)) < str.length) {
					value = str.slice(index, brk);
					index = brk;
					return { value: value, done: false };
				}
				if (index < str.length) {
					value = str.slice(index);
					index = str.length;
					return { value: value, done: false };
				}
				return { value: undefined, done: true };
			}).bind(this)
		};
		// ES2015 @@iterator method (iterable) for spread syntax and for...of statement
		if (typeof Symbol !== 'undefined' && Symbol.iterator) {
			res[Symbol.iterator] = function() {return res};
		}
		return res;
	};

	// Returns the number of grapheme clusters there are in the given string
	this.countGraphemes = function(str){
		var count = 0;
		var index = 0;
		var brk;
		while((brk = this.nextBreak(str, index)) < str.length){
			index = brk;
			count++;
		}
		if(index < str.length){
			count++;
		}
		return count;
	};
	
	//given a Unicode code point, determines this symbol's grapheme break property
	function getGraphemeBreakProperty(code){
		
		//grapheme break property for Unicode 10.0.0, 
		//taken from http://www.unicode.org/Public/10.0.0/ucd/auxiliary/GraphemeBreakProperty.txt
		//and adapted to JavaScript rules
		
		if(		
		(0x0600 <= code && code <= 0x0605) || // Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
		0x06DD == code || // Cf       ARABIC END OF AYAH
		0x070F == code || // Cf       SYRIAC ABBREVIATION MARK
		0x08E2 == code || // Cf       ARABIC DISPUTED END OF AYAH
		0x0D4E == code || // Lo       MALAYALAM LETTER DOT REPH
		0x110BD == code || // Cf       KAITHI NUMBER SIGN
		(0x111C2 <= code && code <= 0x111C3) || // Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA
		0x11A3A == code || // Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA
		(0x11A86 <= code && code <= 0x11A89) || // Lo   [4] SOYOMBO CLUSTER-INITIAL LETTER RA..SOYOMBO CLUSTER-INITIAL LETTER SA
		0x11D46 == code // Lo       MASARAM GONDI REPHA
		){
			return Prepend;
		}
		if(
		0x000D == code // Cc       <control-000D>
		){
			return CR;
		}
		
		if(
		0x000A == code // Cc       <control-000A>
		){
			return LF;
		}
		
		
		if(
		(0x0000 <= code && code <= 0x0009) || // Cc  [10] <control-0000>..<control-0009>
		(0x000B <= code && code <= 0x000C) || // Cc   [2] <control-000B>..<control-000C>
		(0x000E <= code && code <= 0x001F) || // Cc  [18] <control-000E>..<control-001F>
		(0x007F <= code && code <= 0x009F) || // Cc  [33] <control-007F>..<control-009F>
		0x00AD == code || // Cf       SOFT HYPHEN
		0x061C == code || // Cf       ARABIC LETTER MARK
	
		0x180E == code || // Cf       MONGOLIAN VOWEL SEPARATOR
		0x200B == code || // Cf       ZERO WIDTH SPACE
		(0x200E <= code && code <= 0x200F) || // Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK
		0x2028 == code || // Zl       LINE SEPARATOR
		0x2029 == code || // Zp       PARAGRAPH SEPARATOR
		(0x202A <= code && code <= 0x202E) || // Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
		(0x2060 <= code && code <= 0x2064) || // Cf   [5] WORD JOINER..INVISIBLE PLUS
		0x2065 == code || // Cn       <reserved-2065>
		(0x2066 <= code && code <= 0x206F) || // Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
		(0xD800 <= code && code <= 0xDFFF) || // Cs [2048] <surrogate-D800>..<surrogate-DFFF>
		0xFEFF == code || // Cf       ZERO WIDTH NO-BREAK SPACE
		(0xFFF0 <= code && code <= 0xFFF8) || // Cn   [9] <reserved-FFF0>..<reserved-FFF8>
		(0xFFF9 <= code && code <= 0xFFFB) || // Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
		(0x1BCA0 <= code && code <= 0x1BCA3) || // Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
		(0x1D173 <= code && code <= 0x1D17A) || // Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
		0xE0000 == code || // Cn       <reserved-E0000>
		0xE0001 == code || // Cf       LANGUAGE TAG
		(0xE0002 <= code && code <= 0xE001F) || // Cn  [30] <reserved-E0002>..<reserved-E001F>
		(0xE0080 <= code && code <= 0xE00FF) || // Cn [128] <reserved-E0080>..<reserved-E00FF>
		(0xE01F0 <= code && code <= 0xE0FFF) // Cn [3600] <reserved-E01F0>..<reserved-E0FFF>
		){
			return Control;
		}
		
		
		if(
		(0x0300 <= code && code <= 0x036F) || // Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
		(0x0483 <= code && code <= 0x0487) || // Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE
		(0x0488 <= code && code <= 0x0489) || // Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN
		(0x0591 <= code && code <= 0x05BD) || // Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG
		0x05BF == code || // Mn       HEBREW POINT RAFE
		(0x05C1 <= code && code <= 0x05C2) || // Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT
		(0x05C4 <= code && code <= 0x05C5) || // Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT
		0x05C7 == code || // Mn       HEBREW POINT QAMATS QATAN
		(0x0610 <= code && code <= 0x061A) || // Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA
		(0x064B <= code && code <= 0x065F) || // Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW
		0x0670 == code || // Mn       ARABIC LETTER SUPERSCRIPT ALEF
		(0x06D6 <= code && code <= 0x06DC) || // Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN
		(0x06DF <= code && code <= 0x06E4) || // Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA
		(0x06E7 <= code && code <= 0x06E8) || // Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON
		(0x06EA <= code && code <= 0x06ED) || // Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM
		0x0711 == code || // Mn       SYRIAC LETTER SUPERSCRIPT ALAPH
		(0x0730 <= code && code <= 0x074A) || // Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH
		(0x07A6 <= code && code <= 0x07B0) || // Mn  [11] THAANA ABAFILI..THAANA SUKUN
		(0x07EB <= code && code <= 0x07F3) || // Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE
		(0x0816 <= code && code <= 0x0819) || // Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH
		(0x081B <= code && code <= 0x0823) || // Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A
		(0x0825 <= code && code <= 0x0827) || // Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U
		(0x0829 <= code && code <= 0x082D) || // Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA
		(0x0859 <= code && code <= 0x085B) || // Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK
		(0x08D4 <= code && code <= 0x08E1) || // Mn  [14] ARABIC SMALL HIGH WORD AR-RUB..ARABIC SMALL HIGH SIGN SAFHA
		(0x08E3 <= code && code <= 0x0902) || // Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA
		0x093A == code || // Mn       DEVANAGARI VOWEL SIGN OE
		0x093C == code || // Mn       DEVANAGARI SIGN NUKTA
		(0x0941 <= code && code <= 0x0948) || // Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI
		0x094D == code || // Mn       DEVANAGARI SIGN VIRAMA
		(0x0951 <= code && code <= 0x0957) || // Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE
		(0x0962 <= code && code <= 0x0963) || // Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL
		0x0981 == code || // Mn       BENGALI SIGN CANDRABINDU
		0x09BC == code || // Mn       BENGALI SIGN NUKTA
		0x09BE == code || // Mc       BENGALI VOWEL SIGN AA
		(0x09C1 <= code && code <= 0x09C4) || // Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR
		0x09CD == code || // Mn       BENGALI SIGN VIRAMA
		0x09D7 == code || // Mc       BENGALI AU LENGTH MARK
		(0x09E2 <= code && code <= 0x09E3) || // Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL
		(0x0A01 <= code && code <= 0x0A02) || // Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI
		0x0A3C == code || // Mn       GURMUKHI SIGN NUKTA
		(0x0A41 <= code && code <= 0x0A42) || // Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU
		(0x0A47 <= code && code <= 0x0A48) || // Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI
		(0x0A4B <= code && code <= 0x0A4D) || // Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA
		0x0A51 == code || // Mn       GURMUKHI SIGN UDAAT
		(0x0A70 <= code && code <= 0x0A71) || // Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK
		0x0A75 == code || // Mn       GURMUKHI SIGN YAKASH
		(0x0A81 <= code && code <= 0x0A82) || // Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA
		0x0ABC == code || // Mn       GUJARATI SIGN NUKTA
		(0x0AC1 <= code && code <= 0x0AC5) || // Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E
		(0x0AC7 <= code && code <= 0x0AC8) || // Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI
		0x0ACD == code || // Mn       GUJARATI SIGN VIRAMA
		(0x0AE2 <= code && code <= 0x0AE3) || // Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL
		(0x0AFA <= code && code <= 0x0AFF) || // Mn   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE
		0x0B01 == code || // Mn       ORIYA SIGN CANDRABINDU
		0x0B3C == code || // Mn       ORIYA SIGN NUKTA
		0x0B3E == code || // Mc       ORIYA VOWEL SIGN AA
		0x0B3F == code || // Mn       ORIYA VOWEL SIGN I
		(0x0B41 <= code && code <= 0x0B44) || // Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR
		0x0B4D == code || // Mn       ORIYA SIGN VIRAMA
		0x0B56 == code || // Mn       ORIYA AI LENGTH MARK
		0x0B57 == code || // Mc       ORIYA AU LENGTH MARK
		(0x0B62 <= code && code <= 0x0B63) || // Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL
		0x0B82 == code || // Mn       TAMIL SIGN ANUSVARA
		0x0BBE == code || // Mc       TAMIL VOWEL SIGN AA
		0x0BC0 == code || // Mn       TAMIL VOWEL SIGN II
		0x0BCD == code || // Mn       TAMIL SIGN VIRAMA
		0x0BD7 == code || // Mc       TAMIL AU LENGTH MARK
		0x0C00 == code || // Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE
		(0x0C3E <= code && code <= 0x0C40) || // Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II
		(0x0C46 <= code && code <= 0x0C48) || // Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI
		(0x0C4A <= code && code <= 0x0C4D) || // Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA
		(0x0C55 <= code && code <= 0x0C56) || // Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK
		(0x0C62 <= code && code <= 0x0C63) || // Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL
		0x0C81 == code || // Mn       KANNADA SIGN CANDRABINDU
		0x0CBC == code || // Mn       KANNADA SIGN NUKTA
		0x0CBF == code || // Mn       KANNADA VOWEL SIGN I
		0x0CC2 == code || // Mc       KANNADA VOWEL SIGN UU
		0x0CC6 == code || // Mn       KANNADA VOWEL SIGN E
		(0x0CCC <= code && code <= 0x0CCD) || // Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA
		(0x0CD5 <= code && code <= 0x0CD6) || // Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK
		(0x0CE2 <= code && code <= 0x0CE3) || // Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL
		(0x0D00 <= code && code <= 0x0D01) || // Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU
		(0x0D3B <= code && code <= 0x0D3C) || // Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA
		0x0D3E == code || // Mc       MALAYALAM VOWEL SIGN AA
		(0x0D41 <= code && code <= 0x0D44) || // Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR
		0x0D4D == code || // Mn       MALAYALAM SIGN VIRAMA
		0x0D57 == code || // Mc       MALAYALAM AU LENGTH MARK
		(0x0D62 <= code && code <= 0x0D63) || // Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL
		0x0DCA == code || // Mn       SINHALA SIGN AL-LAKUNA
		0x0DCF == code || // Mc       SINHALA VOWEL SIGN AELA-PILLA
		(0x0DD2 <= code && code <= 0x0DD4) || // Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA
		0x0DD6 == code || // Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA
		0x0DDF == code || // Mc       SINHALA VOWEL SIGN GAYANUKITTA
		0x0E31 == code || // Mn       THAI CHARACTER MAI HAN-AKAT
		(0x0E34 <= code && code <= 0x0E3A) || // Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU
		(0x0E47 <= code && code <= 0x0E4E) || // Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN
		0x0EB1 == code || // Mn       LAO VOWEL SIGN MAI KAN
		(0x0EB4 <= code && code <= 0x0EB9) || // Mn   [6] LAO VOWEL SIGN I..LAO VOWEL SIGN UU
		(0x0EBB <= code && code <= 0x0EBC) || // Mn   [2] LAO VOWEL SIGN MAI KON..LAO SEMIVOWEL SIGN LO
		(0x0EC8 <= code && code <= 0x0ECD) || // Mn   [6] LAO TONE MAI EK..LAO NIGGAHITA
		(0x0F18 <= code && code <= 0x0F19) || // Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS
		0x0F35 == code || // Mn       TIBETAN MARK NGAS BZUNG NYI ZLA
		0x0F37 == code || // Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS
		0x0F39 == code || // Mn       TIBETAN MARK TSA -PHRU
		(0x0F71 <= code && code <= 0x0F7E) || // Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO
		(0x0F80 <= code && code <= 0x0F84) || // Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA
		(0x0F86 <= code && code <= 0x0F87) || // Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS
		(0x0F8D <= code && code <= 0x0F97) || // Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA
		(0x0F99 <= code && code <= 0x0FBC) || // Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA
		0x0FC6 == code || // Mn       TIBETAN SYMBOL PADMA GDAN
		(0x102D <= code && code <= 0x1030) || // Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU
		(0x1032 <= code && code <= 0x1037) || // Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW
		(0x1039 <= code && code <= 0x103A) || // Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT
		(0x103D <= code && code <= 0x103E) || // Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA
		(0x1058 <= code && code <= 0x1059) || // Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL
		(0x105E <= code && code <= 0x1060) || // Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA
		(0x1071 <= code && code <= 0x1074) || // Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE
		0x1082 == code || // Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA
		(0x1085 <= code && code <= 0x1086) || // Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y
		0x108D == code || // Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE
		0x109D == code || // Mn       MYANMAR VOWEL SIGN AITON AI
		(0x135D <= code && code <= 0x135F) || // Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK
		(0x1712 <= code && code <= 0x1714) || // Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA
		(0x1732 <= code && code <= 0x1734) || // Mn   [3] HANUNOO VOWEL SIGN I..HANUNOO SIGN PAMUDPOD
		(0x1752 <= code && code <= 0x1753) || // Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U
		(0x1772 <= code && code <= 0x1773) || // Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U
		(0x17B4 <= code && code <= 0x17B5) || // Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
		(0x17B7 <= code && code <= 0x17BD) || // Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA
		0x17C6 == code || // Mn       KHMER SIGN NIKAHIT
		(0x17C9 <= code && code <= 0x17D3) || // Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT
		0x17DD == code || // Mn       KHMER SIGN ATTHACAN
		(0x180B <= code && code <= 0x180D) || // Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
		(0x1885 <= code && code <= 0x1886) || // Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA
		0x18A9 == code || // Mn       MONGOLIAN LETTER ALI GALI DAGALGA
		(0x1920 <= code && code <= 0x1922) || // Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U
		(0x1927 <= code && code <= 0x1928) || // Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O
		0x1932 == code || // Mn       LIMBU SMALL LETTER ANUSVARA
		(0x1939 <= code && code <= 0x193B) || // Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I
		(0x1A17 <= code && code <= 0x1A18) || // Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U
		0x1A1B == code || // Mn       BUGINESE VOWEL SIGN AE
		0x1A56 == code || // Mn       TAI THAM CONSONANT SIGN MEDIAL LA
		(0x1A58 <= code && code <= 0x1A5E) || // Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA
		0x1A60 == code || // Mn       TAI THAM SIGN SAKOT
		0x1A62 == code || // Mn       TAI THAM VOWEL SIGN MAI SAT
		(0x1A65 <= code && code <= 0x1A6C) || // Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW
		(0x1A73 <= code && code <= 0x1A7C) || // Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN
		0x1A7F == code || // Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT
		(0x1AB0 <= code && code <= 0x1ABD) || // Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW
		0x1ABE == code || // Me       COMBINING PARENTHESES OVERLAY
		(0x1B00 <= code && code <= 0x1B03) || // Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
		0x1B34 == code || // Mn       BALINESE SIGN REREKAN
		(0x1B36 <= code && code <= 0x1B3A) || // Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
		0x1B3C == code || // Mn       BALINESE VOWEL SIGN LA LENGA
		0x1B42 == code || // Mn       BALINESE VOWEL SIGN PEPET
		(0x1B6B <= code && code <= 0x1B73) || // Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
		(0x1B80 <= code && code <= 0x1B81) || // Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR
		(0x1BA2 <= code && code <= 0x1BA5) || // Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU
		(0x1BA8 <= code && code <= 0x1BA9) || // Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG
		(0x1BAB <= code && code <= 0x1BAD) || // Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA
		0x1BE6 == code || // Mn       BATAK SIGN TOMPI
		(0x1BE8 <= code && code <= 0x1BE9) || // Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE
		0x1BED == code || // Mn       BATAK VOWEL SIGN KARO O
		(0x1BEF <= code && code <= 0x1BF1) || // Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H
		(0x1C2C <= code && code <= 0x1C33) || // Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T
		(0x1C36 <= code && code <= 0x1C37) || // Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA
		(0x1CD0 <= code && code <= 0x1CD2) || // Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA
		(0x1CD4 <= code && code <= 0x1CE0) || // Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA
		(0x1CE2 <= code && code <= 0x1CE8) || // Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL
		0x1CED == code || // Mn       VEDIC SIGN TIRYAK
		0x1CF4 == code || // Mn       VEDIC TONE CANDRA ABOVE
		(0x1CF8 <= code && code <= 0x1CF9) || // Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE
		(0x1DC0 <= code && code <= 0x1DF9) || // Mn  [58] COMBINING DOTTED GRAVE ACCENT..COMBINING WIDE INVERTED BRIDGE BELOW
		(0x1DFB <= code && code <= 0x1DFF) || // Mn   [5] COMBINING DELETION MARK..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW
		0x200C == code || // Cf       ZERO WIDTH NON-JOINER
		(0x20D0 <= code && code <= 0x20DC) || // Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE
		(0x20DD <= code && code <= 0x20E0) || // Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH
		0x20E1 == code || // Mn       COMBINING LEFT RIGHT ARROW ABOVE
		(0x20E2 <= code && code <= 0x20E4) || // Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE
		(0x20E5 <= code && code <= 0x20F0) || // Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE
		(0x2CEF <= code && code <= 0x2CF1) || // Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS
		0x2D7F == code || // Mn       TIFINAGH CONSONANT JOINER
		(0x2DE0 <= code && code <= 0x2DFF) || // Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS
		(0x302A <= code && code <= 0x302D) || // Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
		(0x302E <= code && code <= 0x302F) || // Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK
		(0x3099 <= code && code <= 0x309A) || // Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
		0xA66F == code || // Mn       COMBINING CYRILLIC VZMET
		(0xA670 <= code && code <= 0xA672) || // Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN
		(0xA674 <= code && code <= 0xA67D) || // Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK
		(0xA69E <= code && code <= 0xA69F) || // Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E
		(0xA6F0 <= code && code <= 0xA6F1) || // Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS
		0xA802 == code || // Mn       SYLOTI NAGRI SIGN DVISVARA
		0xA806 == code || // Mn       SYLOTI NAGRI SIGN HASANTA
		0xA80B == code || // Mn       SYLOTI NAGRI SIGN ANUSVARA
		(0xA825 <= code && code <= 0xA826) || // Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E
		(0xA8C4 <= code && code <= 0xA8C5) || // Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU
		(0xA8E0 <= code && code <= 0xA8F1) || // Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA
		(0xA926 <= code && code <= 0xA92D) || // Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU
		(0xA947 <= code && code <= 0xA951) || // Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R
		(0xA980 <= code && code <= 0xA982) || // Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR
		0xA9B3 == code || // Mn       JAVANESE SIGN CECAK TELU
		(0xA9B6 <= code && code <= 0xA9B9) || // Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT
		0xA9BC == code || // Mn       JAVANESE VOWEL SIGN PEPET
		0xA9E5 == code || // Mn       MYANMAR SIGN SHAN SAW
		(0xAA29 <= code && code <= 0xAA2E) || // Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE
		(0xAA31 <= code && code <= 0xAA32) || // Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE
		(0xAA35 <= code && code <= 0xAA36) || // Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA
		0xAA43 == code || // Mn       CHAM CONSONANT SIGN FINAL NG
		0xAA4C == code || // Mn       CHAM CONSONANT SIGN FINAL M
		0xAA7C == code || // Mn       MYANMAR SIGN TAI LAING TONE-2
		0xAAB0 == code || // Mn       TAI VIET MAI KANG
		(0xAAB2 <= code && code <= 0xAAB4) || // Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U
		(0xAAB7 <= code && code <= 0xAAB8) || // Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA
		(0xAABE <= code && code <= 0xAABF) || // Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK
		0xAAC1 == code || // Mn       TAI VIET TONE MAI THO
		(0xAAEC <= code && code <= 0xAAED) || // Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI
		0xAAF6 == code || // Mn       MEETEI MAYEK VIRAMA
		0xABE5 == code || // Mn       MEETEI MAYEK VOWEL SIGN ANAP
		0xABE8 == code || // Mn       MEETEI MAYEK VOWEL SIGN UNAP
		0xABED == code || // Mn       MEETEI MAYEK APUN IYEK
		0xFB1E == code || // Mn       HEBREW POINT JUDEO-SPANISH VARIKA
		(0xFE00 <= code && code <= 0xFE0F) || // Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
		(0xFE20 <= code && code <= 0xFE2F) || // Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF
		(0xFF9E <= code && code <= 0xFF9F) || // Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
		0x101FD == code || // Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE
		0x102E0 == code || // Mn       COPTIC EPACT THOUSANDS MARK
		(0x10376 <= code && code <= 0x1037A) || // Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII
		(0x10A01 <= code && code <= 0x10A03) || // Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R
		(0x10A05 <= code && code <= 0x10A06) || // Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O
		(0x10A0C <= code && code <= 0x10A0F) || // Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA
		(0x10A38 <= code && code <= 0x10A3A) || // Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW
		0x10A3F == code || // Mn       KHAROSHTHI VIRAMA
		(0x10AE5 <= code && code <= 0x10AE6) || // Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW
		0x11001 == code || // Mn       BRAHMI SIGN ANUSVARA
		(0x11038 <= code && code <= 0x11046) || // Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA
		(0x1107F <= code && code <= 0x11081) || // Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA
		(0x110B3 <= code && code <= 0x110B6) || // Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI
		(0x110B9 <= code && code <= 0x110BA) || // Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA
		(0x11100 <= code && code <= 0x11102) || // Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA
		(0x11127 <= code && code <= 0x1112B) || // Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU
		(0x1112D <= code && code <= 0x11134) || // Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA
		0x11173 == code || // Mn       MAHAJANI SIGN NUKTA
		(0x11180 <= code && code <= 0x11181) || // Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA
		(0x111B6 <= code && code <= 0x111BE) || // Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O
		(0x111CA <= code && code <= 0x111CC) || // Mn   [3] SHARADA SIGN NUKTA..SHARADA EXTRA SHORT VOWEL MARK
		(0x1122F <= code && code <= 0x11231) || // Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI
		0x11234 == code || // Mn       KHOJKI SIGN ANUSVARA
		(0x11236 <= code && code <= 0x11237) || // Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
		0x1123E == code || // Mn       KHOJKI SIGN SUKUN
		0x112DF == code || // Mn       KHUDAWADI SIGN ANUSVARA
		(0x112E3 <= code && code <= 0x112EA) || // Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA
		(0x11300 <= code && code <= 0x11301) || // Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU
		0x1133C == code || // Mn       GRANTHA SIGN NUKTA
		0x1133E == code || // Mc       GRANTHA VOWEL SIGN AA
		0x11340 == code || // Mn       GRANTHA VOWEL SIGN II
		0x11357 == code || // Mc       GRANTHA AU LENGTH MARK
		(0x11366 <= code && code <= 0x1136C) || // Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX
		(0x11370 <= code && code <= 0x11374) || // Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA
		(0x11438 <= code && code <= 0x1143F) || // Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI
		(0x11442 <= code && code <= 0x11444) || // Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA
		0x11446 == code || // Mn       NEWA SIGN NUKTA
		0x114B0 == code || // Mc       TIRHUTA VOWEL SIGN AA
		(0x114B3 <= code && code <= 0x114B8) || // Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
		0x114BA == code || // Mn       TIRHUTA VOWEL SIGN SHORT E
		0x114BD == code || // Mc       TIRHUTA VOWEL SIGN SHORT O
		(0x114BF <= code && code <= 0x114C0) || // Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA
		(0x114C2 <= code && code <= 0x114C3) || // Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA
		0x115AF == code || // Mc       SIDDHAM VOWEL SIGN AA
		(0x115B2 <= code && code <= 0x115B5) || // Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR
		(0x115BC <= code && code <= 0x115BD) || // Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA
		(0x115BF <= code && code <= 0x115C0) || // Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA
		(0x115DC <= code && code <= 0x115DD) || // Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU
		(0x11633 <= code && code <= 0x1163A) || // Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI
		0x1163D == code || // Mn       MODI SIGN ANUSVARA
		(0x1163F <= code && code <= 0x11640) || // Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA
		0x116AB == code || // Mn       TAKRI SIGN ANUSVARA
		0x116AD == code || // Mn       TAKRI VOWEL SIGN AA
		(0x116B0 <= code && code <= 0x116B5) || // Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU
		0x116B7 == code || // Mn       TAKRI SIGN NUKTA
		(0x1171D <= code && code <= 0x1171F) || // Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA
		(0x11722 <= code && code <= 0x11725) || // Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU
		(0x11727 <= code && code <= 0x1172B) || // Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER
		(0x11A01 <= code && code <= 0x11A06) || // Mn   [6] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL SIGN O
		(0x11A09 <= code && code <= 0x11A0A) || // Mn   [2] ZANABAZAR SQUARE VOWEL SIGN REVERSED I..ZANABAZAR SQUARE VOWEL LENGTH MARK
		(0x11A33 <= code && code <= 0x11A38) || // Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA
		(0x11A3B <= code && code <= 0x11A3E) || // Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA
		0x11A47 == code || // Mn       ZANABAZAR SQUARE SUBJOINER
		(0x11A51 <= code && code <= 0x11A56) || // Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE
		(0x11A59 <= code && code <= 0x11A5B) || // Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK
		(0x11A8A <= code && code <= 0x11A96) || // Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA
		(0x11A98 <= code && code <= 0x11A99) || // Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER
		(0x11C30 <= code && code <= 0x11C36) || // Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L
		(0x11C38 <= code && code <= 0x11C3D) || // Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA
		0x11C3F == code || // Mn       BHAIKSUKI SIGN VIRAMA
		(0x11C92 <= code && code <= 0x11CA7) || // Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA
		(0x11CAA <= code && code <= 0x11CB0) || // Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA
		(0x11CB2 <= code && code <= 0x11CB3) || // Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E
		(0x11CB5 <= code && code <= 0x11CB6) || // Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU
		(0x11D31 <= code && code <= 0x11D36) || // Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R
		0x11D3A == code || // Mn       MASARAM GONDI VOWEL SIGN E
		(0x11D3C <= code && code <= 0x11D3D) || // Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O
		(0x11D3F <= code && code <= 0x11D45) || // Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA
		0x11D47 == code || // Mn       MASARAM GONDI RA-KARA
		(0x16AF0 <= code && code <= 0x16AF4) || // Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE
		(0x16B30 <= code && code <= 0x16B36) || // Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM
		(0x16F8F <= code && code <= 0x16F92) || // Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW
		(0x1BC9D <= code && code <= 0x1BC9E) || // Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK
		0x1D165 == code || // Mc       MUSICAL SYMBOL COMBINING STEM
		(0x1D167 <= code && code <= 0x1D169) || // Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3
		(0x1D16E <= code && code <= 0x1D172) || // Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5
		(0x1D17B <= code && code <= 0x1D182) || // Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE
		(0x1D185 <= code && code <= 0x1D18B) || // Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE
		(0x1D1AA <= code && code <= 0x1D1AD) || // Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO
		(0x1D242 <= code && code <= 0x1D244) || // Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME
		(0x1DA00 <= code && code <= 0x1DA36) || // Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN
		(0x1DA3B <= code && code <= 0x1DA6C) || // Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT
		0x1DA75 == code || // Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS
		0x1DA84 == code || // Mn       SIGNWRITING LOCATION HEAD NECK
		(0x1DA9B <= code && code <= 0x1DA9F) || // Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6
		(0x1DAA1 <= code && code <= 0x1DAAF) || // Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16
		(0x1E000 <= code && code <= 0x1E006) || // Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE
		(0x1E008 <= code && code <= 0x1E018) || // Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU
		(0x1E01B <= code && code <= 0x1E021) || // Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI
		(0x1E023 <= code && code <= 0x1E024) || // Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS
		(0x1E026 <= code && code <= 0x1E02A) || // Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA
		(0x1E8D0 <= code && code <= 0x1E8D6) || // Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
		(0x1E944 <= code && code <= 0x1E94A) || // Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA
		(0xE0020 <= code && code <= 0xE007F) || // Cf  [96] TAG SPACE..CANCEL TAG
		(0xE0100 <= code && code <= 0xE01EF) // Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
		){
			return Extend;
		}
		
		
		if(
		(0x1F1E6 <= code && code <= 0x1F1FF) // So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
		){
			return Regional_Indicator;
		}
		
		if(
		0x0903 == code || // Mc       DEVANAGARI SIGN VISARGA
		0x093B == code || // Mc       DEVANAGARI VOWEL SIGN OOE
		(0x093E <= code && code <= 0x0940) || // Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II
		(0x0949 <= code && code <= 0x094C) || // Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU
		(0x094E <= code && code <= 0x094F) || // Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW
		(0x0982 <= code && code <= 0x0983) || // Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA
		(0x09BF <= code && code <= 0x09C0) || // Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II
		(0x09C7 <= code && code <= 0x09C8) || // Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI
		(0x09CB <= code && code <= 0x09CC) || // Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU
		0x0A03 == code || // Mc       GURMUKHI SIGN VISARGA
		(0x0A3E <= code && code <= 0x0A40) || // Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II
		0x0A83 == code || // Mc       GUJARATI SIGN VISARGA
		(0x0ABE <= code && code <= 0x0AC0) || // Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II
		0x0AC9 == code || // Mc       GUJARATI VOWEL SIGN CANDRA O
		(0x0ACB <= code && code <= 0x0ACC) || // Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU
		(0x0B02 <= code && code <= 0x0B03) || // Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA
		0x0B40 == code || // Mc       ORIYA VOWEL SIGN II
		(0x0B47 <= code && code <= 0x0B48) || // Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI
		(0x0B4B <= code && code <= 0x0B4C) || // Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU
		0x0BBF == code || // Mc       TAMIL VOWEL SIGN I
		(0x0BC1 <= code && code <= 0x0BC2) || // Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU
		(0x0BC6 <= code && code <= 0x0BC8) || // Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI
		(0x0BCA <= code && code <= 0x0BCC) || // Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU
		(0x0C01 <= code && code <= 0x0C03) || // Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA
		(0x0C41 <= code && code <= 0x0C44) || // Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR
		(0x0C82 <= code && code <= 0x0C83) || // Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA
		0x0CBE == code || // Mc       KANNADA VOWEL SIGN AA
		(0x0CC0 <= code && code <= 0x0CC1) || // Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U
		(0x0CC3 <= code && code <= 0x0CC4) || // Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR
		(0x0CC7 <= code && code <= 0x0CC8) || // Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI
		(0x0CCA <= code && code <= 0x0CCB) || // Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO
		(0x0D02 <= code && code <= 0x0D03) || // Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA
		(0x0D3F <= code && code <= 0x0D40) || // Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II
		(0x0D46 <= code && code <= 0x0D48) || // Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI
		(0x0D4A <= code && code <= 0x0D4C) || // Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU
		(0x0D82 <= code && code <= 0x0D83) || // Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA
		(0x0DD0 <= code && code <= 0x0DD1) || // Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA
		(0x0DD8 <= code && code <= 0x0DDE) || // Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA
		(0x0DF2 <= code && code <= 0x0DF3) || // Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA
		0x0E33 == code || // Lo       THAI CHARACTER SARA AM
		0x0EB3 == code || // Lo       LAO VOWEL SIGN AM
		(0x0F3E <= code && code <= 0x0F3F) || // Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES
		0x0F7F == code || // Mc       TIBETAN SIGN RNAM BCAD
		0x1031 == code || // Mc       MYANMAR VOWEL SIGN E
		(0x103B <= code && code <= 0x103C) || // Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA
		(0x1056 <= code && code <= 0x1057) || // Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR
		0x1084 == code || // Mc       MYANMAR VOWEL SIGN SHAN E
		0x17B6 == code || // Mc       KHMER VOWEL SIGN AA
		(0x17BE <= code && code <= 0x17C5) || // Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU
		(0x17C7 <= code && code <= 0x17C8) || // Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU
		(0x1923 <= code && code <= 0x1926) || // Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU
		(0x1929 <= code && code <= 0x192B) || // Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA
		(0x1930 <= code && code <= 0x1931) || // Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA
		(0x1933 <= code && code <= 0x1938) || // Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA
		(0x1A19 <= code && code <= 0x1A1A) || // Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O
		0x1A55 == code || // Mc       TAI THAM CONSONANT SIGN MEDIAL RA
		0x1A57 == code || // Mc       TAI THAM CONSONANT SIGN LA TANG LAI
		(0x1A6D <= code && code <= 0x1A72) || // Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI
		0x1B04 == code || // Mc       BALINESE SIGN BISAH
		0x1B35 == code || // Mc       BALINESE VOWEL SIGN TEDUNG
		0x1B3B == code || // Mc       BALINESE VOWEL SIGN RA REPA TEDUNG
		(0x1B3D <= code && code <= 0x1B41) || // Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
		(0x1B43 <= code && code <= 0x1B44) || // Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
		0x1B82 == code || // Mc       SUNDANESE SIGN PANGWISAD
		0x1BA1 == code || // Mc       SUNDANESE CONSONANT SIGN PAMINGKAL
		(0x1BA6 <= code && code <= 0x1BA7) || // Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG
		0x1BAA == code || // Mc       SUNDANESE SIGN PAMAAEH
		0x1BE7 == code || // Mc       BATAK VOWEL SIGN E
		(0x1BEA <= code && code <= 0x1BEC) || // Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O
		0x1BEE == code || // Mc       BATAK VOWEL SIGN U
		(0x1BF2 <= code && code <= 0x1BF3) || // Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN
		(0x1C24 <= code && code <= 0x1C2B) || // Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU
		(0x1C34 <= code && code <= 0x1C35) || // Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG
		0x1CE1 == code || // Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA
		(0x1CF2 <= code && code <= 0x1CF3) || // Mc   [2] VEDIC SIGN ARDHAVISARGA..VEDIC SIGN ROTATED ARDHAVISARGA
		0x1CF7 == code || // Mc       VEDIC SIGN ATIKRAMA
		(0xA823 <= code && code <= 0xA824) || // Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I
		0xA827 == code || // Mc       SYLOTI NAGRI VOWEL SIGN OO
		(0xA880 <= code && code <= 0xA881) || // Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA
		(0xA8B4 <= code && code <= 0xA8C3) || // Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU
		(0xA952 <= code && code <= 0xA953) || // Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA
		0xA983 == code || // Mc       JAVANESE SIGN WIGNYAN
		(0xA9B4 <= code && code <= 0xA9B5) || // Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG
		(0xA9BA <= code && code <= 0xA9BB) || // Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE
		(0xA9BD <= code && code <= 0xA9C0) || // Mc   [4] JAVANESE CONSONANT SIGN KERET..JAVANESE PANGKON
		(0xAA2F <= code && code <= 0xAA30) || // Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI
		(0xAA33 <= code && code <= 0xAA34) || // Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA
		0xAA4D == code || // Mc       CHAM CONSONANT SIGN FINAL H
		0xAAEB == code || // Mc       MEETEI MAYEK VOWEL SIGN II
		(0xAAEE <= code && code <= 0xAAEF) || // Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU
		0xAAF5 == code || // Mc       MEETEI MAYEK VOWEL SIGN VISARGA
		(0xABE3 <= code && code <= 0xABE4) || // Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP
		(0xABE6 <= code && code <= 0xABE7) || // Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP
		(0xABE9 <= code && code <= 0xABEA) || // Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG
		0xABEC == code || // Mc       MEETEI MAYEK LUM IYEK
		0x11000 == code || // Mc       BRAHMI SIGN CANDRABINDU
		0x11002 == code || // Mc       BRAHMI SIGN VISARGA
		0x11082 == code || // Mc       KAITHI SIGN VISARGA
		(0x110B0 <= code && code <= 0x110B2) || // Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II
		(0x110B7 <= code && code <= 0x110B8) || // Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU
		0x1112C == code || // Mc       CHAKMA VOWEL SIGN E
		0x11182 == code || // Mc       SHARADA SIGN VISARGA
		(0x111B3 <= code && code <= 0x111B5) || // Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II
		(0x111BF <= code && code <= 0x111C0) || // Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA
		(0x1122C <= code && code <= 0x1122E) || // Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II
		(0x11232 <= code && code <= 0x11233) || // Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU
		0x11235 == code || // Mc       KHOJKI SIGN VIRAMA
		(0x112E0 <= code && code <= 0x112E2) || // Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II
		(0x11302 <= code && code <= 0x11303) || // Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA
		0x1133F == code || // Mc       GRANTHA VOWEL SIGN I
		(0x11341 <= code && code <= 0x11344) || // Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR
		(0x11347 <= code && code <= 0x11348) || // Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI
		(0x1134B <= code && code <= 0x1134D) || // Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA
		(0x11362 <= code && code <= 0x11363) || // Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL
		(0x11435 <= code && code <= 0x11437) || // Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II
		(0x11440 <= code && code <= 0x11441) || // Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU
		0x11445 == code || // Mc       NEWA SIGN VISARGA
		(0x114B1 <= code && code <= 0x114B2) || // Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II
		0x114B9 == code || // Mc       TIRHUTA VOWEL SIGN E
		(0x114BB <= code && code <= 0x114BC) || // Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O
		0x114BE == code || // Mc       TIRHUTA VOWEL SIGN AU
		0x114C1 == code || // Mc       TIRHUTA SIGN VISARGA
		(0x115B0 <= code && code <= 0x115B1) || // Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II
		(0x115B8 <= code && code <= 0x115BB) || // Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU
		0x115BE == code || // Mc       SIDDHAM SIGN VISARGA
		(0x11630 <= code && code <= 0x11632) || // Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II
		(0x1163B <= code && code <= 0x1163C) || // Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU
		0x1163E == code || // Mc       MODI SIGN VISARGA
		0x116AC == code || // Mc       TAKRI SIGN VISARGA
		(0x116AE <= code && code <= 0x116AF) || // Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II
		0x116B6 == code || // Mc       TAKRI SIGN VIRAMA
		(0x11720 <= code && code <= 0x11721) || // Mc   [2] AHOM VOWEL SIGN A..AHOM VOWEL SIGN AA
		0x11726 == code || // Mc       AHOM VOWEL SIGN E
		(0x11A07 <= code && code <= 0x11A08) || // Mc   [2] ZANABAZAR SQUARE VOWEL SIGN AI..ZANABAZAR SQUARE VOWEL SIGN AU
		0x11A39 == code || // Mc       ZANABAZAR SQUARE SIGN VISARGA
		(0x11A57 <= code && code <= 0x11A58) || // Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU
		0x11A97 == code || // Mc       SOYOMBO SIGN VISARGA
		0x11C2F == code || // Mc       BHAIKSUKI VOWEL SIGN AA
		0x11C3E == code || // Mc       BHAIKSUKI SIGN VISARGA
		0x11CA9 == code || // Mc       MARCHEN SUBJOINED LETTER YA
		0x11CB1 == code || // Mc       MARCHEN VOWEL SIGN I
		0x11CB4 == code || // Mc       MARCHEN VOWEL SIGN O
		(0x16F51 <= code && code <= 0x16F7E) || // Mc  [46] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN NG
		0x1D166 == code || // Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM
		0x1D16D == code // Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT
		){
			return SpacingMark;
		}
		
		
		if(
		(0x1100 <= code && code <= 0x115F) || // Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER
		(0xA960 <= code && code <= 0xA97C) // Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH
		){
			return L;
		}
		
		if(
		(0x1160 <= code && code <= 0x11A7) || // Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE
		(0xD7B0 <= code && code <= 0xD7C6) // Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E
		){
			return V;
		}
		
		
		if(
		(0x11A8 <= code && code <= 0x11FF) || // Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN
		(0xD7CB <= code && code <= 0xD7FB) // Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH
		){
			return T;
		}
		
		if(
		0xAC00 == code || // Lo       HANGUL SYLLABLE GA
		0xAC1C == code || // Lo       HANGUL SYLLABLE GAE
		0xAC38 == code || // Lo       HANGUL SYLLABLE GYA
		0xAC54 == code || // Lo       HANGUL SYLLABLE GYAE
		0xAC70 == code || // Lo       HANGUL SYLLABLE GEO
		0xAC8C == code || // Lo       HANGUL SYLLABLE GE
		0xACA8 == code || // Lo       HANGUL SYLLABLE GYEO
		0xACC4 == code || // Lo       HANGUL SYLLABLE GYE
		0xACE0 == code || // Lo       HANGUL SYLLABLE GO
		0xACFC == code || // Lo       HANGUL SYLLABLE GWA
		0xAD18 == code || // Lo       HANGUL SYLLABLE GWAE
		0xAD34 == code || // Lo       HANGUL SYLLABLE GOE
		0xAD50 == code || // Lo       HANGUL SYLLABLE GYO
		0xAD6C == code || // Lo       HANGUL SYLLABLE GU
		0xAD88 == code || // Lo       HANGUL SYLLABLE GWEO
		0xADA4 == code || // Lo       HANGUL SYLLABLE GWE
		0xADC0 == code || // Lo       HANGUL SYLLABLE GWI
		0xADDC == code || // Lo       HANGUL SYLLABLE GYU
		0xADF8 == code || // Lo       HANGUL SYLLABLE GEU
		0xAE14 == code || // Lo       HANGUL SYLLABLE GYI
		0xAE30 == code || // Lo       HANGUL SYLLABLE GI
		0xAE4C == code || // Lo       HANGUL SYLLABLE GGA
		0xAE68 == code || // Lo       HANGUL SYLLABLE GGAE
		0xAE84 == code || // Lo       HANGUL SYLLABLE GGYA
		0xAEA0 == code || // Lo       HANGUL SYLLABLE GGYAE
		0xAEBC == code || // Lo       HANGUL SYLLABLE GGEO
		0xAED8 == code || // Lo       HANGUL SYLLABLE GGE
		0xAEF4 == code || // Lo       HANGUL SYLLABLE GGYEO
		0xAF10 == code || // Lo       HANGUL SYLLABLE GGYE
		0xAF2C == code || // Lo       HANGUL SYLLABLE GGO
		0xAF48 == code || // Lo       HANGUL SYLLABLE GGWA
		0xAF64 == code || // Lo       HANGUL SYLLABLE GGWAE
		0xAF80 == code || // Lo       HANGUL SYLLABLE GGOE
		0xAF9C == code || // Lo       HANGUL SYLLABLE GGYO
		0xAFB8 == code || // Lo       HANGUL SYLLABLE GGU
		0xAFD4 == code || // Lo       HANGUL SYLLABLE GGWEO
		0xAFF0 == code || // Lo       HANGUL SYLLABLE GGWE
		0xB00C == code || // Lo       HANGUL SYLLABLE GGWI
		0xB028 == code || // Lo       HANGUL SYLLABLE GGYU
		0xB044 == code || // Lo       HANGUL SYLLABLE GGEU
		0xB060 == code || // Lo       HANGUL SYLLABLE GGYI
		0xB07C == code || // Lo       HANGUL SYLLABLE GGI
		0xB098 == code || // Lo       HANGUL SYLLABLE NA
		0xB0B4 == code || // Lo       HANGUL SYLLABLE NAE
		0xB0D0 == code || // Lo       HANGUL SYLLABLE NYA
		0xB0EC == code || // Lo       HANGUL SYLLABLE NYAE
		0xB108 == code || // Lo       HANGUL SYLLABLE NEO
		0xB124 == code || // Lo       HANGUL SYLLABLE NE
		0xB140 == code || // Lo       HANGUL SYLLABLE NYEO
		0xB15C == code || // Lo       HANGUL SYLLABLE NYE
		0xB178 == code || // Lo       HANGUL SYLLABLE NO
		0xB194 == code || // Lo       HANGUL SYLLABLE NWA
		0xB1B0 == code || // Lo       HANGUL SYLLABLE NWAE
		0xB1CC == code || // Lo       HANGUL SYLLABLE NOE
		0xB1E8 == code || // Lo       HANGUL SYLLABLE NYO
		0xB204 == code || // Lo       HANGUL SYLLABLE NU
		0xB220 == code || // Lo       HANGUL SYLLABLE NWEO
		0xB23C == code || // Lo       HANGUL SYLLABLE NWE
		0xB258 == code || // Lo       HANGUL SYLLABLE NWI
		0xB274 == code || // Lo       HANGUL SYLLABLE NYU
		0xB290 == code || // Lo       HANGUL SYLLABLE NEU
		0xB2AC == code || // Lo       HANGUL SYLLABLE NYI
		0xB2C8 == code || // Lo       HANGUL SYLLABLE NI
		0xB2E4 == code || // Lo       HANGUL SYLLABLE DA
		0xB300 == code || // Lo       HANGUL SYLLABLE DAE
		0xB31C == code || // Lo       HANGUL SYLLABLE DYA
		0xB338 == code || // Lo       HANGUL SYLLABLE DYAE
		0xB354 == code || // Lo       HANGUL SYLLABLE DEO
		0xB370 == code || // Lo       HANGUL SYLLABLE DE
		0xB38C == code || // Lo       HANGUL SYLLABLE DYEO
		0xB3A8 == code || // Lo       HANGUL SYLLABLE DYE
		0xB3C4 == code || // Lo       HANGUL SYLLABLE DO
		0xB3E0 == code || // Lo       HANGUL SYLLABLE DWA
		0xB3FC == code || // Lo       HANGUL SYLLABLE DWAE
		0xB418 == code || // Lo       HANGUL SYLLABLE DOE
		0xB434 == code || // Lo       HANGUL SYLLABLE DYO
		0xB450 == code || // Lo       HANGUL SYLLABLE DU
		0xB46C == code || // Lo       HANGUL SYLLABLE DWEO
		0xB488 == code || // Lo       HANGUL SYLLABLE DWE
		0xB4A4 == code || // Lo       HANGUL SYLLABLE DWI
		0xB4C0 == code || // Lo       HANGUL SYLLABLE DYU
		0xB4DC == code || // Lo       HANGUL SYLLABLE DEU
		0xB4F8 == code || // Lo       HANGUL SYLLABLE DYI
		0xB514 == code || // Lo       HANGUL SYLLABLE DI
		0xB530 == code || // Lo       HANGUL SYLLABLE DDA
		0xB54C == code || // Lo       HANGUL SYLLABLE DDAE
		0xB568 == code || // Lo       HANGUL SYLLABLE DDYA
		0xB584 == code || // Lo       HANGUL SYLLABLE DDYAE
		0xB5A0 == code || // Lo       HANGUL SYLLABLE DDEO
		0xB5BC == code || // Lo       HANGUL SYLLABLE DDE
		0xB5D8 == code || // Lo       HANGUL SYLLABLE DDYEO
		0xB5F4 == code || // Lo       HANGUL SYLLABLE DDYE
		0xB610 == code || // Lo       HANGUL SYLLABLE DDO
		0xB62C == code || // Lo       HANGUL SYLLABLE DDWA
		0xB648 == code || // Lo       HANGUL SYLLABLE DDWAE
		0xB664 == code || // Lo       HANGUL SYLLABLE DDOE
		0xB680 == code || // Lo       HANGUL SYLLABLE DDYO
		0xB69C == code || // Lo       HANGUL SYLLABLE DDU
		0xB6B8 == code || // Lo       HANGUL SYLLABLE DDWEO
		0xB6D4 == code || // Lo       HANGUL SYLLABLE DDWE
		0xB6F0 == code || // Lo       HANGUL SYLLABLE DDWI
		0xB70C == code || // Lo       HANGUL SYLLABLE DDYU
		0xB728 == code || // Lo       HANGUL SYLLABLE DDEU
		0xB744 == code || // Lo       HANGUL SYLLABLE DDYI
		0xB760 == code || // Lo       HANGUL SYLLABLE DDI
		0xB77C == code || // Lo       HANGUL SYLLABLE RA
		0xB798 == code || // Lo       HANGUL SYLLABLE RAE
		0xB7B4 == code || // Lo       HANGUL SYLLABLE RYA
		0xB7D0 == code || // Lo       HANGUL SYLLABLE RYAE
		0xB7EC == code || // Lo       HANGUL SYLLABLE REO
		0xB808 == code || // Lo       HANGUL SYLLABLE RE
		0xB824 == code || // Lo       HANGUL SYLLABLE RYEO
		0xB840 == code || // Lo       HANGUL SYLLABLE RYE
		0xB85C == code || // Lo       HANGUL SYLLABLE RO
		0xB878 == code || // Lo       HANGUL SYLLABLE RWA
		0xB894 == code || // Lo       HANGUL SYLLABLE RWAE
		0xB8B0 == code || // Lo       HANGUL SYLLABLE ROE
		0xB8CC == code || // Lo       HANGUL SYLLABLE RYO
		0xB8E8 == code || // Lo       HANGUL SYLLABLE RU
		0xB904 == code || // Lo       HANGUL SYLLABLE RWEO
		0xB920 == code || // Lo       HANGUL SYLLABLE RWE
		0xB93C == code || // Lo       HANGUL SYLLABLE RWI
		0xB958 == code || // Lo       HANGUL SYLLABLE RYU
		0xB974 == code || // Lo       HANGUL SYLLABLE REU
		0xB990 == code || // Lo       HANGUL SYLLABLE RYI
		0xB9AC == code || // Lo       HANGUL SYLLABLE RI
		0xB9C8 == code || // Lo       HANGUL SYLLABLE MA
		0xB9E4 == code || // Lo       HANGUL SYLLABLE MAE
		0xBA00 == code || // Lo       HANGUL SYLLABLE MYA
		0xBA1C == code || // Lo       HANGUL SYLLABLE MYAE
		0xBA38 == code || // Lo       HANGUL SYLLABLE MEO
		0xBA54 == code || // Lo       HANGUL SYLLABLE ME
		0xBA70 == code || // Lo       HANGUL SYLLABLE MYEO
		0xBA8C == code || // Lo       HANGUL SYLLABLE MYE
		0xBAA8 == code || // Lo       HANGUL SYLLABLE MO
		0xBAC4 == code || // Lo       HANGUL SYLLABLE MWA
		0xBAE0 == code || // Lo       HANGUL SYLLABLE MWAE
		0xBAFC == code || // Lo       HANGUL SYLLABLE MOE
		0xBB18 == code || // Lo       HANGUL SYLLABLE MYO
		0xBB34 == code || // Lo       HANGUL SYLLABLE MU
		0xBB50 == code || // Lo       HANGUL SYLLABLE MWEO
		0xBB6C == code || // Lo       HANGUL SYLLABLE MWE
		0xBB88 == code || // Lo       HANGUL SYLLABLE MWI
		0xBBA4 == code || // Lo       HANGUL SYLLABLE MYU
		0xBBC0 == code || // Lo       HANGUL SYLLABLE MEU
		0xBBDC == code || // Lo       HANGUL SYLLABLE MYI
		0xBBF8 == code || // Lo       HANGUL SYLLABLE MI
		0xBC14 == code || // Lo       HANGUL SYLLABLE BA
		0xBC30 == code || // Lo       HANGUL SYLLABLE BAE
		0xBC4C == code || // Lo       HANGUL SYLLABLE BYA
		0xBC68 == code || // Lo       HANGUL SYLLABLE BYAE
		0xBC84 == code || // Lo       HANGUL SYLLABLE BEO
		0xBCA0 == code || // Lo       HANGUL SYLLABLE BE
		0xBCBC == code || // Lo       HANGUL SYLLABLE BYEO
		0xBCD8 == code || // Lo       HANGUL SYLLABLE BYE
		0xBCF4 == code || // Lo       HANGUL SYLLABLE BO
		0xBD10 == code || // Lo       HANGUL SYLLABLE BWA
		0xBD2C == code || // Lo       HANGUL SYLLABLE BWAE
		0xBD48 == code || // Lo       HANGUL SYLLABLE BOE
		0xBD64 == code || // Lo       HANGUL SYLLABLE BYO
		0xBD80 == code || // Lo       HANGUL SYLLABLE BU
		0xBD9C == code || // Lo       HANGUL SYLLABLE BWEO
		0xBDB8 == code || // Lo       HANGUL SYLLABLE BWE
		0xBDD4 == code || // Lo       HANGUL SYLLABLE BWI
		0xBDF0 == code || // Lo       HANGUL SYLLABLE BYU
		0xBE0C == code || // Lo       HANGUL SYLLABLE BEU
		0xBE28 == code || // Lo       HANGUL SYLLABLE BYI
		0xBE44 == code || // Lo       HANGUL SYLLABLE BI
		0xBE60 == code || // Lo       HANGUL SYLLABLE BBA
		0xBE7C == code || // Lo       HANGUL SYLLABLE BBAE
		0xBE98 == code || // Lo       HANGUL SYLLABLE BBYA
		0xBEB4 == code || // Lo       HANGUL SYLLABLE BBYAE
		0xBED0 == code || // Lo       HANGUL SYLLABLE BBEO
		0xBEEC == code || // Lo       HANGUL SYLLABLE BBE
		0xBF08 == code || // Lo       HANGUL SYLLABLE BBYEO
		0xBF24 == code || // Lo       HANGUL SYLLABLE BBYE
		0xBF40 == code || // Lo       HANGUL SYLLABLE BBO
		0xBF5C == code || // Lo       HANGUL SYLLABLE BBWA
		0xBF78 == code || // Lo       HANGUL SYLLABLE BBWAE
		0xBF94 == code || // Lo       HANGUL SYLLABLE BBOE
		0xBFB0 == code || // Lo       HANGUL SYLLABLE BBYO
		0xBFCC == code || // Lo       HANGUL SYLLABLE BBU
		0xBFE8 == code || // Lo       HANGUL SYLLABLE BBWEO
		0xC004 == code || // Lo       HANGUL SYLLABLE BBWE
		0xC020 == code || // Lo       HANGUL SYLLABLE BBWI
		0xC03C == code || // Lo       HANGUL SYLLABLE BBYU
		0xC058 == code || // Lo       HANGUL SYLLABLE BBEU
		0xC074 == code || // Lo       HANGUL SYLLABLE BBYI
		0xC090 == code || // Lo       HANGUL SYLLABLE BBI
		0xC0AC == code || // Lo       HANGUL SYLLABLE SA
		0xC0C8 == code || // Lo       HANGUL SYLLABLE SAE
		0xC0E4 == code || // Lo       HANGUL SYLLABLE SYA
		0xC100 == code || // Lo       HANGUL SYLLABLE SYAE
		0xC11C == code || // Lo       HANGUL SYLLABLE SEO
		0xC138 == code || // Lo       HANGUL SYLLABLE SE
		0xC154 == code || // Lo       HANGUL SYLLABLE SYEO
		0xC170 == code || // Lo       HANGUL SYLLABLE SYE
		0xC18C == code || // Lo       HANGUL SYLLABLE SO
		0xC1A8 == code || // Lo       HANGUL SYLLABLE SWA
		0xC1C4 == code || // Lo       HANGUL SYLLABLE SWAE
		0xC1E0 == code || // Lo       HANGUL SYLLABLE SOE
		0xC1FC == code || // Lo       HANGUL SYLLABLE SYO
		0xC218 == code || // Lo       HANGUL SYLLABLE SU
		0xC234 == code || // Lo       HANGUL SYLLABLE SWEO
		0xC250 == code || // Lo       HANGUL SYLLABLE SWE
		0xC26C == code || // Lo       HANGUL SYLLABLE SWI
		0xC288 == code || // Lo       HANGUL SYLLABLE SYU
		0xC2A4 == code || // Lo       HANGUL SYLLABLE SEU
		0xC2C0 == code || // Lo       HANGUL SYLLABLE SYI
		0xC2DC == code || // Lo       HANGUL SYLLABLE SI
		0xC2F8 == code || // Lo       HANGUL SYLLABLE SSA
		0xC314 == code || // Lo       HANGUL SYLLABLE SSAE
		0xC330 == code || // Lo       HANGUL SYLLABLE SSYA
		0xC34C == code || // Lo       HANGUL SYLLABLE SSYAE
		0xC368 == code || // Lo       HANGUL SYLLABLE SSEO
		0xC384 == code || // Lo       HANGUL SYLLABLE SSE
		0xC3A0 == code || // Lo       HANGUL SYLLABLE SSYEO
		0xC3BC == code || // Lo       HANGUL SYLLABLE SSYE
		0xC3D8 == code || // Lo       HANGUL SYLLABLE SSO
		0xC3F4 == code || // Lo       HANGUL SYLLABLE SSWA
		0xC410 == code || // Lo       HANGUL SYLLABLE SSWAE
		0xC42C == code || // Lo       HANGUL SYLLABLE SSOE
		0xC448 == code || // Lo       HANGUL SYLLABLE SSYO
		0xC464 == code || // Lo       HANGUL SYLLABLE SSU
		0xC480 == code || // Lo       HANGUL SYLLABLE SSWEO
		0xC49C == code || // Lo       HANGUL SYLLABLE SSWE
		0xC4B8 == code || // Lo       HANGUL SYLLABLE SSWI
		0xC4D4 == code || // Lo       HANGUL SYLLABLE SSYU
		0xC4F0 == code || // Lo       HANGUL SYLLABLE SSEU
		0xC50C == code || // Lo       HANGUL SYLLABLE SSYI
		0xC528 == code || // Lo       HANGUL SYLLABLE SSI
		0xC544 == code || // Lo       HANGUL SYLLABLE A
		0xC560 == code || // Lo       HANGUL SYLLABLE AE
		0xC57C == code || // Lo       HANGUL SYLLABLE YA
		0xC598 == code || // Lo       HANGUL SYLLABLE YAE
		0xC5B4 == code || // Lo       HANGUL SYLLABLE EO
		0xC5D0 == code || // Lo       HANGUL SYLLABLE E
		0xC5EC == code || // Lo       HANGUL SYLLABLE YEO
		0xC608 == code || // Lo       HANGUL SYLLABLE YE
		0xC624 == code || // Lo       HANGUL SYLLABLE O
		0xC640 == code || // Lo       HANGUL SYLLABLE WA
		0xC65C == code || // Lo       HANGUL SYLLABLE WAE
		0xC678 == code || // Lo       HANGUL SYLLABLE OE
		0xC694 == code || // Lo       HANGUL SYLLABLE YO
		0xC6B0 == code || // Lo       HANGUL SYLLABLE U
		0xC6CC == code || // Lo       HANGUL SYLLABLE WEO
		0xC6E8 == code || // Lo       HANGUL SYLLABLE WE
		0xC704 == code || // Lo       HANGUL SYLLABLE WI
		0xC720 == code || // Lo       HANGUL SYLLABLE YU
		0xC73C == code || // Lo       HANGUL SYLLABLE EU
		0xC758 == code || // Lo       HANGUL SYLLABLE YI
		0xC774 == code || // Lo       HANGUL SYLLABLE I
		0xC790 == code || // Lo       HANGUL SYLLABLE JA
		0xC7AC == code || // Lo       HANGUL SYLLABLE JAE
		0xC7C8 == code || // Lo       HANGUL SYLLABLE JYA
		0xC7E4 == code || // Lo       HANGUL SYLLABLE JYAE
		0xC800 == code || // Lo       HANGUL SYLLABLE JEO
		0xC81C == code || // Lo       HANGUL SYLLABLE JE
		0xC838 == code || // Lo       HANGUL SYLLABLE JYEO
		0xC854 == code || // Lo       HANGUL SYLLABLE JYE
		0xC870 == code || // Lo       HANGUL SYLLABLE JO
		0xC88C == code || // Lo       HANGUL SYLLABLE JWA
		0xC8A8 == code || // Lo       HANGUL SYLLABLE JWAE
		0xC8C4 == code || // Lo       HANGUL SYLLABLE JOE
		0xC8E0 == code || // Lo       HANGUL SYLLABLE JYO
		0xC8FC == code || // Lo       HANGUL SYLLABLE JU
		0xC918 == code || // Lo       HANGUL SYLLABLE JWEO
		0xC934 == code || // Lo       HANGUL SYLLABLE JWE
		0xC950 == code || // Lo       HANGUL SYLLABLE JWI
		0xC96C == code || // Lo       HANGUL SYLLABLE JYU
		0xC988 == code || // Lo       HANGUL SYLLABLE JEU
		0xC9A4 == code || // Lo       HANGUL SYLLABLE JYI
		0xC9C0 == code || // Lo       HANGUL SYLLABLE JI
		0xC9DC == code || // Lo       HANGUL SYLLABLE JJA
		0xC9F8 == code || // Lo       HANGUL SYLLABLE JJAE
		0xCA14 == code || // Lo       HANGUL SYLLABLE JJYA
		0xCA30 == code || // Lo       HANGUL SYLLABLE JJYAE
		0xCA4C == code || // Lo       HANGUL SYLLABLE JJEO
		0xCA68 == code || // Lo       HANGUL SYLLABLE JJE
		0xCA84 == code || // Lo       HANGUL SYLLABLE JJYEO
		0xCAA0 == code || // Lo       HANGUL SYLLABLE JJYE
		0xCABC == code || // Lo       HANGUL SYLLABLE JJO
		0xCAD8 == code || // Lo       HANGUL SYLLABLE JJWA
		0xCAF4 == code || // Lo       HANGUL SYLLABLE JJWAE
		0xCB10 == code || // Lo       HANGUL SYLLABLE JJOE
		0xCB2C == code || // Lo       HANGUL SYLLABLE JJYO
		0xCB48 == code || // Lo       HANGUL SYLLABLE JJU
		0xCB64 == code || // Lo       HANGUL SYLLABLE JJWEO
		0xCB80 == code || // Lo       HANGUL SYLLABLE JJWE
		0xCB9C == code || // Lo       HANGUL SYLLABLE JJWI
		0xCBB8 == code || // Lo       HANGUL SYLLABLE JJYU
		0xCBD4 == code || // Lo       HANGUL SYLLABLE JJEU
		0xCBF0 == code || // Lo       HANGUL SYLLABLE JJYI
		0xCC0C == code || // Lo       HANGUL SYLLABLE JJI
		0xCC28 == code || // Lo       HANGUL SYLLABLE CA
		0xCC44 == code || // Lo       HANGUL SYLLABLE CAE
		0xCC60 == code || // Lo       HANGUL SYLLABLE CYA
		0xCC7C == code || // Lo       HANGUL SYLLABLE CYAE
		0xCC98 == code || // Lo       HANGUL SYLLABLE CEO
		0xCCB4 == code || // Lo       HANGUL SYLLABLE CE
		0xCCD0 == code || // Lo       HANGUL SYLLABLE CYEO
		0xCCEC == code || // Lo       HANGUL SYLLABLE CYE
		0xCD08 == code || // Lo       HANGUL SYLLABLE CO
		0xCD24 == code || // Lo       HANGUL SYLLABLE CWA
		0xCD40 == code || // Lo       HANGUL SYLLABLE CWAE
		0xCD5C == code || // Lo       HANGUL SYLLABLE COE
		0xCD78 == code || // Lo       HANGUL SYLLABLE CYO
		0xCD94 == code || // Lo       HANGUL SYLLABLE CU
		0xCDB0 == code || // Lo       HANGUL SYLLABLE CWEO
		0xCDCC == code || // Lo       HANGUL SYLLABLE CWE
		0xCDE8 == code || // Lo       HANGUL SYLLABLE CWI
		0xCE04 == code || // Lo       HANGUL SYLLABLE CYU
		0xCE20 == code || // Lo       HANGUL SYLLABLE CEU
		0xCE3C == code || // Lo       HANGUL SYLLABLE CYI
		0xCE58 == code || // Lo       HANGUL SYLLABLE CI
		0xCE74 == code || // Lo       HANGUL SYLLABLE KA
		0xCE90 == code || // Lo       HANGUL SYLLABLE KAE
		0xCEAC == code || // Lo       HANGUL SYLLABLE KYA
		0xCEC8 == code || // Lo       HANGUL SYLLABLE KYAE
		0xCEE4 == code || // Lo       HANGUL SYLLABLE KEO
		0xCF00 == code || // Lo       HANGUL SYLLABLE KE
		0xCF1C == code || // Lo       HANGUL SYLLABLE KYEO
		0xCF38 == code || // Lo       HANGUL SYLLABLE KYE
		0xCF54 == code || // Lo       HANGUL SYLLABLE KO
		0xCF70 == code || // Lo       HANGUL SYLLABLE KWA
		0xCF8C == code || // Lo       HANGUL SYLLABLE KWAE
		0xCFA8 == code || // Lo       HANGUL SYLLABLE KOE
		0xCFC4 == code || // Lo       HANGUL SYLLABLE KYO
		0xCFE0 == code || // Lo       HANGUL SYLLABLE KU
		0xCFFC == code || // Lo       HANGUL SYLLABLE KWEO
		0xD018 == code || // Lo       HANGUL SYLLABLE KWE
		0xD034 == code || // Lo       HANGUL SYLLABLE KWI
		0xD050 == code || // Lo       HANGUL SYLLABLE KYU
		0xD06C == code || // Lo       HANGUL SYLLABLE KEU
		0xD088 == code || // Lo       HANGUL SYLLABLE KYI
		0xD0A4 == code || // Lo       HANGUL SYLLABLE KI
		0xD0C0 == code || // Lo       HANGUL SYLLABLE TA
		0xD0DC == code || // Lo       HANGUL SYLLABLE TAE
		0xD0F8 == code || // Lo       HANGUL SYLLABLE TYA
		0xD114 == code || // Lo       HANGUL SYLLABLE TYAE
		0xD130 == code || // Lo       HANGUL SYLLABLE TEO
		0xD14C == code || // Lo       HANGUL SYLLABLE TE
		0xD168 == code || // Lo       HANGUL SYLLABLE TYEO
		0xD184 == code || // Lo       HANGUL SYLLABLE TYE
		0xD1A0 == code || // Lo       HANGUL SYLLABLE TO
		0xD1BC == code || // Lo       HANGUL SYLLABLE TWA
		0xD1D8 == code || // Lo       HANGUL SYLLABLE TWAE
		0xD1F4 == code || // Lo       HANGUL SYLLABLE TOE
		0xD210 == code || // Lo       HANGUL SYLLABLE TYO
		0xD22C == code || // Lo       HANGUL SYLLABLE TU
		0xD248 == code || // Lo       HANGUL SYLLABLE TWEO
		0xD264 == code || // Lo       HANGUL SYLLABLE TWE
		0xD280 == code || // Lo       HANGUL SYLLABLE TWI
		0xD29C == code || // Lo       HANGUL SYLLABLE TYU
		0xD2B8 == code || // Lo       HANGUL SYLLABLE TEU
		0xD2D4 == code || // Lo       HANGUL SYLLABLE TYI
		0xD2F0 == code || // Lo       HANGUL SYLLABLE TI
		0xD30C == code || // Lo       HANGUL SYLLABLE PA
		0xD328 == code || // Lo       HANGUL SYLLABLE PAE
		0xD344 == code || // Lo       HANGUL SYLLABLE PYA
		0xD360 == code || // Lo       HANGUL SYLLABLE PYAE
		0xD37C == code || // Lo       HANGUL SYLLABLE PEO
		0xD398 == code || // Lo       HANGUL SYLLABLE PE
		0xD3B4 == code || // Lo       HANGUL SYLLABLE PYEO
		0xD3D0 == code || // Lo       HANGUL SYLLABLE PYE
		0xD3EC == code || // Lo       HANGUL SYLLABLE PO
		0xD408 == code || // Lo       HANGUL SYLLABLE PWA
		0xD424 == code || // Lo       HANGUL SYLLABLE PWAE
		0xD440 == code || // Lo       HANGUL SYLLABLE POE
		0xD45C == code || // Lo       HANGUL SYLLABLE PYO
		0xD478 == code || // Lo       HANGUL SYLLABLE PU
		0xD494 == code || // Lo       HANGUL SYLLABLE PWEO
		0xD4B0 == code || // Lo       HANGUL SYLLABLE PWE
		0xD4CC == code || // Lo       HANGUL SYLLABLE PWI
		0xD4E8 == code || // Lo       HANGUL SYLLABLE PYU
		0xD504 == code || // Lo       HANGUL SYLLABLE PEU
		0xD520 == code || // Lo       HANGUL SYLLABLE PYI
		0xD53C == code || // Lo       HANGUL SYLLABLE PI
		0xD558 == code || // Lo       HANGUL SYLLABLE HA
		0xD574 == code || // Lo       HANGUL SYLLABLE HAE
		0xD590 == code || // Lo       HANGUL SYLLABLE HYA
		0xD5AC == code || // Lo       HANGUL SYLLABLE HYAE
		0xD5C8 == code || // Lo       HANGUL SYLLABLE HEO
		0xD5E4 == code || // Lo       HANGUL SYLLABLE HE
		0xD600 == code || // Lo       HANGUL SYLLABLE HYEO
		0xD61C == code || // Lo       HANGUL SYLLABLE HYE
		0xD638 == code || // Lo       HANGUL SYLLABLE HO
		0xD654 == code || // Lo       HANGUL SYLLABLE HWA
		0xD670 == code || // Lo       HANGUL SYLLABLE HWAE
		0xD68C == code || // Lo       HANGUL SYLLABLE HOE
		0xD6A8 == code || // Lo       HANGUL SYLLABLE HYO
		0xD6C4 == code || // Lo       HANGUL SYLLABLE HU
		0xD6E0 == code || // Lo       HANGUL SYLLABLE HWEO
		0xD6FC == code || // Lo       HANGUL SYLLABLE HWE
		0xD718 == code || // Lo       HANGUL SYLLABLE HWI
		0xD734 == code || // Lo       HANGUL SYLLABLE HYU
		0xD750 == code || // Lo       HANGUL SYLLABLE HEU
		0xD76C == code || // Lo       HANGUL SYLLABLE HYI
		0xD788 == code // Lo       HANGUL SYLLABLE HI
		){
			return LV;
		}
		
		if(
		(0xAC01 <= code && code <= 0xAC1B) || // Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH
		(0xAC1D <= code && code <= 0xAC37) || // Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH
		(0xAC39 <= code && code <= 0xAC53) || // Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH
		(0xAC55 <= code && code <= 0xAC6F) || // Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH
		(0xAC71 <= code && code <= 0xAC8B) || // Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH
		(0xAC8D <= code && code <= 0xACA7) || // Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH
		(0xACA9 <= code && code <= 0xACC3) || // Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH
		(0xACC5 <= code && code <= 0xACDF) || // Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH
		(0xACE1 <= code && code <= 0xACFB) || // Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH
		(0xACFD <= code && code <= 0xAD17) || // Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH
		(0xAD19 <= code && code <= 0xAD33) || // Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH
		(0xAD35 <= code && code <= 0xAD4F) || // Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH
		(0xAD51 <= code && code <= 0xAD6B) || // Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH
		(0xAD6D <= code && code <= 0xAD87) || // Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH
		(0xAD89 <= code && code <= 0xADA3) || // Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH
		(0xADA5 <= code && code <= 0xADBF) || // Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH
		(0xADC1 <= code && code <= 0xADDB) || // Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH
		(0xADDD <= code && code <= 0xADF7) || // Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH
		(0xADF9 <= code && code <= 0xAE13) || // Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH
		(0xAE15 <= code && code <= 0xAE2F) || // Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH
		(0xAE31 <= code && code <= 0xAE4B) || // Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH
		(0xAE4D <= code && code <= 0xAE67) || // Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH
		(0xAE69 <= code && code <= 0xAE83) || // Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH
		(0xAE85 <= code && code <= 0xAE9F) || // Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH
		(0xAEA1 <= code && code <= 0xAEBB) || // Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH
		(0xAEBD <= code && code <= 0xAED7) || // Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH
		(0xAED9 <= code && code <= 0xAEF3) || // Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH
		(0xAEF5 <= code && code <= 0xAF0F) || // Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH
		(0xAF11 <= code && code <= 0xAF2B) || // Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH
		(0xAF2D <= code && code <= 0xAF47) || // Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH
		(0xAF49 <= code && code <= 0xAF63) || // Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH
		(0xAF65 <= code && code <= 0xAF7F) || // Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH
		(0xAF81 <= code && code <= 0xAF9B) || // Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH
		(0xAF9D <= code && code <= 0xAFB7) || // Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH
		(0xAFB9 <= code && code <= 0xAFD3) || // Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH
		(0xAFD5 <= code && code <= 0xAFEF) || // Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH
		(0xAFF1 <= code && code <= 0xB00B) || // Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH
		(0xB00D <= code && code <= 0xB027) || // Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH
		(0xB029 <= code && code <= 0xB043) || // Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH
		(0xB045 <= code && code <= 0xB05F) || // Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH
		(0xB061 <= code && code <= 0xB07B) || // Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH
		(0xB07D <= code && code <= 0xB097) || // Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH
		(0xB099 <= code && code <= 0xB0B3) || // Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH
		(0xB0B5 <= code && code <= 0xB0CF) || // Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH
		(0xB0D1 <= code && code <= 0xB0EB) || // Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH
		(0xB0ED <= code && code <= 0xB107) || // Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH
		(0xB109 <= code && code <= 0xB123) || // Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH
		(0xB125 <= code && code <= 0xB13F) || // Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH
		(0xB141 <= code && code <= 0xB15B) || // Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH
		(0xB15D <= code && code <= 0xB177) || // Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH
		(0xB179 <= code && code <= 0xB193) || // Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH
		(0xB195 <= code && code <= 0xB1AF) || // Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH
		(0xB1B1 <= code && code <= 0xB1CB) || // Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH
		(0xB1CD <= code && code <= 0xB1E7) || // Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH
		(0xB1E9 <= code && code <= 0xB203) || // Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH
		(0xB205 <= code && code <= 0xB21F) || // Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH
		(0xB221 <= code && code <= 0xB23B) || // Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH
		(0xB23D <= code && code <= 0xB257) || // Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH
		(0xB259 <= code && code <= 0xB273) || // Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH
		(0xB275 <= code && code <= 0xB28F) || // Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH
		(0xB291 <= code && code <= 0xB2AB) || // Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH
		(0xB2AD <= code && code <= 0xB2C7) || // Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH
		(0xB2C9 <= code && code <= 0xB2E3) || // Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH
		(0xB2E5 <= code && code <= 0xB2FF) || // Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH
		(0xB301 <= code && code <= 0xB31B) || // Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH
		(0xB31D <= code && code <= 0xB337) || // Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH
		(0xB339 <= code && code <= 0xB353) || // Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH
		(0xB355 <= code && code <= 0xB36F) || // Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH
		(0xB371 <= code && code <= 0xB38B) || // Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH
		(0xB38D <= code && code <= 0xB3A7) || // Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH
		(0xB3A9 <= code && code <= 0xB3C3) || // Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH
		(0xB3C5 <= code && code <= 0xB3DF) || // Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH
		(0xB3E1 <= code && code <= 0xB3FB) || // Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH
		(0xB3FD <= code && code <= 0xB417) || // Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH
		(0xB419 <= code && code <= 0xB433) || // Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH
		(0xB435 <= code && code <= 0xB44F) || // Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH
		(0xB451 <= code && code <= 0xB46B) || // Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH
		(0xB46D <= code && code <= 0xB487) || // Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH
		(0xB489 <= code && code <= 0xB4A3) || // Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH
		(0xB4A5 <= code && code <= 0xB4BF) || // Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH
		(0xB4C1 <= code && code <= 0xB4DB) || // Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH
		(0xB4DD <= code && code <= 0xB4F7) || // Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH
		(0xB4F9 <= code && code <= 0xB513) || // Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH
		(0xB515 <= code && code <= 0xB52F) || // Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH
		(0xB531 <= code && code <= 0xB54B) || // Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH
		(0xB54D <= code && code <= 0xB567) || // Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH
		(0xB569 <= code && code <= 0xB583) || // Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH
		(0xB585 <= code && code <= 0xB59F) || // Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH
		(0xB5A1 <= code && code <= 0xB5BB) || // Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH
		(0xB5BD <= code && code <= 0xB5D7) || // Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH
		(0xB5D9 <= code && code <= 0xB5F3) || // Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH
		(0xB5F5 <= code && code <= 0xB60F) || // Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH
		(0xB611 <= code && code <= 0xB62B) || // Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH
		(0xB62D <= code && code <= 0xB647) || // Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH
		(0xB649 <= code && code <= 0xB663) || // Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH
		(0xB665 <= code && code <= 0xB67F) || // Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH
		(0xB681 <= code && code <= 0xB69B) || // Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH
		(0xB69D <= code && code <= 0xB6B7) || // Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH
		(0xB6B9 <= code && code <= 0xB6D3) || // Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH
		(0xB6D5 <= code && code <= 0xB6EF) || // Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH
		(0xB6F1 <= code && code <= 0xB70B) || // Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH
		(0xB70D <= code && code <= 0xB727) || // Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH
		(0xB729 <= code && code <= 0xB743) || // Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH
		(0xB745 <= code && code <= 0xB75F) || // Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH
		(0xB761 <= code && code <= 0xB77B) || // Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH
		(0xB77D <= code && code <= 0xB797) || // Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH
		(0xB799 <= code && code <= 0xB7B3) || // Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH
		(0xB7B5 <= code && code <= 0xB7CF) || // Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH
		(0xB7D1 <= code && code <= 0xB7EB) || // Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH
		(0xB7ED <= code && code <= 0xB807) || // Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH
		(0xB809 <= code && code <= 0xB823) || // Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH
		(0xB825 <= code && code <= 0xB83F) || // Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH
		(0xB841 <= code && code <= 0xB85B) || // Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH
		(0xB85D <= code && code <= 0xB877) || // Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH
		(0xB879 <= code && code <= 0xB893) || // Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH
		(0xB895 <= code && code <= 0xB8AF) || // Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH
		(0xB8B1 <= code && code <= 0xB8CB) || // Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH
		(0xB8CD <= code && code <= 0xB8E7) || // Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH
		(0xB8E9 <= code && code <= 0xB903) || // Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH
		(0xB905 <= code && code <= 0xB91F) || // Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH
		(0xB921 <= code && code <= 0xB93B) || // Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH
		(0xB93D <= code && code <= 0xB957) || // Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH
		(0xB959 <= code && code <= 0xB973) || // Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH
		(0xB975 <= code && code <= 0xB98F) || // Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH
		(0xB991 <= code && code <= 0xB9AB) || // Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH
		(0xB9AD <= code && code <= 0xB9C7) || // Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH
		(0xB9C9 <= code && code <= 0xB9E3) || // Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH
		(0xB9E5 <= code && code <= 0xB9FF) || // Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH
		(0xBA01 <= code && code <= 0xBA1B) || // Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH
		(0xBA1D <= code && code <= 0xBA37) || // Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH
		(0xBA39 <= code && code <= 0xBA53) || // Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH
		(0xBA55 <= code && code <= 0xBA6F) || // Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH
		(0xBA71 <= code && code <= 0xBA8B) || // Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH
		(0xBA8D <= code && code <= 0xBAA7) || // Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH
		(0xBAA9 <= code && code <= 0xBAC3) || // Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH
		(0xBAC5 <= code && code <= 0xBADF) || // Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH
		(0xBAE1 <= code && code <= 0xBAFB) || // Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH
		(0xBAFD <= code && code <= 0xBB17) || // Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH
		(0xBB19 <= code && code <= 0xBB33) || // Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH
		(0xBB35 <= code && code <= 0xBB4F) || // Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH
		(0xBB51 <= code && code <= 0xBB6B) || // Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH
		(0xBB6D <= code && code <= 0xBB87) || // Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH
		(0xBB89 <= code && code <= 0xBBA3) || // Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH
		(0xBBA5 <= code && code <= 0xBBBF) || // Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH
		(0xBBC1 <= code && code <= 0xBBDB) || // Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH
		(0xBBDD <= code && code <= 0xBBF7) || // Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH
		(0xBBF9 <= code && code <= 0xBC13) || // Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH
		(0xBC15 <= code && code <= 0xBC2F) || // Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH
		(0xBC31 <= code && code <= 0xBC4B) || // Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH
		(0xBC4D <= code && code <= 0xBC67) || // Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH
		(0xBC69 <= code && code <= 0xBC83) || // Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH
		(0xBC85 <= code && code <= 0xBC9F) || // Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH
		(0xBCA1 <= code && code <= 0xBCBB) || // Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH
		(0xBCBD <= code && code <= 0xBCD7) || // Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH
		(0xBCD9 <= code && code <= 0xBCF3) || // Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH
		(0xBCF5 <= code && code <= 0xBD0F) || // Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH
		(0xBD11 <= code && code <= 0xBD2B) || // Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH
		(0xBD2D <= code && code <= 0xBD47) || // Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH
		(0xBD49 <= code && code <= 0xBD63) || // Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH
		(0xBD65 <= code && code <= 0xBD7F) || // Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH
		(0xBD81 <= code && code <= 0xBD9B) || // Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH
		(0xBD9D <= code && code <= 0xBDB7) || // Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH
		(0xBDB9 <= code && code <= 0xBDD3) || // Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH
		(0xBDD5 <= code && code <= 0xBDEF) || // Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH
		(0xBDF1 <= code && code <= 0xBE0B) || // Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH
		(0xBE0D <= code && code <= 0xBE27) || // Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH
		(0xBE29 <= code && code <= 0xBE43) || // Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH
		(0xBE45 <= code && code <= 0xBE5F) || // Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH
		(0xBE61 <= code && code <= 0xBE7B) || // Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH
		(0xBE7D <= code && code <= 0xBE97) || // Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH
		(0xBE99 <= code && code <= 0xBEB3) || // Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH
		(0xBEB5 <= code && code <= 0xBECF) || // Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH
		(0xBED1 <= code && code <= 0xBEEB) || // Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH
		(0xBEED <= code && code <= 0xBF07) || // Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH
		(0xBF09 <= code && code <= 0xBF23) || // Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH
		(0xBF25 <= code && code <= 0xBF3F) || // Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH
		(0xBF41 <= code && code <= 0xBF5B) || // Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH
		(0xBF5D <= code && code <= 0xBF77) || // Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH
		(0xBF79 <= code && code <= 0xBF93) || // Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH
		(0xBF95 <= code && code <= 0xBFAF) || // Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH
		(0xBFB1 <= code && code <= 0xBFCB) || // Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH
		(0xBFCD <= code && code <= 0xBFE7) || // Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH
		(0xBFE9 <= code && code <= 0xC003) || // Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH
		(0xC005 <= code && code <= 0xC01F) || // Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH
		(0xC021 <= code && code <= 0xC03B) || // Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH
		(0xC03D <= code && code <= 0xC057) || // Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH
		(0xC059 <= code && code <= 0xC073) || // Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH
		(0xC075 <= code && code <= 0xC08F) || // Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH
		(0xC091 <= code && code <= 0xC0AB) || // Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH
		(0xC0AD <= code && code <= 0xC0C7) || // Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH
		(0xC0C9 <= code && code <= 0xC0E3) || // Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH
		(0xC0E5 <= code && code <= 0xC0FF) || // Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH
		(0xC101 <= code && code <= 0xC11B) || // Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH
		(0xC11D <= code && code <= 0xC137) || // Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH
		(0xC139 <= code && code <= 0xC153) || // Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH
		(0xC155 <= code && code <= 0xC16F) || // Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH
		(0xC171 <= code && code <= 0xC18B) || // Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH
		(0xC18D <= code && code <= 0xC1A7) || // Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH
		(0xC1A9 <= code && code <= 0xC1C3) || // Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH
		(0xC1C5 <= code && code <= 0xC1DF) || // Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH
		(0xC1E1 <= code && code <= 0xC1FB) || // Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH
		(0xC1FD <= code && code <= 0xC217) || // Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH
		(0xC219 <= code && code <= 0xC233) || // Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH
		(0xC235 <= code && code <= 0xC24F) || // Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH
		(0xC251 <= code && code <= 0xC26B) || // Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH
		(0xC26D <= code && code <= 0xC287) || // Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH
		(0xC289 <= code && code <= 0xC2A3) || // Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH
		(0xC2A5 <= code && code <= 0xC2BF) || // Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH
		(0xC2C1 <= code && code <= 0xC2DB) || // Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH
		(0xC2DD <= code && code <= 0xC2F7) || // Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH
		(0xC2F9 <= code && code <= 0xC313) || // Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH
		(0xC315 <= code && code <= 0xC32F) || // Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH
		(0xC331 <= code && code <= 0xC34B) || // Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH
		(0xC34D <= code && code <= 0xC367) || // Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH
		(0xC369 <= code && code <= 0xC383) || // Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH
		(0xC385 <= code && code <= 0xC39F) || // Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH
		(0xC3A1 <= code && code <= 0xC3BB) || // Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH
		(0xC3BD <= code && code <= 0xC3D7) || // Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH
		(0xC3D9 <= code && code <= 0xC3F3) || // Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH
		(0xC3F5 <= code && code <= 0xC40F) || // Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH
		(0xC411 <= code && code <= 0xC42B) || // Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH
		(0xC42D <= code && code <= 0xC447) || // Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH
		(0xC449 <= code && code <= 0xC463) || // Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH
		(0xC465 <= code && code <= 0xC47F) || // Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH
		(0xC481 <= code && code <= 0xC49B) || // Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH
		(0xC49D <= code && code <= 0xC4B7) || // Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH
		(0xC4B9 <= code && code <= 0xC4D3) || // Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH
		(0xC4D5 <= code && code <= 0xC4EF) || // Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH
		(0xC4F1 <= code && code <= 0xC50B) || // Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH
		(0xC50D <= code && code <= 0xC527) || // Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH
		(0xC529 <= code && code <= 0xC543) || // Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH
		(0xC545 <= code && code <= 0xC55F) || // Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH
		(0xC561 <= code && code <= 0xC57B) || // Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH
		(0xC57D <= code && code <= 0xC597) || // Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH
		(0xC599 <= code && code <= 0xC5B3) || // Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH
		(0xC5B5 <= code && code <= 0xC5CF) || // Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH
		(0xC5D1 <= code && code <= 0xC5EB) || // Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH
		(0xC5ED <= code && code <= 0xC607) || // Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH
		(0xC609 <= code && code <= 0xC623) || // Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH
		(0xC625 <= code && code <= 0xC63F) || // Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH
		(0xC641 <= code && code <= 0xC65B) || // Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH
		(0xC65D <= code && code <= 0xC677) || // Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH
		(0xC679 <= code && code <= 0xC693) || // Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH
		(0xC695 <= code && code <= 0xC6AF) || // Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH
		(0xC6B1 <= code && code <= 0xC6CB) || // Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH
		(0xC6CD <= code && code <= 0xC6E7) || // Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH
		(0xC6E9 <= code && code <= 0xC703) || // Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH
		(0xC705 <= code && code <= 0xC71F) || // Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH
		(0xC721 <= code && code <= 0xC73B) || // Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH
		(0xC73D <= code && code <= 0xC757) || // Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH
		(0xC759 <= code && code <= 0xC773) || // Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH
		(0xC775 <= code && code <= 0xC78F) || // Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH
		(0xC791 <= code && code <= 0xC7AB) || // Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH
		(0xC7AD <= code && code <= 0xC7C7) || // Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH
		(0xC7C9 <= code && code <= 0xC7E3) || // Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH
		(0xC7E5 <= code && code <= 0xC7FF) || // Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH
		(0xC801 <= code && code <= 0xC81B) || // Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH
		(0xC81D <= code && code <= 0xC837) || // Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH
		(0xC839 <= code && code <= 0xC853) || // Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH
		(0xC855 <= code && code <= 0xC86F) || // Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH
		(0xC871 <= code && code <= 0xC88B) || // Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH
		(0xC88D <= code && code <= 0xC8A7) || // Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH
		(0xC8A9 <= code && code <= 0xC8C3) || // Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH
		(0xC8C5 <= code && code <= 0xC8DF) || // Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH
		(0xC8E1 <= code && code <= 0xC8FB) || // Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH
		(0xC8FD <= code && code <= 0xC917) || // Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH
		(0xC919 <= code && code <= 0xC933) || // Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH
		(0xC935 <= code && code <= 0xC94F) || // Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH
		(0xC951 <= code && code <= 0xC96B) || // Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH
		(0xC96D <= code && code <= 0xC987) || // Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH
		(0xC989 <= code && code <= 0xC9A3) || // Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH
		(0xC9A5 <= code && code <= 0xC9BF) || // Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH
		(0xC9C1 <= code && code <= 0xC9DB) || // Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH
		(0xC9DD <= code && code <= 0xC9F7) || // Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH
		(0xC9F9 <= code && code <= 0xCA13) || // Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH
		(0xCA15 <= code && code <= 0xCA2F) || // Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH
		(0xCA31 <= code && code <= 0xCA4B) || // Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH
		(0xCA4D <= code && code <= 0xCA67) || // Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH
		(0xCA69 <= code && code <= 0xCA83) || // Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH
		(0xCA85 <= code && code <= 0xCA9F) || // Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH
		(0xCAA1 <= code && code <= 0xCABB) || // Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH
		(0xCABD <= code && code <= 0xCAD7) || // Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH
		(0xCAD9 <= code && code <= 0xCAF3) || // Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH
		(0xCAF5 <= code && code <= 0xCB0F) || // Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH
		(0xCB11 <= code && code <= 0xCB2B) || // Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH
		(0xCB2D <= code && code <= 0xCB47) || // Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH
		(0xCB49 <= code && code <= 0xCB63) || // Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH
		(0xCB65 <= code && code <= 0xCB7F) || // Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH
		(0xCB81 <= code && code <= 0xCB9B) || // Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH
		(0xCB9D <= code && code <= 0xCBB7) || // Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH
		(0xCBB9 <= code && code <= 0xCBD3) || // Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH
		(0xCBD5 <= code && code <= 0xCBEF) || // Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH
		(0xCBF1 <= code && code <= 0xCC0B) || // Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH
		(0xCC0D <= code && code <= 0xCC27) || // Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH
		(0xCC29 <= code && code <= 0xCC43) || // Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH
		(0xCC45 <= code && code <= 0xCC5F) || // Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH
		(0xCC61 <= code && code <= 0xCC7B) || // Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH
		(0xCC7D <= code && code <= 0xCC97) || // Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH
		(0xCC99 <= code && code <= 0xCCB3) || // Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH
		(0xCCB5 <= code && code <= 0xCCCF) || // Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH
		(0xCCD1 <= code && code <= 0xCCEB) || // Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH
		(0xCCED <= code && code <= 0xCD07) || // Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH
		(0xCD09 <= code && code <= 0xCD23) || // Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH
		(0xCD25 <= code && code <= 0xCD3F) || // Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH
		(0xCD41 <= code && code <= 0xCD5B) || // Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH
		(0xCD5D <= code && code <= 0xCD77) || // Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH
		(0xCD79 <= code && code <= 0xCD93) || // Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH
		(0xCD95 <= code && code <= 0xCDAF) || // Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH
		(0xCDB1 <= code && code <= 0xCDCB) || // Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH
		(0xCDCD <= code && code <= 0xCDE7) || // Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH
		(0xCDE9 <= code && code <= 0xCE03) || // Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH
		(0xCE05 <= code && code <= 0xCE1F) || // Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH
		(0xCE21 <= code && code <= 0xCE3B) || // Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH
		(0xCE3D <= code && code <= 0xCE57) || // Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH
		(0xCE59 <= code && code <= 0xCE73) || // Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH
		(0xCE75 <= code && code <= 0xCE8F) || // Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH
		(0xCE91 <= code && code <= 0xCEAB) || // Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH
		(0xCEAD <= code && code <= 0xCEC7) || // Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH
		(0xCEC9 <= code && code <= 0xCEE3) || // Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH
		(0xCEE5 <= code && code <= 0xCEFF) || // Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH
		(0xCF01 <= code && code <= 0xCF1B) || // Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH
		(0xCF1D <= code && code <= 0xCF37) || // Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH
		(0xCF39 <= code && code <= 0xCF53) || // Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH
		(0xCF55 <= code && code <= 0xCF6F) || // Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH
		(0xCF71 <= code && code <= 0xCF8B) || // Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH
		(0xCF8D <= code && code <= 0xCFA7) || // Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH
		(0xCFA9 <= code && code <= 0xCFC3) || // Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH
		(0xCFC5 <= code && code <= 0xCFDF) || // Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH
		(0xCFE1 <= code && code <= 0xCFFB) || // Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH
		(0xCFFD <= code && code <= 0xD017) || // Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH
		(0xD019 <= code && code <= 0xD033) || // Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH
		(0xD035 <= code && code <= 0xD04F) || // Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH
		(0xD051 <= code && code <= 0xD06B) || // Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
		(0xD06D <= code && code <= 0xD087) || // Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
		(0xD089 <= code && code <= 0xD0A3) || // Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
		(0xD0A5 <= code && code <= 0xD0BF) || // Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
		(0xD0C1 <= code && code <= 0xD0DB) || // Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
		(0xD0DD <= code && code <= 0xD0F7) || // Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
		(0xD0F9 <= code && code <= 0xD113) || // Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
		(0xD115 <= code && code <= 0xD12F) || // Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
		(0xD131 <= code && code <= 0xD14B) || // Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
		(0xD14D <= code && code <= 0xD167) || // Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
		(0xD169 <= code && code <= 0xD183) || // Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
		(0xD185 <= code && code <= 0xD19F) || // Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
		(0xD1A1 <= code && code <= 0xD1BB) || // Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
		(0xD1BD <= code && code <= 0xD1D7) || // Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
		(0xD1D9 <= code && code <= 0xD1F3) || // Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
		(0xD1F5 <= code && code <= 0xD20F) || // Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
		(0xD211 <= code && code <= 0xD22B) || // Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
		(0xD22D <= code && code <= 0xD247) || // Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
		(0xD249 <= code && code <= 0xD263) || // Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
		(0xD265 <= code && code <= 0xD27F) || // Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
		(0xD281 <= code && code <= 0xD29B) || // Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
		(0xD29D <= code && code <= 0xD2B7) || // Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
		(0xD2B9 <= code && code <= 0xD2D3) || // Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
		(0xD2D5 <= code && code <= 0xD2EF) || // Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
		(0xD2F1 <= code && code <= 0xD30B) || // Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
		(0xD30D <= code && code <= 0xD327) || // Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
		(0xD329 <= code && code <= 0xD343) || // Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
		(0xD345 <= code && code <= 0xD35F) || // Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
		(0xD361 <= code && code <= 0xD37B) || // Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
		(0xD37D <= code && code <= 0xD397) || // Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
		(0xD399 <= code && code <= 0xD3B3) || // Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
		(0xD3B5 <= code && code <= 0xD3CF) || // Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
		(0xD3D1 <= code && code <= 0xD3EB) || // Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH
		(0xD3ED <= code && code <= 0xD407) || // Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH
		(0xD409 <= code && code <= 0xD423) || // Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH
		(0xD425 <= code && code <= 0xD43F) || // Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH
		(0xD441 <= code && code <= 0xD45B) || // Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH
		(0xD45D <= code && code <= 0xD477) || // Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH
		(0xD479 <= code && code <= 0xD493) || // Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH
		(0xD495 <= code && code <= 0xD4AF) || // Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH
		(0xD4B1 <= code && code <= 0xD4CB) || // Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH
		(0xD4CD <= code && code <= 0xD4E7) || // Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH
		(0xD4E9 <= code && code <= 0xD503) || // Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH
		(0xD505 <= code && code <= 0xD51F) || // Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH
		(0xD521 <= code && code <= 0xD53B) || // Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH
		(0xD53D <= code && code <= 0xD557) || // Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH
		(0xD559 <= code && code <= 0xD573) || // Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH
		(0xD575 <= code && code <= 0xD58F) || // Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH
		(0xD591 <= code && code <= 0xD5AB) || // Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH
		(0xD5AD <= code && code <= 0xD5C7) || // Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH
		(0xD5C9 <= code && code <= 0xD5E3) || // Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH
		(0xD5E5 <= code && code <= 0xD5FF) || // Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH
		(0xD601 <= code && code <= 0xD61B) || // Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH
		(0xD61D <= code && code <= 0xD637) || // Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH
		(0xD639 <= code && code <= 0xD653) || // Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH
		(0xD655 <= code && code <= 0xD66F) || // Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH
		(0xD671 <= code && code <= 0xD68B) || // Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH
		(0xD68D <= code && code <= 0xD6A7) || // Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH
		(0xD6A9 <= code && code <= 0xD6C3) || // Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH
		(0xD6C5 <= code && code <= 0xD6DF) || // Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH
		(0xD6E1 <= code && code <= 0xD6FB) || // Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH
		(0xD6FD <= code && code <= 0xD717) || // Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH
		(0xD719 <= code && code <= 0xD733) || // Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH
		(0xD735 <= code && code <= 0xD74F) || // Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH
		(0xD751 <= code && code <= 0xD76B) || // Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH
		(0xD76D <= code && code <= 0xD787) || // Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH
		(0xD789 <= code && code <= 0xD7A3) // Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH
		){
			return LVT;
		}
		
		if(
		0x261D == code || // So       WHITE UP POINTING INDEX
		0x26F9 == code || // So       PERSON WITH BALL
		(0x270A <= code && code <= 0x270D) || // So   [4] RAISED FIST..WRITING HAND
		0x1F385 == code || // So       FATHER CHRISTMAS
		(0x1F3C2 <= code && code <= 0x1F3C4) || // So   [3] SNOWBOARDER..SURFER
		0x1F3C7 == code || // So       HORSE RACING
		(0x1F3CA <= code && code <= 0x1F3CC) || // So   [3] SWIMMER..GOLFER
		(0x1F442 <= code && code <= 0x1F443) || // So   [2] EAR..NOSE
		(0x1F446 <= code && code <= 0x1F450) || // So  [11] WHITE UP POINTING BACKHAND INDEX..OPEN HANDS SIGN
		0x1F46E == code || // So       POLICE OFFICER
		(0x1F470 <= code && code <= 0x1F478) || // So   [9] BRIDE WITH VEIL..PRINCESS
		0x1F47C == code || // So       BABY ANGEL
		(0x1F481 <= code && code <= 0x1F483) || // So   [3] INFORMATION DESK PERSON..DANCER
		(0x1F485 <= code && code <= 0x1F487) || // So   [3] NAIL POLISH..HAIRCUT
		0x1F4AA == code || // So       FLEXED BICEPS
		(0x1F574 <= code && code <= 0x1F575) || // So   [2] MAN IN BUSINESS SUIT LEVITATING..SLEUTH OR SPY
		0x1F57A == code || // So       MAN DANCING
		0x1F590 == code || // So       RAISED HAND WITH FINGERS SPLAYED
		(0x1F595 <= code && code <= 0x1F596) || // So   [2] REVERSED HAND WITH MIDDLE FINGER EXTENDED..RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS
		(0x1F645 <= code && code <= 0x1F647) || // So   [3] FACE WITH NO GOOD GESTURE..PERSON BOWING DEEPLY
		(0x1F64B <= code && code <= 0x1F64F) || // So   [5] HAPPY PERSON RAISING ONE HAND..PERSON WITH FOLDED HANDS
		0x1F6A3 == code || // So       ROWBOAT
		(0x1F6B4 <= code && code <= 0x1F6B6) || // So   [3] BICYCLIST..PEDESTRIAN
		0x1F6C0 == code || // So       BATH
		0x1F6CC == code || // So       SLEEPING ACCOMMODATION
		(0x1F918 <= code && code <= 0x1F91C) || // So   [5] SIGN OF THE HORNS..RIGHT-FACING FIST
		(0x1F91E <= code && code <= 0x1F91F) || // So   [2] HAND WITH INDEX AND MIDDLE FINGERS CROSSED..I LOVE YOU HAND SIGN
		0x1F926 == code || // So       FACE PALM
		(0x1F930 <= code && code <= 0x1F939) || // So  [10] PREGNANT WOMAN..JUGGLING
		(0x1F93D <= code && code <= 0x1F93E) || // So   [2] WATER POLO..HANDBALL
		(0x1F9D1 <= code && code <= 0x1F9DD) // So  [13] ADULT..ELF
		){
			return E_Base;
		}

		if(
		(0x1F3FB <= code && code <= 0x1F3FF) // Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6
		){
			return E_Modifier;
		}

		if(
		0x200D == code // Cf       ZERO WIDTH JOINER
		){
			return ZWJ;
		}

		if(
		0x2640 == code || // So       FEMALE SIGN
		0x2642 == code || // So       MALE SIGN
		(0x2695 <= code && code <= 0x2696) || // So   [2] STAFF OF AESCULAPIUS..SCALES
		0x2708 == code || // So       AIRPLANE
		0x2764 == code || // So       HEAVY BLACK HEART
		0x1F308 == code || // So       RAINBOW
		0x1F33E == code || // So       EAR OF RICE
		0x1F373 == code || // So       COOKING
		0x1F393 == code || // So       GRADUATION CAP
		0x1F3A4 == code || // So       MICROPHONE
		0x1F3A8 == code || // So       ARTIST PALETTE
		0x1F3EB == code || // So       SCHOOL
		0x1F3ED == code || // So       FACTORY
		0x1F48B == code || // So       KISS MARK
		(0x1F4BB <= code && code <= 0x1F4BC) || // So   [2] PERSONAL COMPUTER..BRIEFCASE
		0x1F527 == code || // So       WRENCH
		0x1F52C == code || // So       MICROSCOPE
		0x1F5E8 == code || // So       LEFT SPEECH BUBBLE
		0x1F680 == code || // So       ROCKET
		0x1F692 == code // So       FIRE ENGINE
		){
			return Glue_After_Zwj;
		}

		if(
		(0x1F466 <= code && code <= 0x1F469) // So   [4] BOY..WOMAN
		){
			return E_Base_GAZ;
		}
		
		
		//all unlisted characters have a grapheme break property of "Other"
		return Other;
	}
	return this;
}

if (typeof module != 'undefined' && module.exports) {
    module.exports = GraphemeSplitter;
}

},{}],6:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"dup":3}],7:[function(require,module,exports){
'use strict';

module.exports = Pbf;

var ieee754 = require('ieee754');

function Pbf(buf) {
    this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
    this.pos = 0;
    this.type = 0;
    this.length = this.buf.length;
}

Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
    SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

// Threshold chosen based on both benchmarking and knowledge about browser string
// data structures (which currently switch structure types at 12 bytes or more)
var TEXT_DECODER_MIN_LENGTH = 12;
var utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');

Pbf.prototype = {

    destroy: function() {
        this.buf = null;
    },

    // === READING =================================================================

    readFields: function(readField, result, end) {
        end = end || this.length;

        while (this.pos < end) {
            var val = this.readVarint(),
                tag = val >> 3,
                startPos = this.pos;

            this.type = val & 0x7;
            readField(tag, result, this);

            if (this.pos === startPos) this.skip(val);
        }
        return result;
    },

    readMessage: function(readField, result) {
        return this.readFields(readField, result, this.readVarint() + this.pos);
    },

    readFixed32: function() {
        var val = readUInt32(this.buf, this.pos);
        this.pos += 4;
        return val;
    },

    readSFixed32: function() {
        var val = readInt32(this.buf, this.pos);
        this.pos += 4;
        return val;
    },

    // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

    readFixed64: function() {
        var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
        this.pos += 8;
        return val;
    },

    readSFixed64: function() {
        var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
        this.pos += 8;
        return val;
    },

    readFloat: function() {
        var val = ieee754.read(this.buf, this.pos, true, 23, 4);
        this.pos += 4;
        return val;
    },

    readDouble: function() {
        var val = ieee754.read(this.buf, this.pos, true, 52, 8);
        this.pos += 8;
        return val;
    },

    readVarint: function(isSigned) {
        var buf = this.buf,
            val, b;

        b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
        b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
        b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
        b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
        b = buf[this.pos];   val |= (b & 0x0f) << 28;

        return readVarintRemainder(val, isSigned, this);
    },

    readVarint64: function() { // for compatibility with v2.0.1
        return this.readVarint(true);
    },

    readSVarint: function() {
        var num = this.readVarint();
        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
    },

    readBoolean: function() {
        return Boolean(this.readVarint());
    },

    readString: function() {
        var end = this.readVarint() + this.pos;
        var pos = this.pos;
        this.pos = end;

        if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
            // longer strings are fast with the built-in browser TextDecoder API
            return readUtf8TextDecoder(this.buf, pos, end);
        }
        // short strings are fast with our custom implementation
        return readUtf8(this.buf, pos, end);
    },

    readBytes: function() {
        var end = this.readVarint() + this.pos,
            buffer = this.buf.subarray(this.pos, end);
        this.pos = end;
        return buffer;
    },

    // verbose for performance reasons; doesn't affect gzipped size

    readPackedVarint: function(arr, isSigned) {
        if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readVarint(isSigned));
        return arr;
    },
    readPackedSVarint: function(arr) {
        if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readSVarint());
        return arr;
    },
    readPackedBoolean: function(arr) {
        if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readBoolean());
        return arr;
    },
    readPackedFloat: function(arr) {
        if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readFloat());
        return arr;
    },
    readPackedDouble: function(arr) {
        if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readDouble());
        return arr;
    },
    readPackedFixed32: function(arr) {
        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readFixed32());
        return arr;
    },
    readPackedSFixed32: function(arr) {
        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readSFixed32());
        return arr;
    },
    readPackedFixed64: function(arr) {
        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readFixed64());
        return arr;
    },
    readPackedSFixed64: function(arr) {
        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end) arr.push(this.readSFixed64());
        return arr;
    },

    skip: function(val) {
        var type = val & 0x7;
        if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
        else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
        else if (type === Pbf.Fixed32) this.pos += 4;
        else if (type === Pbf.Fixed64) this.pos += 8;
        else throw new Error('Unimplemented type: ' + type);
    },

    // === WRITING =================================================================

    writeTag: function(tag, type) {
        this.writeVarint((tag << 3) | type);
    },

    realloc: function(min) {
        var length = this.length || 16;

        while (length < this.pos + min) length *= 2;

        if (length !== this.length) {
            var buf = new Uint8Array(length);
            buf.set(this.buf);
            this.buf = buf;
            this.length = length;
        }
    },

    finish: function() {
        this.length = this.pos;
        this.pos = 0;
        return this.buf.subarray(0, this.length);
    },

    writeFixed32: function(val) {
        this.realloc(4);
        writeInt32(this.buf, val, this.pos);
        this.pos += 4;
    },

    writeSFixed32: function(val) {
        this.realloc(4);
        writeInt32(this.buf, val, this.pos);
        this.pos += 4;
    },

    writeFixed64: function(val) {
        this.realloc(8);
        writeInt32(this.buf, val & -1, this.pos);
        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
        this.pos += 8;
    },

    writeSFixed64: function(val) {
        this.realloc(8);
        writeInt32(this.buf, val & -1, this.pos);
        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
        this.pos += 8;
    },

    writeVarint: function(val) {
        val = +val || 0;

        if (val > 0xfffffff || val < 0) {
            writeBigVarint(val, this);
            return;
        }

        this.realloc(4);

        this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
        this.buf[this.pos++] =   (val >>> 7) & 0x7f;
    },

    writeSVarint: function(val) {
        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
    },

    writeBoolean: function(val) {
        this.writeVarint(Boolean(val));
    },

    writeString: function(str) {
        str = String(str);
        this.realloc(str.length * 4);

        this.pos++; // reserve 1 byte for short string length

        var startPos = this.pos;
        // write the string directly to the buffer and see how much was written
        this.pos = writeUtf8(this.buf, str, this.pos);
        var len = this.pos - startPos;

        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

        // finally, write the message length in the reserved place and restore the position
        this.pos = startPos - 1;
        this.writeVarint(len);
        this.pos += len;
    },

    writeFloat: function(val) {
        this.realloc(4);
        ieee754.write(this.buf, val, this.pos, true, 23, 4);
        this.pos += 4;
    },

    writeDouble: function(val) {
        this.realloc(8);
        ieee754.write(this.buf, val, this.pos, true, 52, 8);
        this.pos += 8;
    },

    writeBytes: function(buffer) {
        var len = buffer.length;
        this.writeVarint(len);
        this.realloc(len);
        for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
    },

    writeRawMessage: function(fn, obj) {
        this.pos++; // reserve 1 byte for short message length

        // write the message directly to the buffer and see how much was written
        var startPos = this.pos;
        fn(obj, this);
        var len = this.pos - startPos;

        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

        // finally, write the message length in the reserved place and restore the position
        this.pos = startPos - 1;
        this.writeVarint(len);
        this.pos += len;
    },

    writeMessage: function(tag, fn, obj) {
        this.writeTag(tag, Pbf.Bytes);
        this.writeRawMessage(fn, obj);
    },

    writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },
    writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },
    writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },
    writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },
    writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },
    writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },
    writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },
    writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },
    writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },

    writeBytesField: function(tag, buffer) {
        this.writeTag(tag, Pbf.Bytes);
        this.writeBytes(buffer);
    },
    writeFixed32Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed32);
        this.writeFixed32(val);
    },
    writeSFixed32Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed32);
        this.writeSFixed32(val);
    },
    writeFixed64Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed64);
        this.writeFixed64(val);
    },
    writeSFixed64Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed64);
        this.writeSFixed64(val);
    },
    writeVarintField: function(tag, val) {
        this.writeTag(tag, Pbf.Varint);
        this.writeVarint(val);
    },
    writeSVarintField: function(tag, val) {
        this.writeTag(tag, Pbf.Varint);
        this.writeSVarint(val);
    },
    writeStringField: function(tag, str) {
        this.writeTag(tag, Pbf.Bytes);
        this.writeString(str);
    },
    writeFloatField: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed32);
        this.writeFloat(val);
    },
    writeDoubleField: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed64);
        this.writeDouble(val);
    },
    writeBooleanField: function(tag, val) {
        this.writeVarintField(tag, Boolean(val));
    }
};

function readVarintRemainder(l, s, p) {
    var buf = p.buf,
        h, b;

    b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
    b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

    throw new Error('Expected varint not more than 10 bytes');
}

function readPackedEnd(pbf) {
    return pbf.type === Pbf.Bytes ?
        pbf.readVarint() + pbf.pos : pbf.pos + 1;
}

function toNum(low, high, isSigned) {
    if (isSigned) {
        return high * 0x100000000 + (low >>> 0);
    }

    return ((high >>> 0) * 0x100000000) + (low >>> 0);
}

function writeBigVarint(val, pbf) {
    var low, high;

    if (val >= 0) {
        low  = (val % 0x100000000) | 0;
        high = (val / 0x100000000) | 0;
    } else {
        low  = ~(-val % 0x100000000);
        high = ~(-val / 0x100000000);

        if (low ^ 0xffffffff) {
            low = (low + 1) | 0;
        } else {
            low = 0;
            high = (high + 1) | 0;
        }
    }

    if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
        throw new Error('Given varint doesn\'t fit into 10 bytes');
    }

    pbf.realloc(10);

    writeBigVarintLow(low, high, pbf);
    writeBigVarintHigh(high, pbf);
}

function writeBigVarintLow(low, high, pbf) {
    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
    pbf.buf[pbf.pos]   = low & 0x7f;
}

function writeBigVarintHigh(high, pbf) {
    var lsb = (high & 0x07) << 4;

    pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
    pbf.buf[pbf.pos++]  = high & 0x7f;
}

function makeRoomForExtraLength(startPos, len, pbf) {
    var extraLen =
        len <= 0x3fff ? 1 :
        len <= 0x1fffff ? 2 :
        len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));

    // if 1 byte isn't enough for encoding message length, shift the data to the right
    pbf.realloc(extraLen);
    for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
}

function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

// Buffer code below from https://github.com/feross/buffer, MIT-licensed

function readUInt32(buf, pos) {
    return ((buf[pos]) |
        (buf[pos + 1] << 8) |
        (buf[pos + 2] << 16)) +
        (buf[pos + 3] * 0x1000000);
}

function writeInt32(buf, val, pos) {
    buf[pos] = val;
    buf[pos + 1] = (val >>> 8);
    buf[pos + 2] = (val >>> 16);
    buf[pos + 3] = (val >>> 24);
}

function readInt32(buf, pos) {
    return ((buf[pos]) |
        (buf[pos + 1] << 8) |
        (buf[pos + 2] << 16)) +
        (buf[pos + 3] << 24);
}

function readUtf8(buf, pos, end) {
    var str = '';
    var i = pos;

    while (i < end) {
        var b0 = buf[i];
        var c = null; // codepoint
        var bytesPerSequence =
            b0 > 0xEF ? 4 :
            b0 > 0xDF ? 3 :
            b0 > 0xBF ? 2 : 1;

        if (i + bytesPerSequence > end) break;

        var b1, b2, b3;

        if (bytesPerSequence === 1) {
            if (b0 < 0x80) {
                c = b0;
            }
        } else if (bytesPerSequence === 2) {
            b1 = buf[i + 1];
            if ((b1 & 0xC0) === 0x80) {
                c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                if (c <= 0x7F) {
                    c = null;
                }
            }
        } else if (bytesPerSequence === 3) {
            b1 = buf[i + 1];
            b2 = buf[i + 2];
            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                    c = null;
                }
            }
        } else if (bytesPerSequence === 4) {
            b1 = buf[i + 1];
            b2 = buf[i + 2];
            b3 = buf[i + 3];
            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                if (c <= 0xFFFF || c >= 0x110000) {
                    c = null;
                }
            }
        }

        if (c === null) {
            c = 0xFFFD;
            bytesPerSequence = 1;

        } else if (c > 0xFFFF) {
            c -= 0x10000;
            str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
            c = 0xDC00 | c & 0x3FF;
        }

        str += String.fromCharCode(c);
        i += bytesPerSequence;
    }

    return str;
}

function readUtf8TextDecoder(buf, pos, end) {
    return utf8TextDecoder.decode(buf.subarray(pos, end));
}

function writeUtf8(buf, str, pos) {
    for (var i = 0, c, lead; i < str.length; i++) {
        c = str.charCodeAt(i); // code point

        if (c > 0xD7FF && c < 0xE000) {
            if (lead) {
                if (c < 0xDC00) {
                    buf[pos++] = 0xEF;
                    buf[pos++] = 0xBF;
                    buf[pos++] = 0xBD;
                    lead = c;
                    continue;
                } else {
                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                    lead = null;
                }
            } else {
                if (c > 0xDBFF || (i + 1 === str.length)) {
                    buf[pos++] = 0xEF;
                    buf[pos++] = 0xBF;
                    buf[pos++] = 0xBD;
                } else {
                    lead = c;
                }
                continue;
            }
        } else if (lead) {
            buf[pos++] = 0xEF;
            buf[pos++] = 0xBF;
            buf[pos++] = 0xBD;
            lead = null;
        }

        if (c < 0x80) {
            buf[pos++] = c;
        } else {
            if (c < 0x800) {
                buf[pos++] = c >> 0x6 | 0xC0;
            } else {
                if (c < 0x10000) {
                    buf[pos++] = c >> 0xC | 0xE0;
                } else {
                    buf[pos++] = c >> 0x12 | 0xF0;
                    buf[pos++] = c >> 0xC & 0x3F | 0x80;
                }
                buf[pos++] = c >> 0x6 & 0x3F | 0x80;
            }
            buf[pos++] = c & 0x3F | 0x80;
        }
    }
    return pos;
}

},{"ieee754":6}],8:[function(require,module,exports){
const AttributeCompression = Cesium.AttributeCompression;
const BoundingSphere = Cesium.BoundingSphere;
const Cartesian2 = Cesium.Cartesian2;
const Cartesian3 = Cesium.Cartesian3;
const Color = Cesium.Color;
const ComponentDatatype = Cesium.ComponentDatatype;
const defaultValue = Cesium.defaultValue;
const defined = Cesium.defined;
const destroyObject = Cesium.destroyObject;
const DeveloperError = Cesium.DeveloperError;
const EncodedCartesian3 = Cesium.EncodedCartesian3;
const IndexDatatype = Cesium.IndexDatatype;
const CesiumMath = Cesium.Math;
const Matrix4 = Cesium.Matrix4;
const WebGLConstants = Cesium.WebGLConstants;
const Buffer = Cesium.Buffer;
const BufferUsage = Cesium.BufferUsage;
const ContextLimits = Cesium.ContextLimits;
const DrawCommand = Cesium.DrawCommand;
const Pass = Cesium.Pass;
const RenderState = Cesium.RenderState;
const ShaderProgram = Cesium.ShaderProgram;
const ShaderSource = Cesium.ShaderSource;
const VertexArrayFacade = Cesium.VertexArrayFacade;
const BillboardCollectionFS = Cesium._shadersBillboardCollectionFS;
const BillboardCollectionVS = Cesium._shadersBillboardCollectionVS;
const Billboard = Cesium.Billboard;
const BlendingState = Cesium.BlendingState;
const BlendOption = Cesium.BlendOption;
const HeightReference = Cesium.HeightReference;
const HorizontalOrigin = Cesium.HorizontalOrigin;
const SceneMode = Cesium.SceneMode;
const SDFSettings = Cesium.SDFSettings;
const TextureAtlas = Cesium.TextureAtlas;
const VerticalOrigin = Cesium.VerticalOrigin;

const SHOW_INDEX = Billboard.SHOW_INDEX;
const POSITION_INDEX = Billboard.POSITION_INDEX;
const PIXEL_OFFSET_INDEX = Billboard.PIXEL_OFFSET_INDEX;
const EYE_OFFSET_INDEX = Billboard.EYE_OFFSET_INDEX;
const HORIZONTAL_ORIGIN_INDEX = Billboard.HORIZONTAL_ORIGIN_INDEX;
const VERTICAL_ORIGIN_INDEX = Billboard.VERTICAL_ORIGIN_INDEX;
const SCALE_INDEX = Billboard.SCALE_INDEX;
const IMAGE_INDEX_INDEX = Billboard.IMAGE_INDEX_INDEX;
const COLOR_INDEX = Billboard.COLOR_INDEX;
const ROTATION_INDEX = Billboard.ROTATION_INDEX;
const ALIGNED_AXIS_INDEX = Billboard.ALIGNED_AXIS_INDEX;
const SCALE_BY_DISTANCE_INDEX = Billboard.SCALE_BY_DISTANCE_INDEX;
const TRANSLUCENCY_BY_DISTANCE_INDEX = Billboard.TRANSLUCENCY_BY_DISTANCE_INDEX;
const PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX =
    Billboard.PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX;
const DISTANCE_DISPLAY_CONDITION_INDEX = Billboard.DISTANCE_DISPLAY_CONDITION;
const DISABLE_DEPTH_DISTANCE = Billboard.DISABLE_DEPTH_DISTANCE;
const TEXTURE_COORDINATE_BOUNDS = Billboard.TEXTURE_COORDINATE_BOUNDS;
const SDF_INDEX = Billboard.SDF_INDEX;
const NUMBER_OF_PROPERTIES = Billboard.NUMBER_OF_PROPERTIES;

let attributeLocations;

const attributeLocationsBatched = {
    positionHighAndScale: 0,
    positionLowAndRotation: 1,
    compressedAttribute0: 2, // pixel offset, translate, horizontal origin, vertical origin, show, direction, texture coordinates
    compressedAttribute1: 3, // aligned axis, translucency by distance, image width
    compressedAttribute2: 4, // image height, color, pick color, size in meters, valid aligned axis, 13 bits free
    eyeOffset: 5, // 4 bytes free
    scaleByDistance: 6,
    pixelOffsetScaleByDistance: 7,
    compressedAttribute3: 8,
    textureCoordinateBoundsOrLabelTranslate: 9,
    a_batchId: 10,
    sdf: 11,
};

const attributeLocationsInstanced = {
    direction: 0,
    positionHighAndScale: 1,
    positionLowAndRotation: 2, // texture offset in w
    compressedAttribute0: 3,
    compressedAttribute1: 4,
    compressedAttribute2: 5,
    eyeOffset: 6, // texture range in w
    scaleByDistance: 7,
    pixelOffsetScaleByDistance: 8,
    compressedAttribute3: 9,
    textureCoordinateBoundsOrLabelTranslate: 10,
    a_batchId: 11,
    sdf: 12,
};

/**
 * A renderable collection of billboards.  Billboards are viewport-aligned
 * images positioned in the 3D scene.
 * <br /><br />
 * <div align='center'>
 * <img src='Images/Billboard.png' width='400' height='300' /><br />
 * Example billboards
 * </div>
 * <br /><br />
 * Billboards are added and removed from the collection using {@link BillboardCollection#add}
 * and {@link BillboardCollection#remove}.  Billboards in a collection automatically share textures
 * for images with the same identifier.
 *
 * @alias BillboardCollection
 * @constructor
 *
 * @param {Object} [options] Object with the following properties:
 * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms each billboard from model to world coordinates.
 * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive's commands' bounding spheres are shown.
 * @param {Scene} [options.scene] Must be passed in for billboards that use the height reference property or will be depth tested against the globe.
 * @param {BlendOption} [options.blendOption=BlendOption.OPAQUE_AND_TRANSLUCENT] The billboard blending option. The default
 * is used for rendering both opaque and translucent billboards. However, if either all of the billboards are completely opaque or all are completely translucent,
 * setting the technique to BlendOption.OPAQUE or BlendOption.TRANSLUCENT can improve performance by up to 2x.
 * @param {Boolean} [options.show=true] Determines if the billboards in the collection will be shown.
 *
 * @performance For best performance, prefer a few collections, each with many billboards, to
 * many collections with only a few billboards each.  Organize collections so that billboards
 * with the same update frequency are in the same collection, i.e., billboards that do not
 * change should be in one collection; billboards that change every frame should be in another
 * collection; and so on.
 *
 * @see BillboardCollection#add
 * @see BillboardCollection#remove
 * @see Billboard
 * @see LabelCollection
 *
 * @demo {@link https://sandcastle.cesium.com/index.html?src=Billboards.html|Cesium Sandcastle Billboard Demo}
 *
 * @example
 * // Create a billboard collection with two billboards
 * const billboards = scene.primitives.add(new Cesium.BillboardCollection());
 * billboards.add({
 *   position : new Cesium.Cartesian3(1.0, 2.0, 3.0),
 *   image : 'url/to/image'
 * });
 * billboards.add({
 *   position : new Cesium.Cartesian3(4.0, 5.0, 6.0),
 *   image : 'url/to/another/image'
 * });
 */
function BillboardCollection(options) {
    options = defaultValue(options, defaultValue.EMPTY_OBJECT);

    this._scene = options.scene;
    this._batchTable = options.batchTable;

    this._textureAtlas = undefined;
    this._textureAtlasGUID = undefined;
    this._destroyTextureAtlas = true;
    this._sp = undefined;
    this._spTranslucent = undefined;
    this._rsOpaque = undefined;
    this._rsTranslucent = undefined;
    this._vaf = undefined;

    this._billboards = [];
    this._billboardsToUpdate = [];
    this._billboardsToUpdateIndex = 0;
    this._billboardsRemoved = false;
    this._createVertexArray = false;

    this._shaderRotation = false;
    this._compiledShaderRotation = false;

    this._shaderAlignedAxis = false;
    this._compiledShaderAlignedAxis = false;

    this._shaderScaleByDistance = false;
    this._compiledShaderScaleByDistance = false;

    this._shaderTranslucencyByDistance = false;
    this._compiledShaderTranslucencyByDistance = false;

    this._shaderPixelOffsetScaleByDistance = false;
    this._compiledShaderPixelOffsetScaleByDistance = false;

    this._shaderDistanceDisplayCondition = false;
    this._compiledShaderDistanceDisplayCondition = false;

    this._shaderDisableDepthDistance = false;
    this._compiledShaderDisableDepthDistance = false;

    this._shaderClampToGround = false;
    this._compiledShaderClampToGround = false;

    this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);

    this._maxSize = 0.0;
    this._maxEyeOffset = 0.0;
    this._maxScale = 1.0;
    this._maxPixelOffset = 0.0;
    this._allHorizontalCenter = true;
    this._allVerticalCenter = true;
    this._allSizedInMeters = true;

    this._baseVolume = new BoundingSphere();
    this._baseVolumeWC = new BoundingSphere();
    this._baseVolume2D = new BoundingSphere();
    this._boundingVolume = new BoundingSphere();
    this._boundingVolumeDirty = false;

    this._colorCommands = [];

    this._ENUENABLED = defaultValue(options.enuEnabled,false);

    /**
     * Determines if billboards in this collection will be shown.
     *
     * @type {Boolean}
     * @default true
     */
    this.show = defaultValue(options.show, true);

    /**
     * The 4x4 transformation matrix that transforms each billboard in this collection from model to world coordinates.
     * When this is the identity matrix, the billboards are drawn in world coordinates, i.e., Earth's WGS84 coordinates.
     * Local reference frames can be used by providing a different transformation matrix, like that returned
     * by {@link Transforms.eastNorthUpToFixedFrame}.
     *
     * @type {Matrix4}
     * @default {@link Matrix4.IDENTITY}
     *
     *
     * @example
     * const center = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);
     * billboards.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(center);
     * billboards.add({
     *   image : 'url/to/image',
     *   position : new Cesium.Cartesian3(0.0, 0.0, 0.0) // center
     * });
     * billboards.add({
     *   image : 'url/to/image',
     *   position : new Cesium.Cartesian3(1000000.0, 0.0, 0.0) // east
     * });
     * billboards.add({
     *   image : 'url/to/image',
     *   position : new Cesium.Cartesian3(0.0, 1000000.0, 0.0) // north
     * });
     * billboards.add({
     *   image : 'url/to/image',
     *   position : new Cesium.Cartesian3(0.0, 0.0, 1000000.0) // up
     * });
     *
     * @see Transforms.eastNorthUpToFixedFrame
     */
    this.modelMatrix = Matrix4.clone(
        defaultValue(options.modelMatrix, Matrix4.IDENTITY)
    );
    this._modelMatrix = Matrix4.clone(Matrix4.IDENTITY);

    /**
     * This property is for debugging only; it is not for production use nor is it optimized.
     * <p>
     * Draws the bounding sphere for each draw command in the primitive.
     * </p>
     *
     * @type {Boolean}
     *
     * @default false
     */
    this.debugShowBoundingVolume = defaultValue(
        options.debugShowBoundingVolume,
        false
    );

    /**
     * This property is for debugging only; it is not for production use nor is it optimized.
     * <p>
     * Draws the texture atlas for this BillboardCollection as a fullscreen quad.
     * </p>
     *
     * @type {Boolean}
     *
     * @default false
     */
    this.debugShowTextureAtlas = defaultValue(
        options.debugShowTextureAtlas,
        false
    );

    /**
     * The billboard blending option. The default is used for rendering both opaque and translucent billboards.
     * However, if either all of the billboards are completely opaque or all are completely translucent,
     * setting the technique to BlendOption.OPAQUE or BlendOption.TRANSLUCENT can improve
     * performance by up to 2x.
     * @type {BlendOption}
     * @default BlendOption.OPAQUE_AND_TRANSLUCENT
     */
    this.blendOption = defaultValue(
        options.blendOption,
        BlendOption.OPAQUE_AND_TRANSLUCENT
    );
    this._blendOption = undefined;

    this._mode = SceneMode.SCENE3D;

    // The buffer usage for each attribute is determined based on the usage of the attribute over time.
    this._buffersUsage = [
        BufferUsage.STATIC_DRAW, // SHOW_INDEX
        BufferUsage.STATIC_DRAW, // POSITION_INDEX
        BufferUsage.STATIC_DRAW, // PIXEL_OFFSET_INDEX
        BufferUsage.STATIC_DRAW, // EYE_OFFSET_INDEX
        BufferUsage.STATIC_DRAW, // HORIZONTAL_ORIGIN_INDEX
        BufferUsage.STATIC_DRAW, // VERTICAL_ORIGIN_INDEX
        BufferUsage.STATIC_DRAW, // SCALE_INDEX
        BufferUsage.STATIC_DRAW, // IMAGE_INDEX_INDEX
        BufferUsage.STATIC_DRAW, // COLOR_INDEX
        BufferUsage.STATIC_DRAW, // ROTATION_INDEX
        BufferUsage.STATIC_DRAW, // ALIGNED_AXIS_INDEX
        BufferUsage.STATIC_DRAW, // SCALE_BY_DISTANCE_INDEX
        BufferUsage.STATIC_DRAW, // TRANSLUCENCY_BY_DISTANCE_INDEX
        BufferUsage.STATIC_DRAW, // PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX
        BufferUsage.STATIC_DRAW, // DISTANCE_DISPLAY_CONDITION_INDEX
        BufferUsage.STATIC_DRAW, // TEXTURE_COORDINATE_BOUNDS
    ];

    this._highlightColor = Color.clone(Color.WHITE); // Only used by Vector3DTilePoints

    const that = this;
    this._uniforms = {
        u_atlas: function () {
            return that._textureAtlas.texture;
        },
        u_highlightColor: function () {
            return that._highlightColor;
        },
    };

    const scene = this._scene;
    if (defined(scene) && defined(scene.terrainProviderChanged)) {
        this._removeCallbackFunc = scene.terrainProviderChanged.addEventListener(
            function () {
                const billboards = this._billboards;
                const length = billboards.length;
                for (let i = 0; i < length; ++i) {
                    if (defined(billboards[i])) {
                        billboards[i]._updateClamping();
                    }
                }
            },
            this
        );
    }
}

Object.defineProperties(BillboardCollection.prototype, {
    /**
     * Returns the number of billboards in this collection.  This is commonly used with
     * {@link BillboardCollection#get} to iterate over all the billboards
     * in the collection.
     * @memberof BillboardCollection.prototype
     * @type {Number}
     */
    length: {
        get: function () {
            removeBillboards(this);
            return this._billboards.length;
        },
    },

    /**
     * Gets or sets the textureAtlas.
     * @memberof BillboardCollection.prototype
     * @type {TextureAtlas}
     * @private
     */
    textureAtlas: {
        get: function () {
            return this._textureAtlas;
        },
        set: function (value) {
            if (this._textureAtlas !== value) {
                this._textureAtlas =
                    this._destroyTextureAtlas &&
                    this._textureAtlas &&
                    this._textureAtlas.destroy();
                this._textureAtlas = value;
                this._createVertexArray = true; // New per-billboard texture coordinates
            }
        },
    },

    /**
     * Gets or sets a value which determines if the texture atlas is
     * destroyed when the collection is destroyed.
     *
     * If the texture atlas is used by more than one collection, set this to <code>false</code>,
     * and explicitly destroy the atlas to avoid attempting to destroy it multiple times.
     *
     * @memberof BillboardCollection.prototype
     * @type {Boolean}
     * @private
     *
     * @example
     * // Set destroyTextureAtlas
     * // Destroy a billboard collection but not its texture atlas.
     *
     * const atlas = new TextureAtlas({
     *   scene : scene,
     *   images : images
     * });
     * billboards.textureAtlas = atlas;
     * billboards.destroyTextureAtlas = false;
     * billboards = billboards.destroy();
     * console.log(atlas.isDestroyed()); // False
     */
    destroyTextureAtlas: {
        get: function () {
            return this._destroyTextureAtlas;
        },
        set: function (value) {
            this._destroyTextureAtlas = value;
        },
    },
});

function destroyBillboards(billboards) {
    const length = billboards.length;
    for (let i = 0; i < length; ++i) {
        if (billboards[i]) {
            billboards[i]._destroy();
        }
    }
}

/**
 * Creates and adds a billboard with the specified initial properties to the collection.
 * The added billboard is returned so it can be modified or removed from the collection later.
 *
 * @param {Object}[options] A template describing the billboard's properties as shown in Example 1.
 * @returns {Billboard} The billboard that was added to the collection.
 *
 * @performance Calling <code>add</code> is expected constant time.  However, the collection's vertex buffer
 * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For
 * best performance, add as many billboards as possible before calling <code>update</code>.
 *
 * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.
 *
 *
 * @example
 * // Example 1:  Add a billboard, specifying all the default values.
 * const b = billboards.add({
 *   show : true,
 *   position : Cesium.Cartesian3.ZERO,
 *   pixelOffset : Cesium.Cartesian2.ZERO,
 *   eyeOffset : Cesium.Cartesian3.ZERO,
 *   heightReference : Cesium.HeightReference.NONE,
 *   horizontalOrigin : Cesium.HorizontalOrigin.CENTER,
 *   verticalOrigin : Cesium.VerticalOrigin.CENTER,
 *   scale : 1.0,
 *   image : 'url/to/image',
 *   imageSubRegion : undefined,
 *   color : Cesium.Color.WHITE,
 *   id : undefined,
 *   rotation : 0.0,
 *   alignedAxis : Cesium.Cartesian3.ZERO,
 *   width : undefined,
 *   height : undefined,
 *   scaleByDistance : undefined,
 *   translucencyByDistance : undefined,
 *   pixelOffsetScaleByDistance : undefined,
 *   sizeInMeters : false,
 *   distanceDisplayCondition : undefined
 * });
 *
 * @example
 * // Example 2:  Specify only the billboard's cartographic position.
 * const b = billboards.add({
 *   position : Cesium.Cartesian3.fromDegrees(longitude, latitude, height)
 * });
 *
 * @see BillboardCollection#remove
 * @see BillboardCollection#removeAll
 */
BillboardCollection.prototype.add = function (options) {
    const billboard = new Billboard(options, this);
    billboard._index = this._billboards.length;

    this._billboards.push(billboard);
    this._createVertexArray = true;

    return billboard;
};

/**
 * Removes a billboard from the collection.
 *
 * @param {Billboard} billboard The billboard to remove.
 * @returns {Boolean} <code>true</code> if the billboard was removed; <code>false</code> if the billboard was not found in the collection.
 *
 * @performance Calling <code>remove</code> is expected constant time.  However, the collection's vertex buffer
 * is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.  For
 * best performance, remove as many billboards as possible before calling <code>update</code>.
 * If you intend to temporarily hide a billboard, it is usually more efficient to call
 * {@link Billboard#show} instead of removing and re-adding the billboard.
 *
 * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.
 *
 *
 * @example
 * const b = billboards.add(...);
 * billboards.remove(b);  // Returns true
 *
 * @see BillboardCollection#add
 * @see BillboardCollection#removeAll
 * @see Billboard#show
 */
BillboardCollection.prototype.remove = function (billboard) {
    if (this.contains(billboard)) {
        this._billboards[billboard._index] = undefined; // Removed later
        this._billboardsRemoved = true;
        this._createVertexArray = true;
        billboard._destroy();
        return true;
    }

    return false;
};

/**
 * Removes all billboards from the collection.
 *
 * @performance <code>O(n)</code>.  It is more efficient to remove all the billboards
 * from a collection and then add new ones than to create a new collection entirely.
 *
 * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.
 *
 *
 * @example
 * billboards.add(...);
 * billboards.add(...);
 * billboards.removeAll();
 *
 * @see BillboardCollection#add
 * @see BillboardCollection#remove
 */
BillboardCollection.prototype.removeAll = function () {
    destroyBillboards(this._billboards);
    this._billboards = [];
    this._billboardsToUpdate = [];
    this._billboardsToUpdateIndex = 0;
    this._billboardsRemoved = false;

    this._createVertexArray = true;
};

function removeBillboards(billboardCollection) {
    if (billboardCollection._billboardsRemoved) {
        billboardCollection._billboardsRemoved = false;

        const newBillboards = [];
        const billboards = billboardCollection._billboards;
        const length = billboards.length;
        for (let i = 0, j = 0; i < length; ++i) {
            const billboard = billboards[i];
            if (defined(billboard)) {
                billboard._index = j++;
                newBillboards.push(billboard);
            }
        }

        billboardCollection._billboards = newBillboards;
    }
}

BillboardCollection.prototype._updateBillboard = function (
    billboard,
    propertyChanged
) {
    if (!billboard._dirty) {
        this._billboardsToUpdate[this._billboardsToUpdateIndex++] = billboard;
    }

    ++this._propertiesChanged[propertyChanged];
};

/**
 * Check whether this collection contains a given billboard.
 *
 * @param {Billboard} [billboard] The billboard to check for.
 * @returns {Boolean} true if this collection contains the billboard, false otherwise.
 *
 * @see BillboardCollection#get
 */
BillboardCollection.prototype.contains = function (billboard) {
    return defined(billboard) && billboard._billboardCollection === this;
};

/**
 * Returns the billboard in the collection at the specified index.  Indices are zero-based
 * and increase as billboards are added.  Removing a billboard shifts all billboards after
 * it to the left, changing their indices.  This function is commonly used with
 * {@link BillboardCollection#length} to iterate over all the billboards
 * in the collection.
 *
 * @param {Number} index The zero-based index of the billboard.
 * @returns {Billboard} The billboard at the specified index.
 *
 * @performance Expected constant time.  If billboards were removed from the collection and
 * {@link BillboardCollection#update} was not called, an implicit <code>O(n)</code>
 * operation is performed.
 *
 * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.
 *
 *
 * @example
 * // Toggle the show property of every billboard in the collection
 * const len = billboards.length;
 * for (let i = 0; i < len; ++i) {
 *   const b = billboards.get(i);
 *   b.show = !b.show;
 * }
 *
 * @see BillboardCollection#length
 */
BillboardCollection.prototype.get = function (index) {
    //>>includeStart('debug', pragmas.debug);
    Check.typeOf.number("index", index);
    //>>includeEnd('debug');

    removeBillboards(this);
    return this._billboards[index];
};

let getIndexBuffer;

function getIndexBufferBatched(context) {
    const sixteenK = 16 * 1024;

    let indexBuffer = context.cache.billboardCollection_indexBufferBatched;
    if (defined(indexBuffer)) {
        return indexBuffer;
    }

    // Subtract 6 because the last index is reserverd for primitive restart.
    // https://www.khronos.org/registry/webgl/specs/latest/2.0/#5.18
    const length = sixteenK * 6 - 6;
    const indices = new Uint16Array(length);
    for (let i = 0, j = 0; i < length; i += 6, j += 4) {
        indices[i] = j;
        indices[i + 1] = j + 1;
        indices[i + 2] = j + 2;

        indices[i + 3] = j + 0;
        indices[i + 4] = j + 2;
        indices[i + 5] = j + 3;
    }

    // PERFORMANCE_IDEA:  Should we reference count billboard collections, and eventually delete this?
    // Is this too much memory to allocate up front?  Should we dynamically grow it?
    indexBuffer = Buffer.createIndexBuffer({
        context: context,
        typedArray: indices,
        usage: BufferUsage.STATIC_DRAW,
        indexDatatype: IndexDatatype.UNSIGNED_SHORT,
    });
    indexBuffer.vertexArrayDestroyable = false;
    context.cache.billboardCollection_indexBufferBatched = indexBuffer;
    return indexBuffer;
}

function getIndexBufferInstanced(context) {
    let indexBuffer = context.cache.billboardCollection_indexBufferInstanced;
    if (defined(indexBuffer)) {
        return indexBuffer;
    }

    indexBuffer = Buffer.createIndexBuffer({
        context: context,
        typedArray: new Uint16Array([0, 1, 2, 0, 2, 3]),
        usage: BufferUsage.STATIC_DRAW,
        indexDatatype: IndexDatatype.UNSIGNED_SHORT,
    });

    indexBuffer.vertexArrayDestroyable = false;
    context.cache.billboardCollection_indexBufferInstanced = indexBuffer;
    return indexBuffer;
}

function getVertexBufferInstanced(context) {
    let vertexBuffer = context.cache.billboardCollection_vertexBufferInstanced;
    if (defined(vertexBuffer)) {
        return vertexBuffer;
    }

    vertexBuffer = Buffer.createVertexBuffer({
        context: context,
        typedArray: new Float32Array([0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]),
        usage: BufferUsage.STATIC_DRAW,
    });

    vertexBuffer.vertexArrayDestroyable = false;
    context.cache.billboardCollection_vertexBufferInstanced = vertexBuffer;
    return vertexBuffer;
}

BillboardCollection.prototype.computeNewBuffersUsage = function () {
    const buffersUsage = this._buffersUsage;
    let usageChanged = false;

    const properties = this._propertiesChanged;
    for (let k = 0; k < NUMBER_OF_PROPERTIES; ++k) {
        const newUsage =
            properties[k] === 0 ? BufferUsage.STATIC_DRAW : BufferUsage.STREAM_DRAW;
        usageChanged = usageChanged || buffersUsage[k] !== newUsage;
        buffersUsage[k] = newUsage;
    }

    return usageChanged;
};

function createVAF(
    context,
    numberOfBillboards,
    buffersUsage,
    instanced,
    batchTable,
    sdf
) {
    const attributes = [
        {
            index: attributeLocations.positionHighAndScale,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[POSITION_INDEX],
        },
        {
            index: attributeLocations.positionLowAndRotation,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[POSITION_INDEX],
        },
        {
            index: attributeLocations.compressedAttribute0,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[PIXEL_OFFSET_INDEX],
        },
        {
            index: attributeLocations.compressedAttribute1,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[TRANSLUCENCY_BY_DISTANCE_INDEX],
        },
        {
            index: attributeLocations.compressedAttribute2,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[COLOR_INDEX],
        },
        {
            index: attributeLocations.eyeOffset,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[EYE_OFFSET_INDEX],
        },
        {
            index: attributeLocations.scaleByDistance,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[SCALE_BY_DISTANCE_INDEX],
        },
        {
            index: attributeLocations.pixelOffsetScaleByDistance,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX],
        },
        {
            index: attributeLocations.compressedAttribute3,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[DISTANCE_DISPLAY_CONDITION_INDEX],
        },
        {
            index: attributeLocations.textureCoordinateBoundsOrLabelTranslate,
            componentsPerAttribute: 4,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[TEXTURE_COORDINATE_BOUNDS],
        },
    ];

    // Instancing requires one non-instanced attribute.
    if (instanced) {
        attributes.push({
            index: attributeLocations.direction,
            componentsPerAttribute: 2,
            componentDatatype: ComponentDatatype.FLOAT,
            vertexBuffer: getVertexBufferInstanced(context),
        });
    }

    if (defined(batchTable)) {
        attributes.push({
            index: attributeLocations.a_batchId,
            componentsPerAttribute: 1,
            componentDatatype: ComponentDatatype.FLOAT,
            bufferUsage: BufferUsage.STATIC_DRAW,
        });
    }

    if (sdf) {
        attributes.push({
            index: attributeLocations.sdf,
            componentsPerAttribute: 2,
            componentDatatype: ComponentDatatype.FLOAT,
            usage: buffersUsage[SDF_INDEX],
        });
    }

    // When instancing is enabled, only one vertex is needed for each billboard.
    const sizeInVertices = instanced
        ? numberOfBillboards
        : 4 * numberOfBillboards;
    return new VertexArrayFacade(context, attributes, sizeInVertices, instanced);
}

///////////////////////////////////////////////////////////////////////////

// Four vertices per billboard.  Each has the same position, etc., but a different screen-space direction vector.

// PERFORMANCE_IDEA:  Save memory if a property is the same for all billboards, use a latched attribute state,
// instead of storing it in a vertex buffer.

const writePositionScratch = new EncodedCartesian3();

function writePositionScaleAndRotation(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    let i;
    const positionHighWriter =
        vafWriters[attributeLocations.positionHighAndScale];
    const positionLowWriter =
        vafWriters[attributeLocations.positionLowAndRotation];
    const position = billboard._getActualPosition();

    if (billboardCollection._mode === SceneMode.SCENE3D) {
        BoundingSphere.expand(
            billboardCollection._baseVolume,
            position,
            billboardCollection._baseVolume
        );
        billboardCollection._boundingVolumeDirty = true;
    }

    EncodedCartesian3.fromCartesian(position, writePositionScratch);
    const scale = billboard.scale;
    const rotation = billboard.rotation;

    if (rotation !== 0.0) {
        billboardCollection._shaderRotation = true;
    }

    billboardCollection._maxScale = Math.max(
        billboardCollection._maxScale,
        scale
    );

    const high = writePositionScratch.high;
    const low = writePositionScratch.low;

    if (billboardCollection._instanced) {
        i = billboard._index;
        positionHighWriter(i, high.x, high.y, high.z, scale);
        positionLowWriter(i, low.x, low.y, low.z, rotation);
    } else {
        i = billboard._index * 4;
        positionHighWriter(i + 0, high.x, high.y, high.z, scale);
        positionHighWriter(i + 1, high.x, high.y, high.z, scale);
        positionHighWriter(i + 2, high.x, high.y, high.z, scale);
        positionHighWriter(i + 3, high.x, high.y, high.z, scale);

        positionLowWriter(i + 0, low.x, low.y, low.z, rotation);
        positionLowWriter(i + 1, low.x, low.y, low.z, rotation);
        positionLowWriter(i + 2, low.x, low.y, low.z, rotation);
        positionLowWriter(i + 3, low.x, low.y, low.z, rotation);
    }
}

const scratchCartesian2 = new Cartesian2();

const UPPER_BOUND = 32768.0; // 2^15

const LEFT_SHIFT16 = 65536.0; // 2^16
const LEFT_SHIFT12 = 4096.0; // 2^12
const LEFT_SHIFT8 = 256.0; // 2^8
const LEFT_SHIFT7 = 128.0;
const LEFT_SHIFT5 = 32.0;
const LEFT_SHIFT3 = 8.0;
const LEFT_SHIFT2 = 4.0;

const RIGHT_SHIFT8 = 1.0 / 256.0;

const LOWER_LEFT = 0.0;
const LOWER_RIGHT = 2.0;
const UPPER_RIGHT = 3.0;
const UPPER_LEFT = 1.0;

function writeCompressedAttrib0(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    let i;
    const writer = vafWriters[attributeLocations.compressedAttribute0];
    const pixelOffset = billboard.pixelOffset;
    const pixelOffsetX = pixelOffset.x;
    const pixelOffsetY = pixelOffset.y;

    const translate = billboard._translate;
    const translateX = translate.x;
    const translateY = translate.y;

    billboardCollection._maxPixelOffset = Math.max(
        billboardCollection._maxPixelOffset,
        Math.abs(pixelOffsetX + translateX),
        Math.abs(-pixelOffsetY + translateY)
    );

    const horizontalOrigin = billboard.horizontalOrigin;
    let verticalOrigin = billboard._verticalOrigin;
    let show = billboard.show && billboard.clusterShow;

    // If the color alpha is zero, do not show this billboard.  This lets us avoid providing
    // color during the pick pass and also eliminates a discard in the fragment shader.
    if (billboard.color.alpha === 0.0) {
        show = false;
    }

    // Raw billboards don't distinguish between BASELINE and BOTTOM, only LabelCollection does that.
    if (verticalOrigin === VerticalOrigin.BASELINE) {
        verticalOrigin = VerticalOrigin.BOTTOM;
    }

    billboardCollection._allHorizontalCenter =
        billboardCollection._allHorizontalCenter &&
        horizontalOrigin === HorizontalOrigin.CENTER;
    billboardCollection._allVerticalCenter =
        billboardCollection._allVerticalCenter &&
        verticalOrigin === VerticalOrigin.CENTER;

    let bottomLeftX = 0;
    let bottomLeftY = 0;
    let width = 0;
    let height = 0;
    const index = billboard._imageIndex;
    if (index !== -1) {
        const imageRectangle = textureAtlasCoordinates[index];

        //>>includeStart('debug', pragmas.debug);
        if (!defined(imageRectangle)) {
            throw new DeveloperError(`Invalid billboard image index: ${index}`);
        }
        //>>includeEnd('debug');

        bottomLeftX = imageRectangle.x;
        bottomLeftY = imageRectangle.y;
        width = imageRectangle.width;
        height = imageRectangle.height;
    }
    const topRightX = bottomLeftX + width;
    const topRightY = bottomLeftY + height;

    let compressed0 =
        Math.floor(
            CesiumMath.clamp(pixelOffsetX, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND
        ) * LEFT_SHIFT7;
    compressed0 += (horizontalOrigin + 1.0) * LEFT_SHIFT5;
    compressed0 += (verticalOrigin + 1.0) * LEFT_SHIFT3;
    compressed0 += (show ? 1.0 : 0.0) * LEFT_SHIFT2;

    let compressed1 =
        Math.floor(
            CesiumMath.clamp(pixelOffsetY, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND
        ) * LEFT_SHIFT8;
    let compressed2 =
        Math.floor(
            CesiumMath.clamp(translateX, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND
        ) * LEFT_SHIFT8;

    const tempTanslateY =
        (CesiumMath.clamp(translateY, -UPPER_BOUND, UPPER_BOUND) + UPPER_BOUND) *
        RIGHT_SHIFT8;
    const upperTranslateY = Math.floor(tempTanslateY);
    const lowerTranslateY = Math.floor(
        (tempTanslateY - upperTranslateY) * LEFT_SHIFT8
    );

    compressed1 += upperTranslateY;
    compressed2 += lowerTranslateY;

    scratchCartesian2.x = bottomLeftX;
    scratchCartesian2.y = bottomLeftY;
    const compressedTexCoordsLL = AttributeCompression.compressTextureCoordinates(
        scratchCartesian2
    );
    scratchCartesian2.x = topRightX;
    const compressedTexCoordsLR = AttributeCompression.compressTextureCoordinates(
        scratchCartesian2
    );
    scratchCartesian2.y = topRightY;
    const compressedTexCoordsUR = AttributeCompression.compressTextureCoordinates(
        scratchCartesian2
    );
    scratchCartesian2.x = bottomLeftX;
    const compressedTexCoordsUL = AttributeCompression.compressTextureCoordinates(
        scratchCartesian2
    );

    if (billboardCollection._instanced) {
        i = billboard._index;
        writer(i, compressed0, compressed1, compressed2, compressedTexCoordsLL);
    } else {
        i = billboard._index * 4;
        writer(
            i + 0,
            compressed0 + LOWER_LEFT,
            compressed1,
            compressed2,
            compressedTexCoordsLL
        );
        writer(
            i + 1,
            compressed0 + LOWER_RIGHT,
            compressed1,
            compressed2,
            compressedTexCoordsLR
        );
        writer(
            i + 2,
            compressed0 + UPPER_RIGHT,
            compressed1,
            compressed2,
            compressedTexCoordsUR
        );
        writer(
            i + 3,
            compressed0 + UPPER_LEFT,
            compressed1,
            compressed2,
            compressedTexCoordsUL
        );
    }
}

function writeCompressedAttrib1(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    let i;
    const writer = vafWriters[attributeLocations.compressedAttribute1];
    const alignedAxis = billboard.alignedAxis;
    if (!Cartesian3.equals(alignedAxis, Cartesian3.ZERO)) {
        billboardCollection._shaderAlignedAxis = true;
    }

    let near = 0.0;
    let nearValue = 1.0;
    let far = 1.0;
    let farValue = 1.0;

    const translucency = billboard.translucencyByDistance;
    if (defined(translucency)) {
        near = translucency.near;
        nearValue = translucency.nearValue;
        far = translucency.far;
        farValue = translucency.farValue;

        if (nearValue !== 1.0 || farValue !== 1.0) {
            // translucency by distance calculation in shader need not be enabled
            // until a billboard with near and far !== 1.0 is found
            billboardCollection._shaderTranslucencyByDistance = true;
        }
    }

    let width = 0;
    const index = billboard._imageIndex;
    if (index !== -1) {
        const imageRectangle = textureAtlasCoordinates[index];

        //>>includeStart('debug', pragmas.debug);
        if (!defined(imageRectangle)) {
            throw new DeveloperError(`Invalid billboard image index: ${index}`);
        }
        //>>includeEnd('debug');

        width = imageRectangle.width;
    }

    const textureWidth = billboardCollection._textureAtlas.texture.width;
    const imageWidth = Math.round(
        defaultValue(billboard.width, textureWidth * width)
    );
    billboardCollection._maxSize = Math.max(
        billboardCollection._maxSize,
        imageWidth
    );

    let compressed0 = CesiumMath.clamp(imageWidth, 0.0, LEFT_SHIFT16);
    let compressed1 = 0.0;

    if (
        Math.abs(Cartesian3.magnitudeSquared(alignedAxis) - 1.0) <
        CesiumMath.EPSILON6
    ) {
        compressed1 = AttributeCompression.octEncodeFloat(alignedAxis);
    }

    nearValue = CesiumMath.clamp(nearValue, 0.0, 1.0);
    nearValue = nearValue === 1.0 ? 255.0 : (nearValue * 255.0) | 0;
    compressed0 = compressed0 * LEFT_SHIFT8 + nearValue;

    farValue = CesiumMath.clamp(farValue, 0.0, 1.0);
    farValue = farValue === 1.0 ? 255.0 : (farValue * 255.0) | 0;
    compressed1 = compressed1 * LEFT_SHIFT8 + farValue;

    if (billboardCollection._instanced) {
        i = billboard._index;
        writer(i, compressed0, compressed1, near, far);
    } else {
        i = billboard._index * 4;
        writer(i + 0, compressed0, compressed1, near, far);
        writer(i + 1, compressed0, compressed1, near, far);
        writer(i + 2, compressed0, compressed1, near, far);
        writer(i + 3, compressed0, compressed1, near, far);
    }
}

function writeCompressedAttrib2(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    let i;
    const writer = vafWriters[attributeLocations.compressedAttribute2];
    const color = billboard.color;
    const pickColor = !defined(billboardCollection._batchTable)
        ? billboard.getPickId(frameState.context).color
        : Color.WHITE;
    const sizeInMeters = billboard.sizeInMeters ? 1.0 : 0.0;
    const validAlignedAxis =
        Math.abs(Cartesian3.magnitudeSquared(billboard.alignedAxis) - 1.0) <
        CesiumMath.EPSILON6
            ? 1.0
            : 0.0;

    billboardCollection._allSizedInMeters =
        billboardCollection._allSizedInMeters && sizeInMeters === 1.0;

    let height = 0;
    const index = billboard._imageIndex;
    if (index !== -1) {
        const imageRectangle = textureAtlasCoordinates[index];

        //>>includeStart('debug', pragmas.debug);
        if (!defined(imageRectangle)) {
            throw new DeveloperError(`Invalid billboard image index: ${index}`);
        }
        //>>includeEnd('debug');

        height = imageRectangle.height;
    }

    const dimensions = billboardCollection._textureAtlas.texture.dimensions;
    const imageHeight = Math.round(
        defaultValue(billboard.height, dimensions.y * height)
    );
    billboardCollection._maxSize = Math.max(
        billboardCollection._maxSize,
        imageHeight
    );
    let labelHorizontalOrigin = defaultValue(
        billboard._labelHorizontalOrigin,
        -2
    );
    labelHorizontalOrigin += 2;
    const compressed3 = imageHeight * LEFT_SHIFT2 + labelHorizontalOrigin;

    let red = Color.floatToByte(color.red);
    let green = Color.floatToByte(color.green);
    let blue = Color.floatToByte(color.blue);
    const compressed0 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;

    red = Color.floatToByte(pickColor.red);
    green = Color.floatToByte(pickColor.green);
    blue = Color.floatToByte(pickColor.blue);
    const compressed1 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;

    let compressed2 =
        Color.floatToByte(color.alpha) * LEFT_SHIFT16 +
        Color.floatToByte(pickColor.alpha) * LEFT_SHIFT8;
    compressed2 += sizeInMeters * 2.0 + validAlignedAxis;

    if (billboardCollection._instanced) {
        i = billboard._index;
        writer(i, compressed0, compressed1, compressed2, compressed3);
    } else {
        i = billboard._index * 4;
        writer(i + 0, compressed0, compressed1, compressed2, compressed3);
        writer(i + 1, compressed0, compressed1, compressed2, compressed3);
        writer(i + 2, compressed0, compressed1, compressed2, compressed3);
        writer(i + 3, compressed0, compressed1, compressed2, compressed3);
    }
}

function writeEyeOffset(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    let i;
    const writer = vafWriters[attributeLocations.eyeOffset];
    const eyeOffset = billboard.eyeOffset;

    // For billboards that are clamped to ground, move it slightly closer to the camera
    let eyeOffsetZ = eyeOffset.z;
    if (billboard._heightReference !== HeightReference.NONE) {
        eyeOffsetZ *= 1.005;
    }
    billboardCollection._maxEyeOffset = Math.max(
        billboardCollection._maxEyeOffset,
        Math.abs(eyeOffset.x),
        Math.abs(eyeOffset.y),
        Math.abs(eyeOffsetZ)
    );

    if (billboardCollection._instanced) {
        let width = 0;
        let height = 0;
        const index = billboard._imageIndex;
        if (index !== -1) {
            const imageRectangle = textureAtlasCoordinates[index];

            //>>includeStart('debug', pragmas.debug);
            if (!defined(imageRectangle)) {
                throw new DeveloperError(`Invalid billboard image index: ${index}`);
            }
            //>>includeEnd('debug');

            width = imageRectangle.width;
            height = imageRectangle.height;
        }

        scratchCartesian2.x = width;
        scratchCartesian2.y = height;
        const compressedTexCoordsRange = AttributeCompression.compressTextureCoordinates(
            scratchCartesian2
        );

        i = billboard._index;
        writer(i, eyeOffset.x, eyeOffset.y, eyeOffsetZ, compressedTexCoordsRange);
    } else {
        i = billboard._index * 4;
        writer(i + 0, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);
        writer(i + 1, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);
        writer(i + 2, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);
        writer(i + 3, eyeOffset.x, eyeOffset.y, eyeOffsetZ, 0.0);
    }
}

function writeScaleByDistance(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    let i;
    const writer = vafWriters[attributeLocations.scaleByDistance];
    let near = 0.0;
    let nearValue = 1.0;
    let far = 1.0;
    let farValue = 1.0;

    const scale = billboard.scaleByDistance;
    if (defined(scale)) {
        near = scale.near;
        nearValue = scale.nearValue;
        far = scale.far;
        farValue = scale.farValue;

        if (nearValue !== 1.0 || farValue !== 1.0) {
            // scale by distance calculation in shader need not be enabled
            // until a billboard with near and far !== 1.0 is found
            billboardCollection._shaderScaleByDistance = true;
        }
    }

    if (billboardCollection._instanced) {
        i = billboard._index;
        writer(i, near, nearValue, far, farValue);
    } else {
        i = billboard._index * 4;
        writer(i + 0, near, nearValue, far, farValue);
        writer(i + 1, near, nearValue, far, farValue);
        writer(i + 2, near, nearValue, far, farValue);
        writer(i + 3, near, nearValue, far, farValue);
    }
}

function writePixelOffsetScaleByDistance(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    let i;
    const writer = vafWriters[attributeLocations.pixelOffsetScaleByDistance];
    let near = 0.0;
    let nearValue = 1.0;
    let far = 1.0;
    let farValue = 1.0;

    const pixelOffsetScale = billboard.pixelOffsetScaleByDistance;
    if (defined(pixelOffsetScale)) {
        near = pixelOffsetScale.near;
        nearValue = pixelOffsetScale.nearValue;
        far = pixelOffsetScale.far;
        farValue = pixelOffsetScale.farValue;

        if (nearValue !== 1.0 || farValue !== 1.0) {
            // pixelOffsetScale by distance calculation in shader need not be enabled
            // until a billboard with near and far !== 1.0 is found
            billboardCollection._shaderPixelOffsetScaleByDistance = true;
        }
    }

    if (billboardCollection._instanced) {
        i = billboard._index;
        writer(i, near, nearValue, far, farValue);
    } else {
        i = billboard._index * 4;
        writer(i + 0, near, nearValue, far, farValue);
        writer(i + 1, near, nearValue, far, farValue);
        writer(i + 2, near, nearValue, far, farValue);
        writer(i + 3, near, nearValue, far, farValue);
    }
}

function writeCompressedAttribute3(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    let i;
    const writer = vafWriters[attributeLocations.compressedAttribute3];
    let near = 0.0;
    let far = Number.MAX_VALUE;

    const distanceDisplayCondition = billboard.distanceDisplayCondition;
    if (defined(distanceDisplayCondition)) {
        near = distanceDisplayCondition.near;
        far = distanceDisplayCondition.far;

        near *= near;
        far *= far;

        billboardCollection._shaderDistanceDisplayCondition = true;
    }

    let disableDepthTestDistance = billboard.disableDepthTestDistance;
    const clampToGround =
        billboard.heightReference === HeightReference.CLAMP_TO_GROUND &&
        frameState.context.depthTexture;
    if (!defined(disableDepthTestDistance)) {
        disableDepthTestDistance = clampToGround ? 5000.0 : 0.0;
    }

    disableDepthTestDistance *= disableDepthTestDistance;
    if (clampToGround || disableDepthTestDistance > 0.0) {
        billboardCollection._shaderDisableDepthDistance = true;
        if (disableDepthTestDistance === Number.POSITIVE_INFINITY) {
            disableDepthTestDistance = -1.0;
        }
    }

    let imageHeight;
    let imageWidth;

    if (!defined(billboard._labelDimensions)) {
        let height = 0;
        let width = 0;
        const index = billboard._imageIndex;
        if (index !== -1) {
            const imageRectangle = textureAtlasCoordinates[index];

            //>>includeStart('debug', pragmas.debug);
            if (!defined(imageRectangle)) {
                throw new DeveloperError(`Invalid billboard image index: ${index}`);
            }
            //>>includeEnd('debug');

            height = imageRectangle.height;
            width = imageRectangle.width;
        }

        imageHeight = Math.round(
            defaultValue(
                billboard.height,
                billboardCollection._textureAtlas.texture.dimensions.y * height
            )
        );

        const textureWidth = billboardCollection._textureAtlas.texture.width;
        imageWidth = Math.round(
            defaultValue(billboard.width, textureWidth * width)
        );
    } else {
        imageWidth = billboard._labelDimensions.x;
        imageHeight = billboard._labelDimensions.y;
    }

    const w = Math.floor(CesiumMath.clamp(imageWidth, 0.0, LEFT_SHIFT12));
    const h = Math.floor(CesiumMath.clamp(imageHeight, 0.0, LEFT_SHIFT12));
    const dimensions = w * LEFT_SHIFT12 + h;

    if (billboardCollection._instanced) {
        i = billboard._index;
        writer(i, near, far, disableDepthTestDistance, dimensions);
    } else {
        i = billboard._index * 4;
        writer(i + 0, near, far, disableDepthTestDistance, dimensions);
        writer(i + 1, near, far, disableDepthTestDistance, dimensions);
        writer(i + 2, near, far, disableDepthTestDistance, dimensions);
        writer(i + 3, near, far, disableDepthTestDistance, dimensions);
    }
}

function writeTextureCoordinateBoundsOrLabelTranslate(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    if (billboard.heightReference === HeightReference.CLAMP_TO_GROUND) {
        const scene = billboardCollection._scene;
        const context = frameState.context;
        const globeTranslucent = frameState.globeTranslucencyState.translucent;
        const depthTestAgainstTerrain =
            defined(scene.globe) && scene.globe.depthTestAgainstTerrain;

        // Only do manual depth test if the globe is opaque and writes depth
        billboardCollection._shaderClampToGround =
            context.depthTexture && !globeTranslucent && depthTestAgainstTerrain;
    }
    let i;
    const writer =
        vafWriters[attributeLocations.textureCoordinateBoundsOrLabelTranslate];

    if (ContextLimits.maximumVertexTextureImageUnits > 0) {
        //write _labelTranslate, used by depth testing in the vertex shader
        let translateX = 0;
        let translateY = 0;
        if (defined(billboard._labelTranslate)) {
            translateX = billboard._labelTranslate.x;
            translateY = billboard._labelTranslate.y;
        }
        if (billboardCollection._instanced) {
            i = billboard._index;
            writer(i, translateX, translateY, 0.0, 0.0);
        } else {
            i = billboard._index * 4;
            writer(i + 0, translateX, translateY, 0.0, 0.0);
            writer(i + 1, translateX, translateY, 0.0, 0.0);
            writer(i + 2, translateX, translateY, 0.0, 0.0);
            writer(i + 3, translateX, translateY, 0.0, 0.0);
        }
        return;
    }

    //write texture coordinate bounds, used by depth testing in fragment shader
    let minX = 0;
    let minY = 0;
    let width = 0;
    let height = 0;
    const index = billboard._imageIndex;
    if (index !== -1) {
        const imageRectangle = textureAtlasCoordinates[index];

        //>>includeStart('debug', pragmas.debug);
        if (!defined(imageRectangle)) {
            throw new DeveloperError(`Invalid billboard image index: ${index}`);
        }
        //>>includeEnd('debug');

        minX = imageRectangle.x;
        minY = imageRectangle.y;
        width = imageRectangle.width;
        height = imageRectangle.height;
    }
    const maxX = minX + width;
    const maxY = minY + height;

    if (billboardCollection._instanced) {
        i = billboard._index;
        writer(i, minX, minY, maxX, maxY);
    } else {
        i = billboard._index * 4;
        writer(i + 0, minX, minY, maxX, maxY);
        writer(i + 1, minX, minY, maxX, maxY);
        writer(i + 2, minX, minY, maxX, maxY);
        writer(i + 3, minX, minY, maxX, maxY);
    }
}

function writeBatchId(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    if (!defined(billboardCollection._batchTable)) {
        return;
    }

    const writer = vafWriters[attributeLocations.a_batchId];
    const id = billboard._batchIndex;

    let i;
    if (billboardCollection._instanced) {
        i = billboard._index;
        writer(i, id);
    } else {
        i = billboard._index * 4;
        writer(i + 0, id);
        writer(i + 1, id);
        writer(i + 2, id);
        writer(i + 3, id);
    }
}

function writeSDF(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    if (!billboardCollection._sdf) {
        return;
    }

    let i;
    const writer = vafWriters[attributeLocations.sdf];

    const outlineColor = billboard.outlineColor;
    const outlineWidth = billboard.outlineWidth;

    const red = Color.floatToByte(outlineColor.red);
    const green = Color.floatToByte(outlineColor.green);
    const blue = Color.floatToByte(outlineColor.blue);
    const compressed0 = red * LEFT_SHIFT16 + green * LEFT_SHIFT8 + blue;

    // Compute the relative outline distance
    const outlineDistance = outlineWidth / SDFSettings.RADIUS;
    const compressed1 =
        Color.floatToByte(outlineColor.alpha) * LEFT_SHIFT16 +
        Color.floatToByte(outlineDistance) * LEFT_SHIFT8;

    if (billboardCollection._instanced) {
        i = billboard._index;
        writer(i, compressed0, compressed1);
    } else {
        i = billboard._index * 4;
        writer(i + 0, compressed0 + LOWER_LEFT, compressed1);
        writer(i + 1, compressed0 + LOWER_RIGHT, compressed1);
        writer(i + 2, compressed0 + UPPER_RIGHT, compressed1);
        writer(i + 3, compressed0 + UPPER_LEFT, compressed1);
    }
}

function writeBillboard(
    billboardCollection,
    frameState,
    textureAtlasCoordinates,
    vafWriters,
    billboard
) {
    writePositionScaleAndRotation(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writeCompressedAttrib0(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writeCompressedAttrib1(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writeCompressedAttrib2(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writeEyeOffset(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writeScaleByDistance(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writePixelOffsetScaleByDistance(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writeCompressedAttribute3(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writeTextureCoordinateBoundsOrLabelTranslate(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writeBatchId(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
    writeSDF(
        billboardCollection,
        frameState,
        textureAtlasCoordinates,
        vafWriters,
        billboard
    );
}

function recomputeActualPositions(
    billboardCollection,
    billboards,
    length,
    frameState,
    modelMatrix,
    recomputeBoundingVolume
) {
    let boundingVolume;
    if (frameState.mode === SceneMode.SCENE3D) {
        boundingVolume = billboardCollection._baseVolume;
        billboardCollection._boundingVolumeDirty = true;
    } else {
        boundingVolume = billboardCollection._baseVolume2D;
    }

    const positions = [];
    for (let i = 0; i < length; ++i) {
        const billboard = billboards[i];
        const position = billboard.position;
        const actualPosition = Billboard._computeActualPosition(
            billboard,
            position,
            frameState,
            modelMatrix
        );
        if (defined(actualPosition)) {
            billboard._setActualPosition(actualPosition);

            if (recomputeBoundingVolume) {
                positions.push(actualPosition);
            } else {
                BoundingSphere.expand(boundingVolume, actualPosition, boundingVolume);
            }
        }
    }

    if (recomputeBoundingVolume) {
        BoundingSphere.fromPoints(positions, boundingVolume);
    }
}

function updateMode(billboardCollection, frameState) {
    const mode = frameState.mode;

    const billboards = billboardCollection._billboards;
    const billboardsToUpdate = billboardCollection._billboardsToUpdate;
    const modelMatrix = billboardCollection._modelMatrix;

    if (
        billboardCollection._createVertexArray ||
        billboardCollection._mode !== mode ||
        (mode !== SceneMode.SCENE3D &&
            !Matrix4.equals(modelMatrix, billboardCollection.modelMatrix))
    ) {
        billboardCollection._mode = mode;
        Matrix4.clone(billboardCollection.modelMatrix, modelMatrix);
        billboardCollection._createVertexArray = true;

        if (
            mode === SceneMode.SCENE3D ||
            mode === SceneMode.SCENE2D ||
            mode === SceneMode.COLUMBUS_VIEW
        ) {
            recomputeActualPositions(
                billboardCollection,
                billboards,
                billboards.length,
                frameState,
                modelMatrix,
                true
            );
        }
    } else if (mode === SceneMode.MORPHING) {
        recomputeActualPositions(
            billboardCollection,
            billboards,
            billboards.length,
            frameState,
            modelMatrix,
            true
        );
    } else if (mode === SceneMode.SCENE2D || mode === SceneMode.COLUMBUS_VIEW) {
        recomputeActualPositions(
            billboardCollection,
            billboardsToUpdate,
            billboardCollection._billboardsToUpdateIndex,
            frameState,
            modelMatrix,
            false
        );
    }
}

function updateBoundingVolume(collection, frameState, boundingVolume) {
    let pixelScale = 1.0;
    if (!collection._allSizedInMeters || collection._maxPixelOffset !== 0.0) {
        pixelScale = frameState.camera.getPixelSize(
            boundingVolume,
            frameState.context.drawingBufferWidth,
            frameState.context.drawingBufferHeight
        );
    }

    let size = pixelScale * collection._maxScale * collection._maxSize * 2.0;
    if (collection._allHorizontalCenter && collection._allVerticalCenter) {
        size *= 0.5;
    }

    const offset =
        pixelScale * collection._maxPixelOffset + collection._maxEyeOffset;
    boundingVolume.radius += size + offset;
}

function createDebugCommand(billboardCollection, context) {
    const fs =
        "uniform sampler2D billboard_texture; \n" +
        "varying vec2 v_textureCoordinates; \n" +
        "void main() \n" +
        "{ \n" +
        "    gl_FragColor = texture2D(billboard_texture, v_textureCoordinates); \n" +
        "} \n";

    const drawCommand = context.createViewportQuadCommand(fs, {
        uniformMap: {
            billboard_texture: function () {
                return billboardCollection._textureAtlas.texture;
            },
        },
    });
    drawCommand.pass = Pass.OVERLAY;
    return drawCommand;
}

const scratchWriterArray = [];

/**
 * Called when {@link Viewer} or {@link CesiumWidget} render the scene to
 * get the draw commands needed to render this primitive.
 * <p>
 * Do not call this function directly.  This is documented just to
 * list the exceptions that may be propagated when the scene is rendered:
 * </p>
 *
 * @exception {RuntimeError} image with id must be in the atlas.
 */
BillboardCollection.prototype.update = function (frameState) {
    removeBillboards(this);

    if (!this.show) {
        return;
    }

    let billboards = this._billboards;
    let billboardsLength = billboards.length;

    const context = frameState.context;
    this._instanced = context.instancedArrays;
    attributeLocations = this._instanced
        ? attributeLocationsInstanced
        : attributeLocationsBatched;
    getIndexBuffer = this._instanced
        ? getIndexBufferInstanced
        : getIndexBufferBatched;

    let textureAtlas = this._textureAtlas;
    if (!defined(textureAtlas)) {
        textureAtlas = this._textureAtlas = new TextureAtlas({
            context: context,
        });

        for (let ii = 0; ii < billboardsLength; ++ii) {
            billboards[ii]._loadImage();
        }
    }

    const textureAtlasCoordinates = textureAtlas.textureCoordinates;
    if (textureAtlasCoordinates.length === 0) {
        // Can't write billboard vertices until we have texture coordinates
        // provided by a texture atlas
        return;
    }

    updateMode(this, frameState);

    billboards = this._billboards;
    billboardsLength = billboards.length;
    const billboardsToUpdate = this._billboardsToUpdate;
    const billboardsToUpdateLength = this._billboardsToUpdateIndex;

    const properties = this._propertiesChanged;

    const textureAtlasGUID = textureAtlas.guid;
    const createVertexArray =
        this._createVertexArray || this._textureAtlasGUID !== textureAtlasGUID;
    this._textureAtlasGUID = textureAtlasGUID;

    let vafWriters;
    const pass = frameState.passes;
    const picking = pass.pick;

    // PERFORMANCE_IDEA: Round robin multiple buffers.
    if (createVertexArray || (!picking && this.computeNewBuffersUsage())) {
        this._createVertexArray = false;

        for (let k = 0; k < NUMBER_OF_PROPERTIES; ++k) {
            properties[k] = 0;
        }

        this._vaf = this._vaf && this._vaf.destroy();

        if (billboardsLength > 0) {
            // PERFORMANCE_IDEA:  Instead of creating a new one, resize like std::vector.
            this._vaf = createVAF(
                context,
                billboardsLength,
                this._buffersUsage,
                this._instanced,
                this._batchTable,
                this._sdf
            );
            vafWriters = this._vaf.writers;

            // Rewrite entire buffer if billboards were added or removed.
            for (let i = 0; i < billboardsLength; ++i) {
                const billboard = this._billboards[i];
                billboard._dirty = false; // In case it needed an update.
                writeBillboard(
                    this,
                    frameState,
                    textureAtlasCoordinates,
                    vafWriters,
                    billboard
                );
            }

            // Different billboard collections share the same index buffer.
            this._vaf.commit(getIndexBuffer(context));
        }

        this._billboardsToUpdateIndex = 0;
    } else if (billboardsToUpdateLength > 0) {
        // Billboards were modified, but none were added or removed.
        const writers = scratchWriterArray;
        writers.length = 0;

        if (
            properties[POSITION_INDEX] ||
            properties[ROTATION_INDEX] ||
            properties[SCALE_INDEX]
        ) {
            writers.push(writePositionScaleAndRotation);
        }

        if (
            properties[IMAGE_INDEX_INDEX] ||
            properties[PIXEL_OFFSET_INDEX] ||
            properties[HORIZONTAL_ORIGIN_INDEX] ||
            properties[VERTICAL_ORIGIN_INDEX] ||
            properties[SHOW_INDEX]
        ) {
            writers.push(writeCompressedAttrib0);
            if (this._instanced) {
                writers.push(writeEyeOffset);
            }
        }

        if (
            properties[IMAGE_INDEX_INDEX] ||
            properties[ALIGNED_AXIS_INDEX] ||
            properties[TRANSLUCENCY_BY_DISTANCE_INDEX]
        ) {
            writers.push(writeCompressedAttrib1);
            writers.push(writeCompressedAttrib2);
        }

        if (properties[IMAGE_INDEX_INDEX] || properties[COLOR_INDEX]) {
            writers.push(writeCompressedAttrib2);
        }

        if (properties[EYE_OFFSET_INDEX]) {
            writers.push(writeEyeOffset);
        }

        if (properties[SCALE_BY_DISTANCE_INDEX]) {
            writers.push(writeScaleByDistance);
        }

        if (properties[PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX]) {
            writers.push(writePixelOffsetScaleByDistance);
        }

        if (
            properties[DISTANCE_DISPLAY_CONDITION_INDEX] ||
            properties[DISABLE_DEPTH_DISTANCE] ||
            properties[IMAGE_INDEX_INDEX] ||
            properties[POSITION_INDEX]
        ) {
            writers.push(writeCompressedAttribute3);
        }

        if (properties[IMAGE_INDEX_INDEX] || properties[POSITION_INDEX]) {
            writers.push(writeTextureCoordinateBoundsOrLabelTranslate);
        }

        if (properties[SDF_INDEX]) {
            writers.push(writeSDF);
        }

        const numWriters = writers.length;
        vafWriters = this._vaf.writers;

        if (billboardsToUpdateLength / billboardsLength > 0.1) {
            // If more than 10% of billboard change, rewrite the entire buffer.

            // PERFORMANCE_IDEA:  I totally made up 10% :).

            for (let m = 0; m < billboardsToUpdateLength; ++m) {
                const b = billboardsToUpdate[m];
                b._dirty = false;

                for (let n = 0; n < numWriters; ++n) {
                    writers[n](this, frameState, textureAtlasCoordinates, vafWriters, b);
                }
            }
            this._vaf.commit(getIndexBuffer(context));
        } else {
            for (let h = 0; h < billboardsToUpdateLength; ++h) {
                const bb = billboardsToUpdate[h];
                bb._dirty = false;

                for (let o = 0; o < numWriters; ++o) {
                    writers[o](this, frameState, textureAtlasCoordinates, vafWriters, bb);
                }

                if (this._instanced) {
                    this._vaf.subCommit(bb._index, 1);
                } else {
                    this._vaf.subCommit(bb._index * 4, 4);
                }
            }
            this._vaf.endSubCommits();
        }

        this._billboardsToUpdateIndex = 0;
    }

    // If the number of total billboards ever shrinks considerably
    // Truncate billboardsToUpdate so that we free memory that we're
    // not going to be using.
    if (billboardsToUpdateLength > billboardsLength * 1.5) {
        billboardsToUpdate.length = billboardsLength;
    }

    if (!defined(this._vaf) || !defined(this._vaf.va)) {
        return;
    }

    if (this._boundingVolumeDirty) {
        this._boundingVolumeDirty = false;
        BoundingSphere.transform(
            this._baseVolume,
            this.modelMatrix,
            this._baseVolumeWC
        );
    }

    let boundingVolume;
    let modelMatrix = Matrix4.IDENTITY;
    if (frameState.mode === SceneMode.SCENE3D) {
        modelMatrix = this.modelMatrix;
        boundingVolume = BoundingSphere.clone(
            this._baseVolumeWC,
            this._boundingVolume
        );
    } else {
        boundingVolume = BoundingSphere.clone(
            this._baseVolume2D,
            this._boundingVolume
        );
    }
    updateBoundingVolume(this, frameState, boundingVolume);

    const blendOptionChanged = this._blendOption !== this.blendOption;
    this._blendOption = this.blendOption;

    if (blendOptionChanged) {
        if (
            this._blendOption === BlendOption.OPAQUE ||
            this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT
        ) {
            this._rsOpaque = RenderState.fromCache({
                depthTest: {
                    enabled: true,
                    func: WebGLConstants.LESS,
                },
                depthMask: true,
            });
        } else {
            this._rsOpaque = undefined;
        }

        // If OPAQUE_AND_TRANSLUCENT is in use, only the opaque pass gets the benefit of the depth buffer,
        // not the translucent pass.  Otherwise, if the TRANSLUCENT pass is on its own, it turns on
        // a depthMask in lieu of full depth sorting (because it has opaque-ish fragments that look bad in OIT).
        // When the TRANSLUCENT depth mask is in use, label backgrounds require the depth func to be LEQUAL.
        const useTranslucentDepthMask =
            this._blendOption === BlendOption.TRANSLUCENT;

        if (
            this._blendOption === BlendOption.TRANSLUCENT ||
            this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT
        ) {
            this._rsTranslucent = RenderState.fromCache({
                depthTest: {
                    enabled: true,
                    func: useTranslucentDepthMask
                        ? WebGLConstants.LEQUAL
                        : WebGLConstants.LESS,
                },
                depthMask: useTranslucentDepthMask,
                blending: BlendingState.ALPHA_BLEND,
            });
        } else {
            this._rsTranslucent = undefined;
        }
    }

    this._shaderDisableDepthDistance =
        this._shaderDisableDepthDistance ||
        frameState.minimumDisableDepthTestDistance !== 0.0;

    let vsSource;
    let fsSource;
    let vs;
    let fs;
    let vertDefines;

    const supportVSTextureReads =
        ContextLimits.maximumVertexTextureImageUnits > 0;

    if (
        blendOptionChanged ||
        this._shaderRotation !== this._compiledShaderRotation ||
        this._shaderAlignedAxis !== this._compiledShaderAlignedAxis ||
        this._shaderScaleByDistance !== this._compiledShaderScaleByDistance ||
        this._shaderTranslucencyByDistance !==
        this._compiledShaderTranslucencyByDistance ||
        this._shaderPixelOffsetScaleByDistance !==
        this._compiledShaderPixelOffsetScaleByDistance ||
        this._shaderDistanceDisplayCondition !==
        this._compiledShaderDistanceDisplayCondition ||
        this._shaderDisableDepthDistance !==
        this._compiledShaderDisableDepthDistance ||
        this._shaderClampToGround !== this._compiledShaderClampToGround ||
        this._sdf !== this._compiledSDF
    ) {
        vsSource = BillboardCollectionVS;
        fsSource = BillboardCollectionFS;

        vertDefines = [];
        if (defined(this._batchTable)) {
            vertDefines.push("VECTOR_TILE");
            vsSource = this._batchTable.getVertexShaderCallback(
                false,
                "a_batchId",
                undefined
            )(vsSource);
            fsSource = this._batchTable.getFragmentShaderCallback(
                false,
                undefined
            )(fsSource);
        }

        vs = new ShaderSource({
            defines: vertDefines,
            sources: [vsSource],
        });

        if (this._ENUENABLED) {
            vs.defines.push("ENU_ENABLED");
        }

        if (this._instanced) {
            vs.defines.push("INSTANCED");
        }
        if (this._shaderRotation) {
            vs.defines.push("ROTATION");
        }
        if (this._shaderAlignedAxis) {
            vs.defines.push("ALIGNED_AXIS");
        }
        if (this._shaderScaleByDistance) {
            vs.defines.push("EYE_DISTANCE_SCALING");
        }
        if (this._shaderTranslucencyByDistance) {
            vs.defines.push("EYE_DISTANCE_TRANSLUCENCY");
        }
        if (this._shaderPixelOffsetScaleByDistance) {
            vs.defines.push("EYE_DISTANCE_PIXEL_OFFSET");
        }
        if (this._shaderDistanceDisplayCondition) {
            vs.defines.push("DISTANCE_DISPLAY_CONDITION");
        }
        if (this._shaderDisableDepthDistance) {
            vs.defines.push("DISABLE_DEPTH_DISTANCE");
        }
        if (this._shaderClampToGround) {
            if (supportVSTextureReads) {
                vs.defines.push("VERTEX_DEPTH_CHECK");
            } else {
                vs.defines.push("FRAGMENT_DEPTH_CHECK");
            }
        }

        const sdfEdge = 1.0 - SDFSettings.CUTOFF;

        if (this._sdf) {
            vs.defines.push("SDF");
        }

        const vectorFragDefine = defined(this._batchTable) ? "VECTOR_TILE" : "";

        if (this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT) {
            fs = new ShaderSource({
                defines: ["OPAQUE", vectorFragDefine],
                sources: [fsSource],
            });
            if (this._shaderClampToGround) {
                if (supportVSTextureReads) {
                    fs.defines.push("VERTEX_DEPTH_CHECK");
                } else {
                    fs.defines.push("FRAGMENT_DEPTH_CHECK");
                }
            }

            if (this._sdf) {
                fs.defines.push("SDF");
                fs.defines.push(`SDF_EDGE ${sdfEdge}`);
            }

            this._sp = ShaderProgram.replaceCache({
                context: context,
                shaderProgram: this._sp,
                vertexShaderSource: vs,
                fragmentShaderSource: fs,
                attributeLocations: attributeLocations,
            });

            fs = new ShaderSource({
                defines: ["TRANSLUCENT", vectorFragDefine],
                sources: [fsSource],
            });
            if (this._shaderClampToGround) {
                if (supportVSTextureReads) {
                    fs.defines.push("VERTEX_DEPTH_CHECK");
                } else {
                    fs.defines.push("FRAGMENT_DEPTH_CHECK");
                }
            }
            if (this._sdf) {
                fs.defines.push("SDF");
                fs.defines.push(`SDF_EDGE ${sdfEdge}`);
            }
            this._spTranslucent = ShaderProgram.replaceCache({
                context: context,
                shaderProgram: this._spTranslucent,
                vertexShaderSource: vs,
                fragmentShaderSource: fs,
                attributeLocations: attributeLocations,
            });
        }

        if (this._blendOption === BlendOption.OPAQUE) {
            fs = new ShaderSource({
                defines: [vectorFragDefine],
                sources: [fsSource],
            });
            if (this._shaderClampToGround) {
                if (supportVSTextureReads) {
                    fs.defines.push("VERTEX_DEPTH_CHECK");
                } else {
                    fs.defines.push("FRAGMENT_DEPTH_CHECK");
                }
            }
            if (this._sdf) {
                fs.defines.push("SDF");
                fs.defines.push(`SDF_EDGE ${sdfEdge}`);
            }
            this._sp = ShaderProgram.replaceCache({
                context: context,
                shaderProgram: this._sp,
                vertexShaderSource: vs,
                fragmentShaderSource: fs,
                attributeLocations: attributeLocations,
            });
        }

        if (this._blendOption === BlendOption.TRANSLUCENT) {
            fs = new ShaderSource({
                defines: [vectorFragDefine],
                sources: [fsSource],
            });
            if (this._shaderClampToGround) {
                if (supportVSTextureReads) {
                    fs.defines.push("VERTEX_DEPTH_CHECK");
                } else {
                    fs.defines.push("FRAGMENT_DEPTH_CHECK");
                }
            }
            if (this._sdf) {
                fs.defines.push("SDF");
                fs.defines.push(`SDF_EDGE ${sdfEdge}`);
            }
            this._spTranslucent = ShaderProgram.replaceCache({
                context: context,
                shaderProgram: this._spTranslucent,
                vertexShaderSource: vs,
                fragmentShaderSource: fs,
                attributeLocations: attributeLocations,
            });
        }

        this._compiledShaderRotation = this._shaderRotation;
        this._compiledShaderAlignedAxis = this._shaderAlignedAxis;
        this._compiledShaderScaleByDistance = this._shaderScaleByDistance;
        this._compiledShaderTranslucencyByDistance = this._shaderTranslucencyByDistance;
        this._compiledShaderPixelOffsetScaleByDistance = this._shaderPixelOffsetScaleByDistance;
        this._compiledShaderDistanceDisplayCondition = this._shaderDistanceDisplayCondition;
        this._compiledShaderDisableDepthDistance = this._shaderDisableDepthDistance;
        this._compiledShaderClampToGround = this._shaderClampToGround;
        this._compiledSDF = this._sdf;
    }

    const commandList = frameState.commandList;

    if (pass.render || pass.pick) {
        const colorList = this._colorCommands;

        const opaque = this._blendOption === BlendOption.OPAQUE;
        const opaqueAndTranslucent =
            this._blendOption === BlendOption.OPAQUE_AND_TRANSLUCENT;

        const va = this._vaf.va;
        const vaLength = va.length;

        let uniforms = this._uniforms;
        let pickId;
        if (defined(this._batchTable)) {
            uniforms = this._batchTable.getUniformMapCallback()(uniforms);
            pickId = this._batchTable.getPickId();
        } else {
            pickId = "v_pickColor";
        }

        colorList.length = vaLength;
        const totalLength = opaqueAndTranslucent ? vaLength * 2 : vaLength;
        for (let j = 0; j < totalLength; ++j) {
            let command = colorList[j];
            if (!defined(command)) {
                command = colorList[j] = new DrawCommand();
            }

            const opaqueCommand = opaque || (opaqueAndTranslucent && j % 2 === 0);

            command.pass =
                opaqueCommand || !opaqueAndTranslucent ? Pass.OPAQUE : Pass.TRANSLUCENT;
            command.owner = this;

            const index = opaqueAndTranslucent ? Math.floor(j / 2.0) : j;
            command.boundingVolume = boundingVolume;
            command.modelMatrix = modelMatrix;
            command.count = va[index].indicesCount;
            command.shaderProgram = opaqueCommand ? this._sp : this._spTranslucent;
            command.uniformMap = uniforms;
            command.vertexArray = va[index].va;
            command.renderState = opaqueCommand
                ? this._rsOpaque
                : this._rsTranslucent;
            command.debugShowBoundingVolume = this.debugShowBoundingVolume;
            command.pickId = pickId;

            if (this._instanced) {
                command.count = 6;
                command.instanceCount = billboardsLength;
            }

            commandList.push(command);
        }

        if (this.debugShowTextureAtlas) {
            if (!defined(this.debugCommand)) {
                this.debugCommand = createDebugCommand(this, frameState.context);
            }

            commandList.push(this.debugCommand);
        }
    }
};

/**
 * Returns true if this object was destroyed; otherwise, false.
 * <br /><br />
 * If this object was destroyed, it should not be used; calling any function other than
 * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.
 *
 * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.
 *
 * @see BillboardCollection#destroy
 */
BillboardCollection.prototype.isDestroyed = function () {
    return false;
};

/**
 * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic
 * release of WebGL resources, instead of relying on the garbage collector to destroy this object.
 * <br /><br />
 * Once an object is destroyed, it should not be used; calling any function other than
 * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,
 * assign the return value (<code>undefined</code>) to the object as done in the example.
 *
 * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.
 *
 *
 * @example
 * billboards = billboards && billboards.destroy();
 *
 * @see BillboardCollection#isDestroyed
 */
BillboardCollection.prototype.destroy = function () {
    if (defined(this._removeCallbackFunc)) {
        this._removeCallbackFunc();
        this._removeCallbackFunc = undefined;
    }

    this._textureAtlas =
        this._destroyTextureAtlas &&
        this._textureAtlas &&
        this._textureAtlas.destroy();
    this._sp = this._sp && this._sp.destroy();
    this._spTranslucent = this._spTranslucent && this._spTranslucent.destroy();
    this._vaf = this._vaf && this._vaf.destroy();
    destroyBillboards(this._billboards);

    return destroyObject(this);
};

module.exports = BillboardCollection;

},{}],9:[function(require,module,exports){
/**
 * Created by user on 2020/3/7.
 */
//根据高度获取地图层级
function altitudeToZoom(altitude) {
    var A = 40487.57;
    var B = 0.00007096758;
    var C = 91610.74;
    var D = -40467.74;

    return Math.round(D+(A-D)/(1+Math.pow(altitude/C, B)));
}
class CameraExt{
    constructor() {
        Cesium.Camera.prototype.getLevel = function () {
            let height = this._positionCartographic.height;
            if(height == this.prevCameraHeight){
                return this.level;
            }
            this.level = altitudeToZoom(height);
            this.prevCameraHeight = height;
            return this.level;
        };
    }
}
module.exports = CameraExt;
new CameraExt();
},{}],10:[function(require,module,exports){
/**
 * Created by user on 2020/3/6.
 */

const BoundingRectangle = Cesium.BoundingRectangle;
const Cartesian2 = Cesium.Cartesian2;
const Color = Cesium.Color;
const defined = Cesium.defined;
const destroyObject = Cesium.destroyObject;
const BlendOption = Cesium.BlendOption;
const HeightReference = Cesium.HeightReference;
const HorizontalOrigin = Cesium.HorizontalOrigin;
const LabelStyle = Cesium.LabelStyle;
const SDFSettings = Cesium.SDFSettings;
const TextureAtlas = Cesium.TextureAtlas;
const VerticalOrigin = Cesium.VerticalOrigin;


const LabelCollection = Cesium.LabelCollection;
const BillboardCollection = require('../ext/BillboardCollection.js');
const GraphemeSplitter = require('grapheme-splitter');


// var SDFSettings = {
//     /**
//      * The font size in pixels
//      *
//      * @type {Number}
//      * @constant
//      */
//     FONT_SIZE: 24.0,
//
//     /**
//      * Whitespace padding around glyphs.
//      *
//      * @type {Number}
//      * @constant
//      */
//     PADDING: 0.0,
//
//     /**
//      * How many pixels around the glyph shape to use for encoding distance
//      *
//      * @type {Number}
//      * @constant
//      */
//     RADIUS: 8.0,
//
//     /**
//      * How much of the radius (relative) is used for the inside part the glyph.
//      *
//      * @type {Number}
//      * @constant
//      */
//     CUTOFF: 0.25
// };

function Glyph() {
    this.textureInfo = undefined;
    this.dimensions = undefined;
    this.billboard = undefined;
}

// GlyphTextureInfo represents a single character, drawn in a particular style,
// shared and reference counted across all labels.  It may or may not have an
// index into the label collection's texture atlas, depending on whether the character
// has both width and height, but it always has a valid dimensions object.
function GlyphTextureInfo(labelCollection, index, dimensions) {
    this.labelCollection = labelCollection;
    this.index = index;
    this.dimensions = dimensions;
}


// Traditionally, leading is %20 of the font size.
const defaultLineSpacingPercent = 1.2;
const whitePixelCanvasId = "ID_WHITE_PIXEL";
const whitePixelSize = new Cartesian2(4, 4);
const whitePixelBoundingRegion = new BoundingRectangle(1, 1, 1, 1);


function addWhitePixelCanvas(textureAtlas) {
    const canvas = document.createElement("canvas");
    canvas.width = whitePixelSize.x;
    canvas.height = whitePixelSize.y;

    const context2D = canvas.getContext("2d");
    context2D.fillStyle = "#fff";
    context2D.fillRect(0, 0, canvas.width, canvas.height);

    // Canvas operations take a frame to draw. Use the asynchronous add function which resolves a promise and allows the draw to complete,
    // but there's no need to wait on the promise before operation can continue
    textureAtlas.addImage(whitePixelCanvasId, canvas);
}

function drawRoundRect(ctx, x, y, width, height, radius){
    ctx.beginPath();
    // y = y -1;
    ctx.arc((x + radius), (y + radius), radius, Math.PI, Math.PI * 3 / 2);
    ctx.lineTo((width - radius + x), y);
    ctx.arc((width - radius + x), (radius + y), radius, Math.PI * 3 / 2, Math.PI * 2);
    ctx.lineTo((width + x), (height + y - radius));
    ctx.arc((width - radius + x), (height - radius + y), radius, 0, Math.PI * 1 / 2);
    ctx.lineTo((radius + x), (height +y));
    ctx.arc((radius + x), (height - radius + y), radius, Math.PI * 1 / 2, Math.PI);
    ctx.closePath();
}

function unbindGlyph(labelCollection, glyph) {
    glyph.textureInfo = undefined;
    glyph.dimensions = undefined;

    const billboard = glyph.billboard;
    if (defined(billboard)) {
        billboard.show = false;
        billboard.image = undefined;
        if (defined(billboard._removeCallbackFunc)) {
            billboard._removeCallbackFunc();
            billboard._removeCallbackFunc = undefined;
        }
        labelCollection._spareBillboards.push(billboard);
        glyph.billboard = undefined;
    }
}

function addGlyphToTextureAtlas(textureAtlas, id, canvas, glyphTextureInfo) {
    glyphTextureInfo.index = textureAtlas.addImageSync(id, canvas);
}

const splitter = new GraphemeSplitter();

function rebindAllGlyphs(labelCollection, label,mapboxGlyphs) {
    const text = label._renderedText;
    if(text.length == 0){
        return;
    }
    const graphemes = splitter.splitGraphemes(text);
    const textLength = graphemes.length;
    const glyphs = label._glyphs;
    const glyphsLength = glyphs.length;

    let glyph;
    let glyphIndex;
    let textIndex;

    // Compute a font size scale relative to the sdf font generated size.
    // label._relativeSize = label._fontSize / SDFSettings.FONT_SIZE;
    label._relativeSize = label._fontSize / 24;

    // if we have more glyphs than needed, unbind the extras.
    if (textLength < glyphsLength) {
        for (glyphIndex = textLength; glyphIndex < glyphsLength; ++glyphIndex) {
            unbindGlyph(labelCollection, glyphs[glyphIndex]);
        }
    }

    // presize glyphs to match the new text length
    glyphs.length = textLength;

    const showBackground =
        label._showBackground && text.split("\n").join("").length > 0;
    let backgroundBillboard = label._backgroundBillboard;
    const backgroundBillboardCollection =
        labelCollection._backgroundBillboardCollection;
    if (!showBackground) {
        if (defined(backgroundBillboard)) {
            backgroundBillboardCollection.remove(backgroundBillboard);
            label._backgroundBillboard = backgroundBillboard = undefined;
        }
    } else {
        if (!defined(backgroundBillboard)) {
            backgroundBillboard = backgroundBillboardCollection.add({
                collection: labelCollection,
                image: whitePixelCanvasId,
                imageSubRegion: whitePixelBoundingRegion,
            });
            label._backgroundBillboard = backgroundBillboard;
        }

        backgroundBillboard.color = label._backgroundColor;
        backgroundBillboard.show = label._show;
        backgroundBillboard.position = label._position;
        backgroundBillboard.eyeOffset = label._eyeOffset;
        backgroundBillboard.pixelOffset = label._pixelOffset;
        backgroundBillboard.horizontalOrigin = HorizontalOrigin.LEFT;
        backgroundBillboard.verticalOrigin = label._verticalOrigin;
        backgroundBillboard.heightReference = label._heightReference;
        backgroundBillboard.scale = label.totalScale;
        backgroundBillboard.pickPrimitive = label;
        backgroundBillboard.id = label._id;
        backgroundBillboard.translucencyByDistance = label._translucencyByDistance;
        backgroundBillboard.pixelOffsetScaleByDistance = label._pixelOffsetScaleByDistance;
        backgroundBillboard.scaleByDistance = label._scaleByDistance;
        backgroundBillboard.distanceDisplayCondition = label._distanceDisplayCondition;
        backgroundBillboard.disableDepthTestDistance = label._disableDepthTestDistance;
    }

    const glyphTextureCache = labelCollection._glyphTextureCache;

    // walk the text looking for new characters (creating new glyphs for each)
    // or changed characters (rebinding existing glyphs)
    for (textIndex = 0; textIndex < textLength; ++textIndex) {
        const character = graphemes[textIndex];
        const verticalOrigin = label._verticalOrigin;

        const id = JSON.stringify([
            character,
            label._fontFamily,
            label._fontStyle,
            label._fontWeight,
            +verticalOrigin
        ]);

        let glyphTextureInfo = glyphTextureCache[id];
        if (!defined(glyphTextureInfo)) {
            var chartCode = character.charCodeAt(0);
            var fontName = '微软雅黑';
            var mapboxGlyph = mapboxGlyphs[fontName][chartCode];

            if(!mapboxGlyph){
                //没找到的生僻字用？号代替
                mapboxGlyph = mapboxGlyphs[fontName][63];
            }

            if(!mapboxGlyph.hasOwnProperty('dimensions')){
                mapboxGlyph.dimensions = {width:mapboxGlyph.width -3,height:24,
                    descent:0,minx:0,miny:0,maxx:0,maxy:0
                };
            }


            glyphTextureInfo = new GlyphTextureInfo(labelCollection, -1, mapboxGlyph.dimensions);
            glyphTextureCache[id] = glyphTextureInfo;

            if (mapboxGlyph.width > 0 && mapboxGlyph.height > 0) {
                if (character !== ' ') {
                    addGlyphToTextureAtlas(labelCollection._textureAtlas, id, mapboxGlyph, glyphTextureInfo);
                }
            }
        }

        glyph = glyphs[textIndex];

        if (defined(glyph)) {
            // clean up leftover information from the previous glyph
            if (glyphTextureInfo.index === -1) {
                // no texture, and therefore no billboard, for this glyph.
                // so, completely unbind glyph.
                unbindGlyph(labelCollection, glyph);
            } else if (defined(glyph.textureInfo)) {
                // we have a texture and billboard.  If we had one before, release
                // our reference to that texture info, but reuse the billboard.
                glyph.textureInfo = undefined;
            }
        } else {
            // create a glyph object
            glyph = new Glyph();
            glyphs[textIndex] = glyph;
        }

        glyph.textureInfo = glyphTextureInfo;
        glyph.dimensions = glyphTextureInfo.dimensions;
        // console.timeEnd('jsonid');
        // console.time('other');
        // if we have a texture, configure the existing billboard, or obtain one
        if (glyphTextureInfo.index !== -1) {
            let billboard = glyph.billboard;
            const spareBillboards = labelCollection._spareBillboards;
            if (!defined(billboard)) {
                if (spareBillboards.length > 0) {
                    billboard = spareBillboards.pop();
                } else {
                    billboard = labelCollection._billboardCollection.add({
                        collection : labelCollection
                    });
                    billboard._labelDimensions = new Cartesian2();
                    billboard._labelTranslate = new Cartesian2();
                }
                glyph.billboard = billboard;
            }

            billboard.show = label._show;
            billboard.position = label._position;
            billboard.eyeOffset = label._eyeOffset;
            billboard.pixelOffset = label._pixelOffset;
            billboard.horizontalOrigin = HorizontalOrigin.LEFT;
            billboard.verticalOrigin = label._verticalOrigin;
            billboard.heightReference = label._heightReference;
            billboard.scale = label.totalScale;
            billboard.pickPrimitive = label;
            billboard.id = label._id;
            billboard.image = id;
            billboard.translucencyByDistance = label._translucencyByDistance;
            billboard.pixelOffsetScaleByDistance = label._pixelOffsetScaleByDistance;
            billboard.scaleByDistance = label._scaleByDistance;
            billboard.distanceDisplayCondition = label._distanceDisplayCondition;
            billboard.disableDepthTestDistance = label._disableDepthTestDistance;
            billboard._batchIndex = label._batchIndex;
            billboard.outlineColor = label.outlineColor;
            if (label.style === LabelStyle.FILL_AND_OUTLINE) {
                billboard.color = label._fillColor;
                billboard.outlineWidth = label.outlineWidth;
            } else if (label.style === LabelStyle.FILL) {
                billboard.color = label._fillColor;
                billboard.outlineWidth = 0.0;
            } else if (label.style === LabelStyle.OUTLINE) {
                billboard.color = Color.TRANSPARENT;
                billboard.outlineWidth = label.outlineWidth;
            }

            /*************新增开始**************/
            // billboard.rotation  = label._rotation;
            /*************新增结束**************/
        }
    }
    // changing glyphs will cause the position of the
    // glyphs to change, since different characters have different widths
    label._repositionAllGlyphs = true;
}

function calculateWidthOffset(lineWidth, horizontalOrigin, backgroundPadding) {
    if (horizontalOrigin === HorizontalOrigin.CENTER) {
        return -lineWidth / 2;
    } else if (horizontalOrigin === HorizontalOrigin.RIGHT) {
        return -(lineWidth + backgroundPadding.x);
    }
    return backgroundPadding.x;
}

// reusable Cartesian2 instances
const glyphPixelOffset = new Cartesian2();
const scratchBackgroundPadding = new Cartesian2();

function repositionAllGlyphs(label) {
    const glyphs = label._glyphs;
    const text = label._renderedText;
    let glyph;
    let dimensions;
    let lastLineWidth = 0;
    let maxLineWidth = 0;
    const lineWidths = [];
    let maxGlyphDescent = Number.NEGATIVE_INFINITY;
    let maxGlyphY = 0;
    let numberOfLines = 1;
    let glyphIndex;
    const glyphLength = glyphs.length;

    const backgroundBillboard = label._backgroundBillboard;
    const backgroundPadding = Cartesian2.clone(
        defined(backgroundBillboard) ? label._backgroundPadding : Cartesian2.ZERO,
        scratchBackgroundPadding
    );

    // We need to scale the background padding, which is specified in pixels by the inverse of the relative size so it is scaled properly.
    backgroundPadding.x /= label._relativeSize;
    backgroundPadding.y /= label._relativeSize;

    for (glyphIndex = 0; glyphIndex < glyphLength; ++glyphIndex) {
        if (text.charAt(glyphIndex) === "\n") {
            lineWidths.push(lastLineWidth);
            ++numberOfLines;
            lastLineWidth = 0;
        } else {
            glyph = glyphs[glyphIndex];
            dimensions = glyph.dimensions;
            maxGlyphY = Math.max(maxGlyphY, dimensions.height - dimensions.descent);
            maxGlyphDescent = Math.max(maxGlyphDescent, dimensions.descent);

            //Computing the line width must also account for the kerning that occurs between letters.
            lastLineWidth += dimensions.width - dimensions.minx;
            if (glyphIndex < glyphLength - 1) {
                lastLineWidth += glyphs[glyphIndex + 1].dimensions.minx;
            }
            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);
        }
    }
    lineWidths.push(lastLineWidth);
    const maxLineHeight = maxGlyphY + maxGlyphDescent;

    const scale = label.totalScale;
    const horizontalOrigin = label._horizontalOrigin;
    const verticalOrigin = label._verticalOrigin;
    let lineIndex = 0;
    let lineWidth = lineWidths[lineIndex];
    let widthOffset = calculateWidthOffset(
        lineWidth,
        horizontalOrigin,
        backgroundPadding
    );
    const lineSpacing =
        (defined(label._lineHeight)
            ? label._lineHeight
            : defaultLineSpacingPercent * label._fontSize) / label._relativeSize;
    const otherLinesHeight = lineSpacing * (numberOfLines - 1);
    let totalLineWidth = maxLineWidth;
    let totalLineHeight = maxLineHeight + otherLinesHeight;

    glyphPixelOffset.x = widthOffset * scale;
    glyphPixelOffset.y = 0;

    let firstCharOfLine = true;

    let lineOffsetY = 0;
    for (glyphIndex = 0; glyphIndex < glyphLength; ++glyphIndex) {
        if (text.charAt(glyphIndex) === ' ') {
            ++lineIndex;
            lineOffsetY += lineSpacing;
            lineWidth = lineWidths[lineIndex];
            widthOffset = calculateWidthOffset(
                lineWidth,
                horizontalOrigin,
                backgroundPadding
            );
            glyphPixelOffset.x = widthOffset * scale;
            firstCharOfLine = true;
        } else {
            glyph = glyphs[glyphIndex];
            dimensions = glyph.dimensions;
            if (verticalOrigin === VerticalOrigin.TOP) {
                glyphPixelOffset.y = dimensions.height - maxGlyphY - backgroundPadding.y;
                glyphPixelOffset.y += SDFSettings.PADDING;
            } else if (verticalOrigin === VerticalOrigin.CENTER) {
                glyphPixelOffset.y = (otherLinesHeight + dimensions.height - maxGlyphY) / 2;
            } else if (verticalOrigin === VerticalOrigin.BASELINE) {
                glyphPixelOffset.y = otherLinesHeight;
                glyphPixelOffset.y -= SDFSettings.PADDING;
            } else {
                // VerticalOrigin.BOTTOM
                glyphPixelOffset.y = otherLinesHeight + maxGlyphDescent + backgroundPadding.y;
                glyphPixelOffset.y -= SDFSettings.PADDING;
            }
            glyphPixelOffset.y = (glyphPixelOffset.y - dimensions.descent - lineOffsetY) * scale;

            // Handle any offsets for the first character of the line since the bounds might not be right on the bottom left pixel.
            if (firstCharOfLine)
            {
                glyphPixelOffset.x -= SDFSettings.PADDING * scale;
                firstCharOfLine = false;
            }

            if (defined(glyph.billboard)) {
                glyph.billboard._setTranslate(glyphPixelOffset);
                glyph.billboard._labelDimensions.x = totalLineWidth;
                glyph.billboard._labelDimensions.y = totalLineHeight;
                glyph.billboard._labelHorizontalOrigin = horizontalOrigin;
            }

            //Compute the next x offset taking into account the kerning performed
            //on both the current letter as well as the next letter to be drawn
            //as well as any applied scale.
            if (glyphIndex < glyphLength - 1) {
                const nextGlyph = glyphs[glyphIndex + 1];
                glyphPixelOffset.x +=
                    (dimensions.width - dimensions.minx + nextGlyph.dimensions.minx) *
                    scale;
            }
        }
    }

    if (defined(backgroundBillboard) && (text.split(' ').join('').length > 0)) {
        if (horizontalOrigin === HorizontalOrigin.CENTER) {
            widthOffset = -maxLineWidth / 2 - backgroundPadding.x;
        } else if (horizontalOrigin === HorizontalOrigin.RIGHT) {
            widthOffset = -(maxLineWidth + backgroundPadding.x * 2);
        } else {
            widthOffset = 0;
        }
        glyphPixelOffset.x = widthOffset * scale;

        if (verticalOrigin === VerticalOrigin.TOP) {
            glyphPixelOffset.y = maxLineHeight - maxGlyphY - maxGlyphDescent;
        } else if (verticalOrigin === VerticalOrigin.CENTER) {
            glyphPixelOffset.y = (maxLineHeight - maxGlyphY) / 2 - maxGlyphDescent;
        } else if (verticalOrigin === VerticalOrigin.BASELINE) {
            glyphPixelOffset.y = -backgroundPadding.y - maxGlyphDescent;
        } else {
            // VerticalOrigin.BOTTOM
            glyphPixelOffset.y = 0;
        }
        glyphPixelOffset.y = glyphPixelOffset.y * scale;

        backgroundBillboard.width = totalLineWidth;
        backgroundBillboard.height = totalLineHeight;
        backgroundBillboard._setTranslate(glyphPixelOffset);
        backgroundBillboard._labelTranslate = Cartesian2.clone(
            glyphPixelOffset,
            backgroundBillboard._labelTranslate
        );
    }

    //存起来用于计算避让box
    label.totalWidth = totalLineWidth*scale;
    label.totalHeight = totalLineHeight*scale;

    if (label.heightReference === HeightReference.CLAMP_TO_GROUND) {
        for (glyphIndex = 0; glyphIndex < glyphLength; ++glyphIndex) {
            glyph = glyphs[glyphIndex];
            const billboard = glyph.billboard;
            if (defined(billboard)) {
                billboard._labelTranslate = Cartesian2.clone(
                    glyphPixelOffset,
                    billboard._labelTranslate
                );
            }
        }
    }
}

function destroyLabel(labelCollection, label) {
    const glyphs = label._glyphs;
    for (let i = 0, len = glyphs.length; i < len; ++i) {
        unbindGlyph(labelCollection, glyphs[i]);
    }
    if (defined(label._backgroundBillboard)) {
        labelCollection._backgroundBillboardCollection.remove(
            label._backgroundBillboard
        );
        label._backgroundBillboard = undefined;
    }
    label._labelCollection = undefined;

    if (defined(label._removeCallbackFunc)) {
        label._removeCallbackFunc();
    }

    destroyObject(label);
}


class LabelCollectionExt extends LabelCollection{
    constructor(options) {
        super(options);

        this._backgroundBillboardCollection = new BillboardCollection({
            scene : this._scene
        });
        this._backgroundBillboardCollection.destroyTextureAtlas = false;

        this._billboardCollection = new BillboardCollection({
            scene : this._scene,
            batchTable : this._batchTable,
            enuEnabled :options.enuEnabled
        });
        this._billboardCollection.destroyTextureAtlas = false;
        this._billboardCollection._sdf = true;
    }

    setGlyphs(mapboxGlyphs){
        this.mapboxGlyphs = mapboxGlyphs;
    }

    update(frameState){
        if(!this.mapboxGlyphs){
            return;
        }

        if (!this.show) {
            return;
        }

        const billboardCollection = this._billboardCollection;
        const backgroundBillboardCollection = this._backgroundBillboardCollection;

        billboardCollection.modelMatrix = this.modelMatrix;
        billboardCollection.debugShowBoundingVolume = this.debugShowBoundingVolume;
        backgroundBillboardCollection.modelMatrix = this.modelMatrix;
        backgroundBillboardCollection.debugShowBoundingVolume = this.debugShowBoundingVolume;

        const context = frameState.context;

        if (!defined(this._textureAtlas)) {
            this._textureAtlas = new TextureAtlas({
                context: context,
            });
            billboardCollection.textureAtlas = this._textureAtlas;
        }

        if (!defined(this._backgroundTextureAtlas)) {
            this._backgroundTextureAtlas = new TextureAtlas({
                context: context,
                initialSize: whitePixelSize,
            });
            backgroundBillboardCollection.textureAtlas = this._backgroundTextureAtlas;
            addWhitePixelCanvas(this._backgroundTextureAtlas);
        }

        const len = this._labelsToUpdate.length;
        for (let i = 0; i < len; ++i) {
            const label = this._labelsToUpdate[i];
            if (label.isDestroyed()) {
                continue;
            }

            const preUpdateGlyphCount = label._glyphs.length;

            if (label._rebindAllGlyphs) {
                rebindAllGlyphs(this, label,this.mapboxGlyphs);
                label._rebindAllGlyphs = false;
            }

            if (label._repositionAllGlyphs) {
                repositionAllGlyphs(label);
                label._repositionAllGlyphs = false;
            }

            const glyphCountDifference = label._glyphs.length - preUpdateGlyphCount;
            this._totalGlyphCount += glyphCountDifference;
        }

        const blendOption =
            backgroundBillboardCollection.length > 0
                ? BlendOption.TRANSLUCENT
                : this.blendOption;
        billboardCollection.blendOption = blendOption;
        backgroundBillboardCollection.blendOption = blendOption;

        billboardCollection._highlightColor = this._highlightColor;
        backgroundBillboardCollection._highlightColor = this._highlightColor;

        this._labelsToUpdate.length = 0;
        backgroundBillboardCollection.update(frameState);
        billboardCollection.update(frameState);
    }
}

module.exports = LabelCollectionExt;
},{"../ext/BillboardCollection.js":8,"grapheme-splitter":5}],11:[function(require,module,exports){
/**
 *  使用同一级瓦片贴图
 * Created by user on 2020/3/7.
 */

const Cartesian3 =Cesium.Cartesian3;
const Cartographic =Cesium.Cartographic;
const defaultValue =Cesium.defaultValue;
const defined =Cesium.defined;
const defineProperties =Cesium.defineProperties;
const DeveloperError =Cesium.DeveloperError;
const Event =Cesium.Event;
const getTimestamp =Cesium.getTimestamp;
const CesiumMath =Cesium.Math;
const Matrix4 =Cesium.Matrix4;
const OrthographicFrustum =Cesium.OrthographicFrustum;
const OrthographicOffCenterFrustum =Cesium.OrthographicOffCenterFrustum;
const Ray =Cesium.Ray;
const Rectangle =Cesium.Rectangle;
const Visibility =Cesium.Visibility;
const QuadtreeOccluders =Cesium.QuadtreeOccluders;
const QuadtreeTile =Cesium.QuadtreeTile;
const QuadtreeTileLoadState =Cesium.QuadtreeTileLoadState;
const SceneMode =Cesium.SceneMode;
const TileReplacementQueue =Cesium.TileReplacementQueue;
const TileSelectionResult =Cesium.TileSelectionResult;
const QuadtreePrimitive = Cesium.QuadtreePrimitive;

var comparisonPoint;
var centerScratch = new Cartographic();
function compareDistanceToPoint(a, b) {
    var center = Rectangle.center(a.rectangle, centerScratch);
    var alon = center.longitude - comparisonPoint.longitude;
    var alat = center.latitude - comparisonPoint.latitude;

    center = Rectangle.center(b.rectangle, centerScratch);
    var blon = center.longitude - comparisonPoint.longitude;
    var blat = center.latitude - comparisonPoint.latitude;

    return (alon * alon + alat * alat) - (blon * blon + blat * blat);
}

var cameraOriginScratch = new Cartesian3();
var rootTraversalDetails = [];

function selectTilesForRendering(primitive, frameState) {
    var debug = primitive._debug;
    if (debug.suspendLodUpdate) {
        return;
    }

    // Clear the render list.
    var tilesToRender = primitive._tilesToRender;
    tilesToRender.length = 0;

    // We can't render anything before the level zero tiles exist.
    var i;
    var tileProvider = primitive._tileProvider;
    if (!defined(primitive._levelZeroTiles)) {
        if (tileProvider.ready) {
            var tilingScheme = tileProvider.tilingScheme;
            primitive._levelZeroTiles = QuadtreeTile.createLevelZeroTiles(tilingScheme);
            var numberOfRootTiles = primitive._levelZeroTiles.length;
            if (rootTraversalDetails.length < numberOfRootTiles) {
                rootTraversalDetails = new Array(numberOfRootTiles);
                for (i = 0; i < numberOfRootTiles; ++i) {
                    if (rootTraversalDetails[i] === undefined) {
                        rootTraversalDetails[i] = new TraversalDetails();
                    }
                }
            }
        } else {
            // Nothing to do until the provider is ready.
            return;
        }
    }

    primitive._occluders.ellipsoid.cameraPosition = frameState.camera.positionWC;

    var tile;
    var levelZeroTiles = primitive._levelZeroTiles;
    var occluders = levelZeroTiles.length > 1 ? primitive._occluders : undefined;

    // Sort the level zero tiles by the distance from the center to the camera.
    // The level zero tiles aren't necessarily a nice neat quad, so we can't use the
    // quadtree ordering we use elsewhere in the tree
    comparisonPoint = frameState.camera.positionCartographic;
    levelZeroTiles.sort(compareDistanceToPoint);

    var customDataAdded = primitive._addHeightCallbacks;
    var customDataRemoved = primitive._removeHeightCallbacks;
    var frameNumber = frameState.frameNumber;

    var len;
    if (customDataAdded.length > 0 || customDataRemoved.length > 0) {
        for (i = 0, len = levelZeroTiles.length; i < len; ++i) {
            tile = levelZeroTiles[i];
            tile._updateCustomData(frameNumber, customDataAdded, customDataRemoved);
        }

        customDataAdded.length = 0;
        customDataRemoved.length = 0;
    }

    var camera = frameState.camera;

    primitive._cameraPositionCartographic = camera.positionCartographic;
    var cameraFrameOrigin = Matrix4.getTranslation(camera.transform, cameraOriginScratch);
    primitive._cameraReferenceFrameOriginCartographic = primitive.tileProvider.tilingScheme.ellipsoid.cartesianToCartographic(cameraFrameOrigin, primitive._cameraReferenceFrameOriginCartographic);

    // Traverse in depth-first, near-to-far order.
    for (i = 0, len = levelZeroTiles.length; i < len; ++i) {
        tile = levelZeroTiles[i];
        primitive._tileReplacementQueue.markTileRendered(tile);
        if (!tile.renderable) {
            queueTileLoad(primitive, primitive._tileLoadQueueHigh, tile, frameState);
            ++debug.tilesWaitingForChildren;
        } else {
            visitIfVisible(primitive, tile, tileProvider, frameState, occluders, false, rootTraversalDetails[i]);
        }
    }

    primitive._lastSelectionFrameNumber = frameNumber;
}

function queueTileLoad(primitive, queue, tile, frameState) {
    if (!tile.needsLoading) {
        return;
    }

    if (primitive.tileProvider.computeTileLoadPriority !== undefined) {
        tile._loadPriority = primitive.tileProvider.computeTileLoadPriority(tile, frameState);
    }
    queue.push(tile);
}

/**
 * Tracks details of traversing a tile while selecting tiles for rendering.
 * @alias TraversalDetails
 * @constructor
 * @private
 */
function TraversalDetails() {
    /**
     * True if all selected (i.e. not culled or refined) tiles in this tile's subtree
     * are renderable. If the subtree is renderable, we'll render it; no drama.
     */
    this.allAreRenderable = true;

    /**
     * True if any tiles in this tile's subtree were rendered last frame. If any
     * were, we must render the subtree rather than this tile, because rendering
     * this tile would cause detail to vanish that was visible last frame, and
     * that's no good.
     */
    this.anyWereRenderedLastFrame = false;

    /**
     * Counts the number of selected tiles in this tile's subtree that are
     * not yet ready to be rendered because they need more loading. Note that
     * this value will _not_ necessarily be zero when
     * {@link TraversalDetails#allAreRenderable} is true, for subtle reasons.
     * When {@link TraversalDetails#allAreRenderable} and
     * {@link TraversalDetails#anyWereRenderedLastFrame} are both false, we
     * will render this tile instead of any tiles in its subtree and
     * the `allAreRenderable` value for this tile will reflect only whether _this_
     * tile is renderable. The `notYetRenderableCount` value, however, will still
     * reflect the total number of tiles that we are waiting on, including the
     * ones that we're not rendering. `notYetRenderableCount` is only reset
     * when a subtree is removed from the render queue because the
     * `notYetRenderableCount` exceeds the
     * {@link QuadtreePrimitive#loadingDescendantLimit}.
     */
    this.notYetRenderableCount = 0;
}

function TraversalQuadDetails() {
    this.southwest = new TraversalDetails();
    this.southeast = new TraversalDetails();
    this.northwest = new TraversalDetails();
    this.northeast = new TraversalDetails();
}

TraversalQuadDetails.prototype.combine = function(result) {
    var southwest = this.southwest;
    var southeast = this.southeast;
    var northwest = this.northwest;
    var northeast = this.northeast;

    result.allAreRenderable = southwest.allAreRenderable && southeast.allAreRenderable && northwest.allAreRenderable && northeast.allAreRenderable;
    result.anyWereRenderedLastFrame = southwest.anyWereRenderedLastFrame || southeast.anyWereRenderedLastFrame || northwest.anyWereRenderedLastFrame || northeast.anyWereRenderedLastFrame;
    result.notYetRenderableCount = southwest.notYetRenderableCount + southeast.notYetRenderableCount + northwest.notYetRenderableCount + northeast.notYetRenderableCount;
};

var traversalQuadsByLevel = new Array(31); // level 30 tiles are ~2cm wide at the equator, should be good enough.
for (var i = 0; i < traversalQuadsByLevel.length; ++i) {
    traversalQuadsByLevel[i] = new TraversalQuadDetails();
}

function altitudeToZoom(altitude) {
    var A = 40487.57;
    var B = 0.00007096758;
    var C = 91610.74;
    var D = -40467.74;

    return Math.round(D+(A-D)/(1+Math.pow(altitude/C, B)));
}

/**
 * Visits a tile for possible rendering. When we call this function with a tile:
 *
 *    * the tile has been determined to be visible (possibly based on a bounding volume that is not very tight-fitting)
 *    * its parent tile does _not_ meet the SSE (unless ancestorMeetsSse=true, see comments below)
 *    * the tile may or may not be renderable
 *
 * @private
 *
 * @param {Primitive} primitive The QuadtreePrimitive.
 * @param {FrameState} frameState The frame state.
 * @param {QuadtreeTile} tile The tile to visit
 * @param {Boolean} ancestorMeetsSse True if a tile higher in the tile tree already met the SSE and we're refining further only
 *                  to maintain detail while that higher tile loads.
 * @param {TraversalDetails} traveralDetails On return, populated with details of how the traversal of this tile went.
 */
function visitTile(primitive, frameState, tile, ancestorMeetsSse, traversalDetails) {
    var debug = primitive._debug;

    ++debug.tilesVisited;

    primitive._tileReplacementQueue.markTileRendered(tile);
    tile._updateCustomData(frameState.frameNumber);

    if (tile.level > debug.maxDepthVisited) {
        debug.maxDepthVisited = tile.level;
    }

    // var meetsSse = screenSpaceError(primitive, frameState, tile) < primitive.maximumScreenSpaceError;

    if (frameState.mode === SceneMode.SCENE2D || frameState.camera.frustum instanceof OrthographicFrustum || frameState.camera.frustum instanceof OrthographicOffCenterFrustum) {
        return screenSpaceError2D(primitive, frameState, tile);
    }
    var meetsSse = screenSpaceError(primitive, frameState, tile) < primitive.maximumScreenSpaceError ;
    // var meetsSse = tile.level ==  altitudeToZoom(frameState.camera.positionCartographic.height);
    var southwestChild = tile.southwestChild;
    var southeastChild = tile.southeastChild;
    var northwestChild = tile.northwestChild;
    var northeastChild = tile.northeastChild;

    var lastFrame = primitive._lastSelectionFrameNumber;
    var lastFrameSelectionResult = tile._lastSelectionResultFrame === lastFrame ? tile._lastSelectionResult : TileSelectionResult.NONE;

    var tileProvider = primitive.tileProvider;

    if (meetsSse || ancestorMeetsSse) {
        // This tile (or an ancestor) is the one we want to render this frame, but we'll do different things depending
        // on the state of this tile and on what we did _last_ frame.

        // We can render it if _any_ of the following are true:
        // 1. We rendered it (or kicked it) last frame.
        // 2. This tile was culled last frame, or it wasn't even visited because an ancestor was culled.
        // 3. The tile is completely done loading.
        // 4. a) Terrain is ready, and
        //    b) All necessary imagery is ready. Necessary imagery is imagery that was rendered with this tile
        //       or any descendants last frame. Such imagery is required because rendering this tile without
        //       it would cause detail to disappear.
        //
        // Determining condition 4 is more expensive, so we check the others first.
        //
        // Note that even if we decide to render a tile here, it may later get "kicked" in favor of an ancestor.

        var oneRenderedLastFrame = TileSelectionResult.originalResult(lastFrameSelectionResult) === TileSelectionResult.RENDERED;
        var twoCulledOrNotVisited = TileSelectionResult.originalResult(lastFrameSelectionResult) === TileSelectionResult.CULLED || lastFrameSelectionResult === TileSelectionResult.NONE;
        var threeCompletelyLoaded = tile.state === QuadtreeTileLoadState.DONE;

        var renderable = oneRenderedLastFrame || twoCulledOrNotVisited || threeCompletelyLoaded;

        if (!renderable) {
            // Check the more expensive condition 4 above. This requires details of the thing
            // we're rendering (e.g. the globe surface), so delegate it to the tile provider.
            if (defined(tileProvider.canRenderWithoutLosingDetail)) {
                renderable = tileProvider.canRenderWithoutLosingDetail(tile);
            }
        }

        if (renderable) {
            // Only load this tile if it (not just an ancestor) meets the SSE.
            if (meetsSse) {
                queueTileLoad(primitive, primitive._tileLoadQueueMedium, tile, frameState);
            }
            addTileToRenderList(primitive, tile);

            traversalDetails.allAreRenderable = tile.renderable;
            traversalDetails.anyWereRenderedLastFrame = lastFrameSelectionResult === TileSelectionResult.RENDERED;
            traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;

            tile._lastSelectionResultFrame = frameState.frameNumber;
            tile._lastSelectionResult = TileSelectionResult.RENDERED;

            if (!traversalDetails.anyWereRenderedLastFrame) {
                // Tile is newly-rendered this frame, so update its heights.
                primitive._tileToUpdateHeights.push(tile);
            }

            return;
        }

        // Otherwise, we can't render this tile (or its fill) because doing so would cause detail to disappear
        // that was visible last frame. Instead, keep rendering any still-visible descendants that were rendered
        // last frame and render fills for newly-visible descendants. E.g. if we were rendering level 15 last
        // frame but this frame we want level 14 and the closest renderable level <= 14 is 0, rendering level
        // zero would be pretty jarring so instead we keep rendering level 15 even though its SSE is better
        // than required. So fall through to continue traversal...
        ancestorMeetsSse = true;

        // Load this blocker tile with high priority, but only if this tile (not just an ancestor) meets the SSE.
        if (meetsSse) {
            queueTileLoad(primitive, primitive._tileLoadQueueHigh, tile, frameState);
        }
    }

    if (tileProvider.canRefine(tile)) {
        var allAreUpsampled = southwestChild.upsampledFromParent && southeastChild.upsampledFromParent &&
            northwestChild.upsampledFromParent && northeastChild.upsampledFromParent;

        if (allAreUpsampled) {
            // No point in rendering the children because they're all upsampled.  Render this tile instead.
            addTileToRenderList(primitive, tile);

            // Rendered tile that's not waiting on children loads with medium priority.
            queueTileLoad(primitive, primitive._tileLoadQueueMedium, tile, frameState);

            // Make sure we don't unload the children and forget they're upsampled.
            primitive._tileReplacementQueue.markTileRendered(southwestChild);
            primitive._tileReplacementQueue.markTileRendered(southeastChild);
            primitive._tileReplacementQueue.markTileRendered(northwestChild);
            primitive._tileReplacementQueue.markTileRendered(northeastChild);

            traversalDetails.allAreRenderable = tile.renderable;
            traversalDetails.anyWereRenderedLastFrame = lastFrameSelectionResult === TileSelectionResult.RENDERED;
            traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;

            tile._lastSelectionResultFrame = frameState.frameNumber;
            tile._lastSelectionResult = TileSelectionResult.RENDERED;

            if (!traversalDetails.anyWereRenderedLastFrame) {
                // Tile is newly-rendered this frame, so update its heights.
                primitive._tileToUpdateHeights.push(tile);
            }

            return;
        }

        // SSE is not good enough, so refine.
        tile._lastSelectionResultFrame = frameState.frameNumber;
        tile._lastSelectionResult = TileSelectionResult.REFINED;

        var firstRenderedDescendantIndex = primitive._tilesToRender.length;
        var loadIndexLow = primitive._tileLoadQueueLow.length;
        var loadIndexMedium = primitive._tileLoadQueueMedium.length;
        var loadIndexHigh = primitive._tileLoadQueueHigh.length;
        var tilesToUpdateHeightsIndex = primitive._tileToUpdateHeights.length;

        // No need to add the children to the load queue because they'll be added (if necessary) when they're visited.
        visitVisibleChildrenNearToFar(primitive, southwestChild, southeastChild, northwestChild, northeastChild, frameState, ancestorMeetsSse, traversalDetails);

        // If no descendant tiles were added to the render list by the function above, it means they were all
        // culled even though this tile was deemed visible. That's pretty common.

        if (firstRenderedDescendantIndex !== primitive._tilesToRender.length) {
            // At least one descendant tile was added to the render list.
            // The traversalDetails tell us what happened while visiting the children.

            var allAreRenderable = traversalDetails.allAreRenderable;
            var anyWereRenderedLastFrame = traversalDetails.anyWereRenderedLastFrame;
            var notYetRenderableCount = traversalDetails.notYetRenderableCount;
            var queuedForLoad = false;

            if (!allAreRenderable && !anyWereRenderedLastFrame) {
                // Some of our descendants aren't ready to render yet, and none were rendered last frame,
                // so kick them all out of the render list and render this tile instead. Continue to load them though!

                // Mark the rendered descendants and their ancestors - up to this tile - as kicked.
                var renderList = primitive._tilesToRender;
                for (var i = firstRenderedDescendantIndex; i < renderList.length; ++i) {
                    var workTile = renderList[i];
                    while (workTile !== undefined && workTile._lastSelectionResult !== TileSelectionResult.KICKED && workTile !== tile) {
                        workTile._lastSelectionResult = TileSelectionResult.kick(workTile._lastSelectionResult);
                        workTile = workTile.parent;
                    }
                }

                // Remove all descendants from the render list and add this tile.
                primitive._tilesToRender.length = firstRenderedDescendantIndex;
                primitive._tileToUpdateHeights.length = tilesToUpdateHeightsIndex;
                addTileToRenderList(primitive, tile);

                tile._lastSelectionResult = TileSelectionResult.RENDERED;

                // If we're waiting on heaps of descendants, the above will take too long. So in that case,
                // load this tile INSTEAD of loading any of the descendants, and tell the up-level we're only waiting
                // on this tile. Keep doing this until we actually manage to render this tile.
                var wasRenderedLastFrame = lastFrameSelectionResult === TileSelectionResult.RENDERED;
                if (!wasRenderedLastFrame && notYetRenderableCount > primitive.loadingDescendantLimit) {
                    // Remove all descendants from the load queues.
                    primitive._tileLoadQueueLow.length = loadIndexLow;
                    primitive._tileLoadQueueMedium.length = loadIndexMedium;
                    primitive._tileLoadQueueHigh.length = loadIndexHigh;
                    queueTileLoad(primitive, primitive._tileLoadQueueMedium, tile, frameState);
                    traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;
                    queuedForLoad = true;
                }

                traversalDetails.allAreRenderable = tile.renderable;
                traversalDetails.anyWereRenderedLastFrame = wasRenderedLastFrame;

                if (!wasRenderedLastFrame) {
                    // Tile is newly-rendered this frame, so update its heights.
                    primitive._tileToUpdateHeights.push(tile);
                }

                ++debug.tilesWaitingForChildren;
            }

            if (primitive.preloadAncestors && !queuedForLoad) {
                queueTileLoad(primitive, primitive._tileLoadQueueLow, tile, frameState);
            }
        }

        return;
    }

    tile._lastSelectionResultFrame = frameState.frameNumber;
    tile._lastSelectionResult = TileSelectionResult.RENDERED;

    // We'd like to refine but can't because we have no availability data for this tile's children,
    // so we have no idea if refinining would involve a load or an upsample. We'll have to finish
    // loading this tile first in order to find that out, so load this refinement blocker with
    // high priority.
    addTileToRenderList(primitive, tile);
    queueTileLoad(primitive, primitive._tileLoadQueueHigh, tile, frameState);

    traversalDetails.allAreRenderable = tile.renderable;
    traversalDetails.anyWereRenderedLastFrame = lastFrameSelectionResult === TileSelectionResult.RENDERED;
    traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;
}

function visitVisibleChildrenNearToFar(primitive, southwest, southeast, northwest, northeast, frameState, ancestorMeetsSse, traversalDetails) {
    var cameraPosition = frameState.camera.positionCartographic;
    var tileProvider = primitive._tileProvider;
    var occluders = primitive._occluders;

    var quadDetails = traversalQuadsByLevel[southwest.level];
    var southwestDetails = quadDetails.southwest;
    var southeastDetails = quadDetails.southeast;
    var northwestDetails = quadDetails.northwest;
    var northeastDetails = quadDetails.northeast;

    if (cameraPosition.longitude < southwest.rectangle.east) {
        if (cameraPosition.latitude < southwest.rectangle.north) {
            // Camera in southwest quadrant
            visitIfVisible(primitive, southwest, tileProvider, frameState, occluders, ancestorMeetsSse, southwestDetails);
            visitIfVisible(primitive, southeast, tileProvider, frameState, occluders, ancestorMeetsSse, southeastDetails);
            visitIfVisible(primitive, northwest, tileProvider, frameState, occluders, ancestorMeetsSse, northwestDetails);
            visitIfVisible(primitive, northeast, tileProvider, frameState, occluders, ancestorMeetsSse, northeastDetails);
        } else {
            // Camera in northwest quadrant
            visitIfVisible(primitive, northwest, tileProvider, frameState, occluders, ancestorMeetsSse, northwestDetails);
            visitIfVisible(primitive, southwest, tileProvider, frameState, occluders, ancestorMeetsSse, southwestDetails);
            visitIfVisible(primitive, northeast, tileProvider, frameState, occluders, ancestorMeetsSse, northeastDetails);
            visitIfVisible(primitive, southeast, tileProvider, frameState, occluders, ancestorMeetsSse, southeastDetails);
        }
    } else if (cameraPosition.latitude < southwest.rectangle.north) {
        // Camera southeast quadrant
        visitIfVisible(primitive, southeast, tileProvider, frameState, occluders, ancestorMeetsSse, southeastDetails);
        visitIfVisible(primitive, southwest, tileProvider, frameState, occluders, ancestorMeetsSse, southwestDetails);
        visitIfVisible(primitive, northeast, tileProvider, frameState, occluders, ancestorMeetsSse, northeastDetails);
        visitIfVisible(primitive, northwest, tileProvider, frameState, occluders, ancestorMeetsSse, northwestDetails);
    } else {
        // Camera in northeast quadrant
        visitIfVisible(primitive, northeast, tileProvider, frameState, occluders, ancestorMeetsSse, northeastDetails);
        visitIfVisible(primitive, northwest, tileProvider, frameState, occluders, ancestorMeetsSse, northwestDetails);
        visitIfVisible(primitive, southeast, tileProvider, frameState, occluders, ancestorMeetsSse, southeastDetails);
        visitIfVisible(primitive, southwest, tileProvider, frameState, occluders, ancestorMeetsSse, southwestDetails);
    }

    quadDetails.combine(traversalDetails);
}

function containsNeededPosition(primitive, tile) {
    var rectangle = tile.rectangle;
    return (defined(primitive._cameraPositionCartographic) && Rectangle.contains(rectangle, primitive._cameraPositionCartographic)) ||
        (defined(primitive._cameraReferenceFrameOriginCartographic) && Rectangle.contains(rectangle, primitive._cameraReferenceFrameOriginCartographic));
}

function visitIfVisible(primitive, tile, tileProvider, frameState, occluders, ancestorMeetsSse, traversalDetails) {
    if (tileProvider.computeTileVisibility(tile, frameState, occluders) !== Visibility.NONE) {
        return visitTile(primitive, frameState, tile, ancestorMeetsSse, traversalDetails);
    }

    ++primitive._debug.tilesCulled;
    primitive._tileReplacementQueue.markTileRendered(tile);

    traversalDetails.allAreRenderable = true;
    traversalDetails.anyWereRenderedLastFrame = false;
    traversalDetails.notYetRenderableCount = 0;

    if (containsNeededPosition(primitive, tile)) {
        // Load the tile(s) that contains the camera's position and
        // the origin of its reference frame with medium priority.
        // But we only need to load until the terrain is available, no need to load imagery.
        if (!defined(tile.data) || !defined(tile.data.vertexArray)) {
            queueTileLoad(primitive, primitive._tileLoadQueueMedium, tile, frameState);
        }

        var lastFrame = primitive._lastSelectionFrameNumber;
        var lastFrameSelectionResult = tile._lastSelectionResultFrame === lastFrame ? tile._lastSelectionResult : TileSelectionResult.NONE;
        if (lastFrameSelectionResult !== TileSelectionResult.CULLED_BUT_NEEDED && lastFrameSelectionResult !== TileSelectionResult.RENDERED) {
            primitive._tileToUpdateHeights.push(tile);
        }

        tile._lastSelectionResult = TileSelectionResult.CULLED_BUT_NEEDED;
    } else if (primitive.preloadSiblings || tile.level === 0) {
        // Load culled level zero tiles with low priority.
        // For all other levels, only load culled tiles if preloadSiblings is enabled.
        queueTileLoad(primitive, primitive._tileLoadQueueLow, tile, frameState);
        tile._lastSelectionResult = TileSelectionResult.CULLED;
    } else {
        tile._lastSelectionResult = TileSelectionResult.CULLED;
    }

    tile._lastSelectionResultFrame = frameState.frameNumber;
}

function screenSpaceError(primitive, frameState, tile) {
    if (
        frameState.mode === SceneMode.SCENE2D ||
        frameState.camera.frustum instanceof OrthographicFrustum ||
        frameState.camera.frustum instanceof OrthographicOffCenterFrustum
    ) {
        return screenSpaceError2D(primitive, frameState, tile);
    }

    var maxGeometricError = primitive._tileProvider.getLevelMaximumGeometricError(
        tile.level
    );

    var distance = tile._distance;
    var height = frameState.context.drawingBufferHeight;
    var sseDenominator = frameState.camera.frustum.sseDenominator;

    var error = (maxGeometricError * height) / (distance * sseDenominator);

    if (frameState.fog.enabled) {
        error -=
            CesiumMath.fog(distance, frameState.fog.density) * frameState.fog.sse;
    }

    error /= frameState.pixelRatio;

    return error;
}

function screenSpaceError2D(primitive, frameState, tile) {
    var camera = frameState.camera;
    var frustum = camera.frustum;
    if (defined(frustum._offCenterFrustum)) {
        frustum = frustum._offCenterFrustum;
    }

    var context = frameState.context;
    var width = context.drawingBufferWidth;
    var height = context.drawingBufferHeight;

    var maxGeometricError = primitive._tileProvider.getLevelMaximumGeometricError(tile.level);
    var pixelSize = Math.max(frustum.top - frustum.bottom, frustum.right - frustum.left) / Math.max(width, height);
    var error = maxGeometricError / pixelSize;

    if (frameState.fog.enabled && frameState.mode !== SceneMode.SCENE2D) {
        error -= CesiumMath.fog(tile._distance, frameState.fog.density) * frameState.fog.sse;
    }

    error /= frameState.pixelRatio;

    return error;
}

function addTileToRenderList(primitive, tile) {
    primitive._tilesToRender.push(tile);
}

function processTileLoadQueue(primitive, frameState) {
    var tileLoadQueueHigh = primitive._tileLoadQueueHigh;
    var tileLoadQueueMedium = primitive._tileLoadQueueMedium;
    var tileLoadQueueLow = primitive._tileLoadQueueLow;

    if (tileLoadQueueHigh.length === 0 && tileLoadQueueMedium.length === 0 && tileLoadQueueLow.length === 0) {
        return;
    }

    // Remove any tiles that were not used this frame beyond the number
    // we're allowed to keep.
    primitive._tileReplacementQueue.trimTiles(primitive.tileCacheSize);

    var endTime = getTimestamp() + primitive._loadQueueTimeSlice;
    var tileProvider = primitive._tileProvider;

    var didSomeLoading = processSinglePriorityLoadQueue(primitive, frameState, tileProvider, endTime, tileLoadQueueHigh, false);
    didSomeLoading = processSinglePriorityLoadQueue(primitive, frameState, tileProvider, endTime, tileLoadQueueMedium, didSomeLoading);
    processSinglePriorityLoadQueue(primitive, frameState, tileProvider, endTime, tileLoadQueueLow, didSomeLoading);
}

function sortByLoadPriority(a, b) {
    return a._loadPriority - b._loadPriority;
}

function processSinglePriorityLoadQueue(primitive, frameState, tileProvider, endTime, loadQueue, didSomeLoading) {
    if (tileProvider.computeTileLoadPriority !== undefined) {
        loadQueue.sort(sortByLoadPriority);
    }

    for (var i = 0, len = loadQueue.length; i < len && (getTimestamp() < endTime || !didSomeLoading); ++i) {
        var tile = loadQueue[i];
        primitive._tileReplacementQueue.markTileRendered(tile);
        tileProvider.loadTile(frameState, tile);
        didSomeLoading = true;
    }

    return didSomeLoading;
}

var scratchRay = new Ray();
var scratchCartographic = new Cartographic();
var scratchPosition = new Cartesian3();
var scratchArray = [];

function updateHeights(primitive, frameState) {
    if (!primitive.tileProvider.ready) {
        return;
    }

    var tryNextFrame = scratchArray;
    tryNextFrame.length = 0;
    var tilesToUpdateHeights = primitive._tileToUpdateHeights;
    var terrainProvider = primitive._tileProvider.terrainProvider;

    var startTime = getTimestamp();
    var timeSlice = primitive._updateHeightsTimeSlice;
    var endTime = startTime + timeSlice;

    var mode = frameState.mode;
    var projection = frameState.mapProjection;
    var ellipsoid = primitive.tileProvider.tilingScheme.ellipsoid;
    var i;

    while (tilesToUpdateHeights.length > 0) {
        var tile = tilesToUpdateHeights[0];
        if (!defined(tile.data) || !defined(tile.data.mesh)) {
            // Tile isn't loaded enough yet, so try again next frame if this tile is still
            // being rendered.
            var selectionResult = tile._lastSelectionResultFrame === primitive._lastSelectionFrameNumber
                ? tile._lastSelectionResult
                : TileSelectionResult.NONE;
            if (selectionResult === TileSelectionResult.RENDERED || selectionResult === TileSelectionResult.CULLED_BUT_NEEDED) {
                tryNextFrame.push(tile);
            }
            tilesToUpdateHeights.shift();
            primitive._lastTileIndex = 0;
            continue;
        }
        var customData = tile.customData;
        var customDataLength = customData.length;

        var timeSliceMax = false;
        for (i = primitive._lastTileIndex; i < customDataLength; ++i) {
            var data = customData[i];

            if (tile.level > data.level) {
                if (!defined(data.positionOnEllipsoidSurface)) {
                    // cartesian has to be on the ellipsoid surface for `ellipsoid.geodeticSurfaceNormal`
                    data.positionOnEllipsoidSurface = Cartesian3.fromRadians(data.positionCartographic.longitude, data.positionCartographic.latitude, 0.0, ellipsoid);
                }

                if (mode === SceneMode.SCENE3D) {
                    var surfaceNormal = ellipsoid.geodeticSurfaceNormal(data.positionOnEllipsoidSurface, scratchRay.direction);

                    // compute origin point

                    // Try to find the intersection point between the surface normal and z-axis.
                    // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider
                    var rayOrigin = ellipsoid.getSurfaceNormalIntersectionWithZAxis(data.positionOnEllipsoidSurface, 11500.0, scratchRay.origin);

                    // Theoretically, not with Earth datums, the intersection point can be outside the ellipsoid
                    if (!defined(rayOrigin)) {
                        // intersection point is outside the ellipsoid, try other value
                        // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider
                        var minimumHeight;
                        if (defined(tile.data.tileBoundingRegion)) {
                            minimumHeight = tile.data.tileBoundingRegion.minimumHeight;
                        }
                        var magnitude = Math.min(defaultValue(minimumHeight, 0.0), -11500.0);

                        // multiply by the *positive* value of the magnitude
                        var vectorToMinimumPoint = Cartesian3.multiplyByScalar(surfaceNormal, Math.abs(magnitude) + 1, scratchPosition);
                        Cartesian3.subtract(data.positionOnEllipsoidSurface, vectorToMinimumPoint, scratchRay.origin);
                    }
                } else {
                    Cartographic.clone(data.positionCartographic, scratchCartographic);

                    // minimum height for the terrain set, need to get this information from the terrain provider
                    scratchCartographic.height = -11500.0;
                    projection.project(scratchCartographic, scratchPosition);
                    Cartesian3.fromElements(scratchPosition.z, scratchPosition.x, scratchPosition.y, scratchPosition);
                    Cartesian3.clone(scratchPosition, scratchRay.origin);
                    Cartesian3.clone(Cartesian3.UNIT_X, scratchRay.direction);
                }

                var position = tile.data.pick(scratchRay, mode, projection, false, scratchPosition);
                if (defined(position)) {
                    data.callback(position);
                    data.level = tile.level;
                }
            } else if (tile.level === data.level) {
                var children = tile.children;
                var childrenLength = children.length;

                var child;
                for (var j = 0; j < childrenLength; ++j) {
                    child = children[j];
                    if (Rectangle.contains(child.rectangle, data.positionCartographic)) {
                        break;
                    }
                }

                var tileDataAvailable = terrainProvider.getTileDataAvailable(child.x, child.y, child.level);
                var parentTile = tile.parent;
                if ((defined(tileDataAvailable) && !tileDataAvailable) ||
                    (defined(parentTile) && defined(parentTile.data) && defined(parentTile.data.terrainData) &&
                        !parentTile.data.terrainData.isChildAvailable(parentTile.x, parentTile.y, child.x, child.y))) {
                    data.removeFunc();
                }
            }

            if (getTimestamp() >= endTime) {
                timeSliceMax = true;
                break;
            }
        }

        if (timeSliceMax) {
            primitive._lastTileIndex = i;
            break;
        } else {
            primitive._lastTileIndex = 0;
            tilesToUpdateHeights.shift();
        }
    }
    for (i = 0; i < tryNextFrame.length; i++) {
        tilesToUpdateHeights.push(tryNextFrame[i]);
    }
}

function createRenderCommandsForSelectedTiles(primitive, frameState) {
    var tileProvider = primitive._tileProvider;
    var tilesToRender = primitive._tilesToRender;

    for (var i = 0, len = tilesToRender.length; i < len; ++i) {
        var tile = tilesToRender[i];
        tileProvider.showTileThisFrame(tile, frameState);
    }
}


class QuadtreePrimitiveExt{
    constructor() {
        QuadtreePrimitive.prototype.render = function(frameState) {
            var passes = frameState.passes;
            var tileProvider = this._tileProvider;

            if (passes.render) {
                tileProvider.beginUpdate(frameState);

                selectTilesForRendering(this, frameState);
                createRenderCommandsForSelectedTiles(this, frameState);

                /*************新增开始**************/
                var _imageryLayers = tileProvider._imageryLayers;
                for(var i = 0;i<_imageryLayers.length;i++){
                    var _imageryProvider = _imageryLayers._layers[i]._imageryProvider;
                    if(_imageryProvider.draw){
                        _imageryProvider.draw(this._tilesToRender);
                    }
                }
                /*************新增结束**************/

                tileProvider.endUpdate(frameState);
            }

            if (passes.pick && this._tilesToRender.length > 0) {
                tileProvider.updateForPick(frameState);
            }
        };
    }
}

module.exports = QuadtreePrimitiveExt;
new QuadtreePrimitiveExt();
},{}],12:[function(require,module,exports){
'use strict';
const CustomMap = module.exports = {};


//扩展cesium类
require('./ext/CameraExt');
require('./ext/QuadtreePrimitiveExt');
CustomMap.LabelCollectionExt = require('./ext/LabelCollectionExt');
CustomMap.BillboardCollection = require('./ext/BillboardCollection');
CustomMap.LabelTileServiceImageryProvider = require('./layer/label/LabelTileServiceImageryProvider');

// CustomMap.LabelTileServiceImageryProvider = require('./layer/label/LabelTileServiceImageryProvider');
// CustomMap.ModelTileServiceImageryProvider = require('./layer/model/ModelTileServiceImageryProvider');
CustomMap.ImageTileProvider = require('./layer/image/ImageTileProvider');





},{"./ext/BillboardCollection":8,"./ext/CameraExt":9,"./ext/LabelCollectionExt":10,"./ext/QuadtreePrimitiveExt":11,"./layer/image/ImageTileProvider":13,"./layer/label/LabelTileServiceImageryProvider":16}],13:[function(require,module,exports){
const Color = Cesium.Color;
const defaultValue = Cesium.defaultValue;
const defined = Cesium.defined;
const Event = Cesium.Event;
const GeographicTilingScheme = Cesium.GeographicTilingScheme;
const when = Cesium.when;

/**
 * @typedef {Object} TileCoordinatesImageryProvider.ConstructorOptions
 *
 * Initialization options for the TileCoordinatesImageryProvider constructor
 *
 * @property {TilingScheme} [tilingScheme=new GeographicTilingScheme()] The tiling scheme for which to draw tiles.
 * @property {Ellipsoid} [ellipsoid] The ellipsoid.  If the tilingScheme is specified,
 *                    this parameter is ignored and the tiling scheme's ellipsoid is used instead. If neither
 *                    parameter is specified, the WGS84 ellipsoid is used.
 * @property {Color} [color=Color.YELLOW] The color to draw the tile box and label.
 * @property {Number} [tileWidth=256] The width of the tile for level-of-detail selection purposes.
 * @property {Number} [tileHeight=256] The height of the tile for level-of-detail selection purposes.
 */

/**
 * An {@link ImageryProvider} that draws a box around every rendered tile in the tiling scheme, and draws
 * a label inside it indicating the X, Y, Level coordinates of the tile.  This is mostly useful for
 * debugging terrain and imagery rendering problems.
 *
 * @alias TileCoordinatesImageryProvider
 * @constructor
 *
 * @param {TileCoordinatesImageryProvider.ConstructorOptions} [options] Object describing initialization options
 */
function ImageTileProvider(options) {
  options = defaultValue(options, defaultValue.EMPTY_OBJECT);

  this._tilingScheme = defined(options.tilingScheme)
    ? options.tilingScheme
    : new GeographicTilingScheme({ ellipsoid: options.ellipsoid });
  this._color = defaultValue(options.color, Color.YELLOW);
  this._errorEvent = new Event();
  this._tileWidth = defaultValue(options.tileWidth, 256);
  this._tileHeight = defaultValue(options.tileHeight, 256);
  this._readyPromise = when.resolve(true);
  this.options = options;
  if(this.options.hasOwnProperty('showLevels')){
    this.showLevels = this.options['showLevels'];
    for(let i =0;i<this.showLevels.length;i++){
      this.showLevels[i] = parseInt(this.showLevels[i]);
    }
  }else{
    this.showLevels = [0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,20,21,22,23,24,25,26];
  }

  /**
   * The default alpha blending value of this provider, with 0.0 representing fully transparent and
   * 1.0 representing fully opaque.
   *
   * @type {Number|undefined}
   * @default undefined
   */
  this.defaultAlpha = undefined;

  /**
   * The default alpha blending value on the night side of the globe of this provider, with 0.0 representing fully transparent and
   * 1.0 representing fully opaque.
   *
   * @type {Number|undefined}
   * @default undefined
   */
  this.defaultNightAlpha = undefined;

  /**
   * The default alpha blending value on the day side of the globe of this provider, with 0.0 representing fully transparent and
   * 1.0 representing fully opaque.
   *
   * @type {Number|undefined}
   * @default undefined
   */
  this.defaultDayAlpha = undefined;

  /**
   * The default brightness of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0
   * makes the imagery darker while greater than 1.0 makes it brighter.
   *
   * @type {Number|undefined}
   * @default undefined
   */
  this.defaultBrightness = undefined;

  /**
   * The default contrast of this provider.  1.0 uses the unmodified imagery color.  Less than 1.0 reduces
   * the contrast while greater than 1.0 increases it.
   *
   * @type {Number|undefined}
   * @default undefined
   */
  this.defaultContrast = undefined;

  /**
   * The default hue of this provider in radians. 0.0 uses the unmodified imagery color.
   *
   * @type {Number|undefined}
   * @default undefined
   */
  this.defaultHue = undefined;

  /**
   * The default saturation of this provider. 1.0 uses the unmodified imagery color. Less than 1.0 reduces the
   * saturation while greater than 1.0 increases it.
   *
   * @type {Number|undefined}
   * @default undefined
   */
  this.defaultSaturation = undefined;

  /**
   * The default gamma correction to apply to this provider.  1.0 uses the unmodified imagery color.
   *
   * @type {Number|undefined}
   * @default undefined
   */
  this.defaultGamma = undefined;

  /**
   * The default texture minification filter to apply to this provider.
   *
   * @type {TextureMinificationFilter}
   * @default undefined
   */
  this.defaultMinificationFilter = undefined;

  /**
   * The default texture magnification filter to apply to this provider.
   *
   * @type {TextureMagnificationFilter}
   * @default undefined
   */
  this.defaultMagnificationFilter = undefined;
}

Object.defineProperties(ImageTileProvider.prototype, {
  /**
   * Gets the proxy used by this provider.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Proxy}
   * @readonly
   */
  proxy: {
    get: function () {
      return undefined;
    },
  },

  /**
   * Gets the width of each tile, in pixels. This function should
   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Number}
   * @readonly
   */
  tileWidth: {
    get: function () {
      return this._tileWidth;
    },
  },

  /**
   * Gets the height of each tile, in pixels.  This function should
   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Number}
   * @readonly
   */
  tileHeight: {
    get: function () {
      return this._tileHeight;
    },
  },

  /**
   * Gets the maximum level-of-detail that can be requested.  This function should
   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Number|undefined}
   * @readonly
   */
  maximumLevel: {
    get: function () {
      return undefined;
    },
  },

  /**
   * Gets the minimum level-of-detail that can be requested.  This function should
   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Number}
   * @readonly
   */
  minimumLevel: {
    get: function () {
      return undefined;
    },
  },

  /**
   * Gets the tiling scheme used by this provider.  This function should
   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {TilingScheme}
   * @readonly
   */
  tilingScheme: {
    get: function () {
      return this._tilingScheme;
    },
  },

  /**
   * Gets the rectangle, in radians, of the imagery provided by this instance.  This function should
   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Rectangle}
   * @readonly
   */
  rectangle: {
    get: function () {
      return this._tilingScheme.rectangle;
    },
  },

  /**
   * Gets the tile discard policy.  If not undefined, the discard policy is responsible
   * for filtering out "missing" tiles via its shouldDiscardImage function.  If this function
   * returns undefined, no tiles are filtered.  This function should
   * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {TileDiscardPolicy}
   * @readonly
   */
  tileDiscardPolicy: {
    get: function () {
      return undefined;
    },
  },

  /**
   * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing
   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners
   * are passed an instance of {@link TileProviderError}.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Event}
   * @readonly
   */
  errorEvent: {
    get: function () {
      return this._errorEvent;
    },
  },

  /**
   * Gets a value indicating whether or not the provider is ready for use.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Boolean}
   * @readonly
   */
  ready: {
    get: function () {
      return true;
    },
  },

  /**
   * Gets a promise that resolves to true when the provider is ready for use.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Promise.<Boolean>}
   * @readonly
   */
  readyPromise: {
    get: function () {
      return this._readyPromise;
    },
  },

  /**
   * Gets the credit to display when this imagery provider is active.  Typically this is used to credit
   * the source of the imagery.  This function should not be called before {@link TileCoordinatesImageryProvider#ready} returns true.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Credit}
   * @readonly
   */
  credit: {
    get: function () {
      return undefined;
    },
  },

  /**
   * Gets a value indicating whether or not the images provided by this imagery provider
   * include an alpha channel.  If this property is false, an alpha channel, if present, will
   * be ignored.  If this property is true, any images without an alpha channel will be treated
   * as if their alpha is 1.0 everywhere.  Setting this property to false reduces memory usage
   * and texture upload time.
   * @memberof TileCoordinatesImageryProvider.prototype
   * @type {Boolean}
   * @readonly
   */
  hasAlphaChannel: {
    get: function () {
      return true;
    },
  },
});

/**
 * Gets the credits to be displayed when a given tile is displayed.
 *
 * @param {Number} x The tile X coordinate.
 * @param {Number} y The tile Y coordinate.
 * @param {Number} level The tile level;
 * @returns {Credit[]} The credits to be displayed when the tile is displayed.
 *
 * @exception {DeveloperError} <code>getTileCredits</code> must not be called before the imagery provider is ready.
 */
ImageTileProvider.prototype.getTileCredits = function (
  x,
  y,
  level
) {
  return undefined;
};

/**
 * Requests the image for a given tile.  This function should
 * not be called before {@link TileCoordinatesImageryProvider#ready} returns true.
 *
 * @param {Number} x The tile X coordinate.
 * @param {Number} y The tile Y coordinate.
 * @param {Number} level The tile level.
 * @param {Request} [request] The request object. Intended for internal use only.
 * @returns {Promise.<HTMLImageElement|HTMLCanvasElement>|undefined} A promise for the image that will resolve when the image is available, or
 *          undefined if there are too many active requests to the server, and the request
 *          should be retried later.  The resolved image may be either an
 *          Image or a Canvas DOM object.
 */
ImageTileProvider.prototype.requestImage = function (
  x,
  y,
  level,
  request
) {
  if(this.showLevels.indexOf(level) > -1){
    return this.options.img;
  }else{
    return document.createElement('canvas');
  }
};

/**
 * Picking features is not currently supported by this imagery provider, so this function simply returns
 * undefined.
 *
 * @param {Number} x The tile X coordinate.
 * @param {Number} y The tile Y coordinate.
 * @param {Number} level The tile level.
 * @param {Number} longitude The longitude at which to pick features.
 * @param {Number} latitude  The latitude at which to pick features.
 * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise for the picked features that will resolve when the asynchronous
 *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}
 *                   instances.  The array may be empty if no features are found at the given location.
 *                   It may also be undefined if picking is not supported.
 */
ImageTileProvider.prototype.pickFeatures = function (
  x,
  y,
  level,
  longitude,
  latitude
) {
  return undefined;
};


module.exports = ImageTileProvider;

},{}],14:[function(require,module,exports){
"use strict";
const GAnnoAvoid = require("./avoid/GAnnoAvoid");
const GCutLine = require("./avoid/GCutLine");
let tiles = [];
let labelAvoid = null;
let finished = true;

let styleMap;
//是否需要重新切割线注记
let needCutLine = false;

let z;
let viewer;

class AvoidTile {
  static init(ts, heading, sm, vr) {
    finished = false;
    styleMap = sm;
    tiles = ts;
    viewer = vr;
    needCutLine = false;
    let l = viewer.camera.getLevel();
    if (!z || Math.abs(l - z) > 0.1) {
      needCutLine = true;
    }
    z = l;
    labelAvoid = new GAnnoAvoid(null, null, heading);
  }

  static setTiles(ts, heading) {
    finished = false;
    tiles = ts;

    labelAvoid = new GAnnoAvoid(null, null, heading);
  }

  static avoidTile() {
    const startTime = new Date().getTime();
    const shouldPausePlacement = () => {
      const elapsedTime = new Date().getTime() - startTime;
      return elapsedTime > 3;
    };

    let level = viewer.camera.getLevel();
    // console.time('avoidTile');
    while (tiles.length > 0) {
      // console.log('+++++++++++++++++');
      let tile = tiles.shift();
      if (tile.isDestroy) {
        continue;
      }

      //注记第一次参与避让，不用重新切线注记
      if (needCutLine) {
        // let scale = Math.pow(2,tile.level)/Math.pow(2,level)*0.5;
        // AvoidTile.cutLine(tile,tile.features,scale);
      }

      //转换为屏幕坐标
      tile.updateScreenPt(tile.features);

      //计算避让box
      labelAvoid.GLabelBox.setBox(tile.features, tile.styleMap, true);
      //开始避让
      labelAvoid.defaultAvoid(tile.features, tile.styleMap, true, true, false);

      AvoidTile.updateLineLable(tile.features);
      //避让
      if (shouldPausePlacement()) {
        // console.timeEnd('avoidTile');
        return;
      }
    }
    // console.timeEnd('avoidTile');
    finished = true;
  }

  static cutLine(tile, features, scale) {
    for (let i = 0; i < features.length; i++) {
      let feature = features[i];
      if (feature.lineType != "text") {
        continue;
      }

      let f = GCutLine.createLineTextFeatrue(
        feature,
        styleMap[feature.styleId],
        0,
        scale
      ).feature;

      feature.anglePositions = [];
      if (f) {
        for (let j = 0; j < f.sourceAngleData.length; j++) {
          let anglePosition = [];
          let sourceAngleData = f.sourceAngleData[j];
          let position = tile.toLonLat([
            sourceAngleData[0][0],
            sourceAngleData[0][1],
          ]);
          anglePosition.push(position);
          anglePosition.push(feature.sourceAngleData[j][1]);
          feature.anglePositions.push(anglePosition);

          let label = feature.labels[j];
          if (feature.anglePositions[j][0]) {
            label.show = true;
            label.position = feature.anglePositions[j][0];
          } else {
            label.show = false;
          }
        }
      }
    }
  }

  static screenToposition(x, y) {
    let c = new Cesium.Cartesian2(x, y);
    let position = viewer.camera.pickEllipsoid(c, viewer.scene.globe.ellipsoid);
    return position;
  }

  //更新线注记的角度和是否反向
  static updateLineLable(features) {
    for (let i = 0; i < features.length; i++) {
      let feature = features[i];
      if (!feature.hidden && feature.lineType == "text" && feature.labels) {
        for (let j = 0; j < feature.labels.length; j++) {
          let label = feature.labels[j];
          if (feature.changeDirection) {
            label.text = feature.label.charAt(feature.labels.length - 1 - j);
          } else {
            label.text = feature.label.charAt(j);
          }

          let angle = -feature.textPoints[j][2];
          if (angle != label.angle) {
            label.angle = angle;
            label.rotation = Cesium.Math.toRadians(angle);
          }
        }
      }
    }
  }

  static isFinished() {
    return finished;
  }
}

module.exports = AvoidTile;

},{"./avoid/GAnnoAvoid":18,"./avoid/GCutLine":19}],15:[function(require,module,exports){
/**
 * Created by kongjian on 2017/5/1.
 */
const LabelDrawer = require('./avoid/LabelDrawer');
const ParseLabelData = require('./avoid/ParseLabelData');
const GridFilterLabel = require('./avoid/GridFilterLabel');
const LabelCollectionExt = require('../../ext/LabelCollectionExt');

const BEGIN = 1;
const ADDED = 2;
const REMOVED = 3;
class LabelTile{
    constructor(name,xyz,tileSize,rectangle,data,indexDbNames,styleFun,dataType,level,styleMap,
                textures,scene) {
        this.name = name;
        this.xyz = xyz;
        this.tileSize = tileSize;
        this.rectangle = rectangle;
        this.sourceData = data;
        this.indexDbNames = indexDbNames;
        this.styleFun = styleFun;
        this.dataType = dataType;
        this.level = level;
        this.styleMap = styleMap;
        this.textures = textures;
        this.scene = scene;

        this.labelCollection = new LabelCollectionExt({blendOption:Cesium.BlendOption.OPAQUE,enuEnabled:false});
        this.roadLabelCollection = new LabelCollectionExt({blendOption:Cesium.BlendOption.OPAQUE,enuEnabled:true});
        this.billboardCollection = new Cesium.BillboardCollection({blendOption:Cesium.BlendOption.OPAQUE});
        //全局是否开启避让
        this.ableAvoid = true;
        //全局是否开启权重排序
        this.ableWeight = true;
        //过滤格网大小
        this.cellsize = 4;
        //网格内保留点的个数
        this.maxPerCell = 1;

        this.state =BEGIN;
        this.ready = false;
        this.parse();
    }

    reset(){
        this.state =BEGIN;
        this.ready = false;
        this.parse();
    }

    parse(){
        // console.time('执行样式文件');
        if(this.dataType == 'Binary'){
            let drawer = new LabelDrawer(this.sourceData,this.styleMap,this.level);
            this.styleFun.call({}, drawer, this.level);
        }else{
            let render = new LabelDrawer(this.sourceData,this.styleMap,this.level);
            this.styleFun.call({}, render, this.level);
        }

        // console.timeEnd('执行样式文件');

        // console.time('注记解析');
        //转换瓦片坐标为屏幕坐标,并构造label数据
        let features = ParseLabelData.parseLayerDatas(
            this.sourceData,this.styleMap,this.textures,this.xyz,true);
        // console.timeEnd('注记解析');

        // console.time('去除瓦片外的注记');
        //移除瓦片外的点注记
        features.pointFeatures = GridFilterLabel.removeTileOutPointFeatures(features.pointFeatures,this.tileSize);
        // console.timeEnd('去除瓦片外的注记');
        // console.time('第一次过滤');
        //第一次格网过滤
        let labelFeatures = GridFilterLabel.fristFilter(features.pointFeatures,features.lineFeatures,
            this.styleMap,this.ableWeight,true, this.tileSize,this.cellsize,this.tileSize*0.5,this.maxPerCell);
        // console.timeEnd('第一次过滤');

        // console.time('第二次过滤');
        //第二次格网过滤
        this.features = GridFilterLabel.scendFilter(labelFeatures.pointFeatures,labelFeatures.lineFeatures,this.styleMap,this.ableWeight,true,this.tileSize, this.cellsize, this.tileSize*0.5);
        // console.timeEnd('第二次过滤');

        //构造需要绘制的label和Billboard对象
        this.toLabelBillboards(this.features);
        // console.timeEnd('转换为绘制对象参数');

        this.updateData();
    }

    updateData(){
        // console.time('转换为经纬度');
        //瓦片坐标转成经纬度坐标
        this.toCartesian3(this.features);
        // console.timeEnd('转换为经纬度');
        this.updateLabelPostion(this.features);
    }

    toCartesian3(features){
        for(let i =0;i<features.length;i++){
            let feature = features[i];
            feature.anglePositions = [];

            for(let j = 0;j<feature.sourceAngleData.length;j++){
                let anglePosition = [];
                let sourceAngleData = feature.sourceAngleData[j];
                let position = this.toLonLat([sourceAngleData[0][0],sourceAngleData[0][1]]);
                anglePosition.push(position);
                anglePosition.push(sourceAngleData[1]);
                feature.anglePositions.push(anglePosition);
            }
        }
    }

    toLonLat(pt){
        let x = pt[0];
        let y = pt[1];
        let lon = Cesium.Math.toDegrees(this.rectangle.west + this.rectangle.width/ this.tileSize* x);
        let lat = Cesium.Math.toDegrees(this.rectangle.north - this.rectangle.height/ this.tileSize* y);
        let position = Cesium.Cartesian3.fromDegrees(lon, lat,0);
        return position;
    }




    /**
     * 将经世界坐标转成屏幕坐标
     */
    updateScreenPt(features){
        for(let i =0;i<features.length;i++) {
            let feature = features[i];
            feature.datas = [];
            for(let j = 0;j<feature.anglePositions.length;j++){
                let anglePostion = feature.anglePositions[j];
                if(!anglePostion[0]){
                    feature.datas.push([[-50,-50],anglePostion[1]]);
                    continue;
                }
                var pt = Cesium.SceneTransforms.wgs84ToWindowCoordinates(this.scene, anglePostion[0]);
                if(pt){
                    feature.datas.push([[pt.x,pt.y],anglePostion[1]]);
                }else{
                    //在视线外
                    feature.datas.push([[-50,-50],anglePostion[1]]);
                }
            }
        }
    }

    /**
     * 将要素转换成能绘制的label和Billboard对象
     * @param features
     */
    toLabelBillboards(features){
        for(let i = 0;i<features.length;i++){
            let feature = features[i];
            if(feature.type == 1){
                this.toPointLabelOption(feature);
            }
            // if(feature.type == 2){
            //     this.toLineLabelOption(feature);
            // }
        }
    }

    /**
     *  当高程数据更新后，更新注记的高程值
     * @param features
     */
    updateLabelPostion(features){
        for(let i = 0;i<features.length;i++){
            let feature = features[i];

            if(feature.labelOptions){
                for(let i = 0;i<feature.labelOptions.length;i++){
                    let labelOption = feature.labelOptions[i];
                    labelOption.position = feature.anglePositions[i][0];
                }
            }


            if(feature.billboardOption){
                feature.billboardOption.position = feature.anglePositions[0][0];
            }

            if(feature.labels){
                for(let j = 0;j<feature.labels.length;j++){
                    let label = feature.labels[j];
                    label.position = feature.anglePositions[j][0];
                }
            }

            if(feature.billboard){
                feature.billboard.position = feature.anglePositions[0][0];
            }
        }
    }


    /**
     *
     * @param feature
     */
    toPointLabelOption(feature){
        feature.labelOptions = [];
        let style = this.styleMap[feature.styleId];

        let iconWidth = feature.iconImg? feature.iconImg.width:0;
        let dis = style.graphicDistance + iconWidth *0.5;
        let option = {
            show:false,
            disableDepthTestDistance:Number.POSITIVE_INFINITY,
            text:feature.label+'',
            font:style.pointFillFont,
            style: Cesium.LabelStyle.FILL,
            verticalOrigin:Cesium.VerticalOrigin.CENTER,
            pixelOffset: new Cesium.Cartesian2(dis, 0),
            fillColor: Cesium.Color.fromCssColorString(style.pointFillStyle).withAlpha(style.pointFillAlpha)
        };

        //有背景框
        if (style.pointHashBackground == true){
            option.showBackground = true;
            option.backgroundColor =Cesium.Color.fromCssColorString(style.pointBackgroundColor).withAlpha(style.pointBackgroundAlpha);
            option.backgroundPadding = new Cesium.Cartesian2(style.pointBackgroundGap, style.pointBackgroundGap);
        }

        //有描边
        if (style.pointHashOutline == true){
            option.style =Cesium.LabelStyle.FILL_AND_OUTLINE;
            option.outlineColor = Cesium.Color.fromCssColorString(style.pointStrokeStyle).withAlpha(style.pointStrokeAlpha),
                option.outlineWidth = style.pointLineWidth+2;
        }

        feature.labelOptions.push(option);
        //有图标
        if(feature.iconImg){
            let option = this.toBillboardOption(feature.iconImg,style);
            feature.billboardOption = option;
        }
    }

    toLineLabelOption(feature){
        feature.labelOptions = [];
        let style = this.styleMap[feature.styleId];
        if(feature.lineType == 'text'){
            if(style.lineHashBackground == true){
                let index = Math.floor(feature.sourceAngleData.length/2);

                let option = {
                    show:false,
                    disableDepthTestDistance:Number.POSITIVE_INFINITY,
                    text:feature.label+'',
                    font:style.lineFillFont,
                    style: Cesium.LabelStyle.FILL,
                    verticalOrigin:Cesium.VerticalOrigin.CENTER,
                    horizontalOrigin:Cesium.HorizontalOrigin.CENTER,
                    fillColor: Cesium.Color.fromCssColorString(style.lineFillStyle).withAlpha(style.lineFillAlpha)
                };

                //有背景框
                option.showBackground = true;
                option.backgroundColor =Cesium.Color.fromCssColorString(style.backgroundColor).withAlpha(style.backgroundAlpha),
                    option.backgroundPadding = style.lineBackgroundGap;

                feature.labelOptions.push(option);
            }else if(feature.sourceAngleData.length == 1){
                let option = {
                    show:false,
                    disableDepthTestDistance:Number.POSITIVE_INFINITY,
                    text:feature.label+'',
                    font:style.lineFillFont,
                    style: Cesium.LabelStyle.FILL,
                    verticalOrigin:Cesium.VerticalOrigin.CENTER,
                    horizontalOrigin:Cesium.HorizontalOrigin.CENTER,
                    fillColor: Cesium.Color.fromCssColorString(style.lineFillStyle).withAlpha(style.lineFillAlpha)
                };

                feature.labelOptions.push(option);
            }else{
                for(let i = 0;i<feature.sourceAngleData.length;i++){
                    let sourceAnglePosition = feature.sourceAngleData[i];
                    let option = {
                        show:false,
                        disableDepthTestDistance:Number.POSITIVE_INFINITY,
                        text:(feature.label+'').charAt(i),
                        font:style.lineFillFont,
                        style: Cesium.LabelStyle.FILL,
                        verticalOrigin:Cesium.VerticalOrigin.CENTER,
                        horizontalOrigin:Cesium.HorizontalOrigin.CENTER,
                        rotation:Cesium.Math.toRadians(sourceAnglePosition[1]),
                        fillColor: Cesium.Color.fromCssColorString(style.lineFillStyle).withAlpha(style.lineFillAlpha)
                    };

                    //有描边
                    if (style.lineHashOutline == true){
                        option.style =Cesium.LabelStyle.FILL_AND_OUTLINE;
                        option.outlineColor = Cesium.Color.fromCssColorString(style.lineStrokeStyle).withAlpha(style.lineStrokeAlpha),
                            option.outlineWidth = style.lineLineWidth;
                    }

                    feature.labelOptions.push(option);
                }
            }
        }

        if(feature.lineType == 'code'){
            let style = this.styleMap[feature.styleId];

            let option = {
                show:false,
                disableDepthTestDistance:Number.POSITIVE_INFINITY,
                text:feature.label+'',
                font:style.codeLineFillFont,
                style: Cesium.LabelStyle.FILL,
                verticalOrigin:Cesium.VerticalOrigin.CENTER,
                horizontalOrigin:Cesium.HorizontalOrigin.CENTER,
                fillColor: Cesium.Color.fromCssColorString(style.codeLineFillStyle).withAlpha(style.codeLineFillAlpha)
            };

            //背景框
            option.showBackground = true;
            option.backgroundColor =Cesium.Color.fromCssColorString(style.codeBackgroundColor).withAlpha(style.codeBackgroundAlpha);
            option.backgroundPadding = new Cesium.Cartesian2(style.codeLineBackgroundGap, style.codeLineBackgroundGap);

            //有描边
            if(style.codeLineHashOutline == true){
                option.style =Cesium.LabelStyle.FILL_AND_OUTLINE;
                option.outlineColor = Cesium.Color.fromCssColorString(style.codeLineStrokeStyle).withAlpha(style.codeLineStrokeAlpha),
                    option.outlineWidth = style.codeLineLineWidth+2;
            }

            feature.labelOptions.push(option);
        }
    }

    /**
     *
     * @param feature
     */
    toBillboardOption(image,style) {
        let width = style.graphicWidth;
        let height = style.graphicHeight;

        if(!width || !height){
            width = image.width;
            height = image.height;
        }

        let billboardOption = {
            show:false,
            disableDepthTestDistance:Number.POSITIVE_INFINITY,
            image:image,
            width:width,
            height:height
        };
        return billboardOption;
    }



    addToMap(){
        // console.time('构建绘制对象并添加到绘制列表中');
        if(this.state == BEGIN){
            this.toDrawLabel();
        }

        if(this.labelCollection._labels.length >0){
            this.scene.primitives.add(this.labelCollection);
        }

        if(this.roadLabelCollection._labels.length >0) {
            this.scene.primitives.add(this.roadLabelCollection);
        }
        if(this.billboardCollection._billboards.length >0) {
            this.scene.primitives.add(this.billboardCollection);
        }

        this.updateNow();
        // console.timeEnd('构建绘制对象并添加到绘制列表中');
        // console.log('注记个数：'+this.features.length);

        this.state = ADDED;
    }

    toDrawLabel(){
        for(let i =0;i<this.features.length;i++){
            let feature  = this.features[i];
            feature.labels = [];
            if(feature.type == 1){
                for(let j = 0;j<feature.labelOptions.length;j++){
                    feature.labels.push(this.labelCollection.add(feature.labelOptions[j]));
                }
                if(feature.iconImg){
                    feature.billboard = this.billboardCollection.add(feature.billboardOption);
                }
            }

            // if(feature.type == 2){
            //     if(feature.lineType == 'text'){
            //         for(let k = 0;k<feature.labelOptions.length;k++){
            //             feature.labels.push(this.roadLabelCollection.add(feature.labelOptions[k]));
            //         }
            //     }
            //
            //     if(feature.lineType == 'code'){
            //         for(let m = 0;m<feature.labelOptions.length;m++){
            //             feature.labels.push(this.labelCollection.add(feature.labelOptions[m]));
            //         }
            //     }
            // }
        }
    }

    updateNow(){
        if(this.labelCollection._labels.length >0){
            this.labelCollection.update(this.scene._frameState);
        }

        if(this.roadLabelCollection._labels.length >0) {
            this.roadLabelCollection.update(this.scene._frameState);
        }
        if(this.billboardCollection._billboards.length >0) {
            this.billboardCollection.update(this.scene._frameState);
        }

    }

    remove(){
        if(this.state ==ADDED){
            this.scene.primitives.remove(this.labelCollection);
            this.scene.primitives.remove(this.roadLabelCollection);
            this.scene.primitives.remove(this.billboardCollection);
            this.state = REMOVED;
        }
    }

    show(){
        if(this.state == BEGIN || this.state == REMOVED){
            this.addToMap();
        }
    }

    destroy(){
        this.remove();
        this.labelCollection.destroy();
        this.roadLabelCollection.destroy();
        this.billboardCollection.destroy();
        this.isDestroy = true;
    }

}

module.exports = LabelTile;


},{"../../ext/LabelCollectionExt":10,"./avoid/GridFilterLabel":23,"./avoid/LabelDrawer":24,"./avoid/ParseLabelData":25}],16:[function(require,module,exports){
const combine = Cesium.combine;
const Credit  = Cesium.Credit;
const defaultValue = Cesium.defaultValue;
const defined = Cesium.defined;
const DeveloperError = Cesium.DeveloperError;
const Event = Cesium.Event;
const freezeObject = Cesium.freezeObject;
const isArray = Array.isArray;
const Rectangle = Cesium.Rectangle;
const Resource = Cesium.Resource;
const WebMercatorTilingScheme = Cesium.WebMercatorTilingScheme;
const defer =Cesium.defer;
const TimeDynamicImagery = Cesium.TimeDynamicImagery;
const LabelTile = require('./LabelTile');
const GlyphSource = require('./glyph/GlyphSource');
const AvoidTile = require('./AvoidTile');
const Buffer = require('../../utils/Buffer');
const VarintReader = require('../../utils/VarintReader');

let defaultParameters = {
    service : 'WMTS',
    version : '1.0.0',
    request : 'GetTile'
};

/**
 *
 * @see ArcGisMapServerImageryProvider
 * @see BingMapsImageryProvider
 * @see GoogleEarthEnterpriseMapsProvider
 * @see OpenStreetMapImageryProvider
 * @see SingleTileImageryProvider
 * @see TileMapServiceImageryProvider
 * @see WebMapServiceImageryProvider
 * @see UrlTemplateImageryProvider
 */
class LabelTileServiceImageryProvider{
    constructor(viewer,options) {
        this.viewer = viewer;
        this.indexDbName = 'house_'+this.indexDbName;
        options = defaultValue(options, defaultValue.EMPTY_OBJECT);
        this.id = Math.random();
        this.scene = viewer.scene;
        this.needDecode = defaultValue(options.needDecode, false);

        //>>includeStart('debug', pragmas.debug);
        if (!defined(options.url)) {
            throw new DeveloperError('options.url is required.');
        }
        //>>includeEnd('debug');

        let resource = Resource.createIfNeeded(options.url);

        let style = options.style;
        let tileMatrixSetID = options.tileMatrixSetID;
        let url = resource.url;
        if (url.indexOf('{') >= 0) {
            let templateValues = {
                style: style,
                Style: style,
                TileMatrixSet: tileMatrixSetID
            };

            resource.setTemplateValues(templateValues);
            this._useKvp = false;
        } else {
            resource.setQueryParameters(defaultParameters);
            this._useKvp = true;
        }

        this._resource = resource;
        this._layer = options.layer;
        this._style = style;
        this._tileMatrixSetID = tileMatrixSetID;
        this._tileMatrixLabels = options.tileMatrixLabels;
        this._format = defaultValue(options.format, 'image/jpeg');
        this._tileDiscardPolicy = options.tileDiscardPolicy;

        this._tilingScheme = defined(options.tilingScheme) ? options.tilingScheme : new WebMercatorTilingScheme({ellipsoid: options.ellipsoid});
        this._tileWidth = defaultValue(options.tileWidth, 256);
        this._tileHeight = defaultValue(options.tileHeight, 256);

        this._minimumLevel = defaultValue(options.minimumLevel, 0);
        this._maximumLevel = options.maximumLevel;

        this._rectangle = defaultValue(options.rectangle, this._tilingScheme.rectangle);
        this._dimensions = options.dimensions;

        let that = this;
        this._reload = undefined;
        if (defined(options.times)) {
            this._timeDynamicImagery = new TimeDynamicImagery({
                clock: options.clock,
                times: options.times,
                requestImageFunction: function (x, y, level, request, interval) {
                    return requestImage(that, x, y, level, request, interval);
                },
                reloadFunction: function () {
                    if (defined(that._reload)) {
                        that._reload();
                    }
                }
            });
        }

        this._readyPromise = defer();

        // Check the number of tiles at the minimum level.  If it's more than four,
        // throw an exception, because starting at the higher minimum
        // level will cause too many tiles to be downloaded and rendered.
        let swTile = this._tilingScheme.positionToTileXY(Rectangle.southwest(this._rectangle), this._minimumLevel);
        let neTile = this._tilingScheme.positionToTileXY(Rectangle.northeast(this._rectangle), this._minimumLevel);
        let tileCount = (Math.abs(neTile.x - swTile.x) + 1) * (Math.abs(neTile.y - swTile.y) + 1);
        //>>includeStart('debug', pragmas.debug);
        if (tileCount > 4) {
            throw new DeveloperError('The imagery provider\'s rectangle and minimumLevel indicate that there are ' + tileCount + ' tiles at the minimum level. Imagery providers with more than four tiles at the minimum level are not supported.');
        }
        //>>includeEnd('debug');

        this._errorEvent = new Event();

        let credit = options.credit;
        this._credit = typeof credit === 'string' ? new Credit(credit) : credit;

        this._subdomains = options.subdomains;
        if (isArray(this._subdomains)) {
            this._subdomains = this._subdomains.slice();
        } else if (defined(this._subdomains) && this._subdomains.length > 0) {
            this._subdomains = this._subdomains.split('');
        } else {
            this._subdomains = ['a', 'b', 'c'];
        }

        this.dataType = 'binary';
        if(options.hasOwnProperty('dataType')){
            this.dataType = options['dataType'];
        }else{
            this.dataType = 'Json';
        }


        this.needDecode = options.needDecode;
        this.parseUrl(options.url);

        let promises = this.loadStyle();

        if(this.dataType == 'binary'){
            let styleUrl = this.host + '/mapserver/serverInfo/'+this.servername+'.json?'+Math.random();
            let resource = Resource.createIfNeeded(styleUrl);
            let promise2 = resource.fetchJson();
            promises.push(promise2);
        }

        this.hasTerrain = false;
        if(viewer.terrainProvider.name == 'RGBWorldTerrainProvider'){
            this.hasTerrain = true;
        }

        // this.dbMap = {};
        // //获取本图层下面的图层indexDbNames
        // this.indexDbNames = this.getBottomProviderIndexDbNames();
        // let promise3 = ElevationTool.getDBMap(this.indexDbNames,this.dbMap).promise;
        // promises.push(promise3);

        Promise.all(promises).then(function(data){
            let results = data[2];
            if (results && results.layerMap) {
                this.serverInfo = {};
                this.layerFieldMap = {};
                for (let key in results.layerMap) {
                    this.serverInfo[key] = {
                        geometryType: results.layerMap[key].geometryType,
                        fieldsConfig: results.layerMap[key].fields
                    };
                    if (!this.layerFieldMap[key]) {
                        this.layerFieldMap[key] = results.layerMap[key].fields.length;
                    }
                }
            };

            this.ready = {
                value : true
            }
            this._readyPromise.resolve(true);
        }.bind(this));


        this.cache = {};
        //纹理
        this.textures = {};
        //样式
        this.styleMap = {};


        if(options.glyphUrl  && options.fontName){
            this.fontName = options.fontName;
            if(!this.viewer.glyphSource){
                this.viewer.glyphSource = new GlyphSource(options.glyphUrl);
            }
        }


        //上一次的坐标点
        this.prevPosition = null;
        //上一次渲染的瓦片个数
        this.prevRenderTilesLength = -1;
        this.image  = document.createElement('canvas');
    }



    updateStle(url){
        let resource = Resource.createIfNeeded(url);
        let style = this._style;
        let tileMatrixSetID = this.tileMatrixSetID;
        url = resource.url;
        if (url.indexOf('{') >= 0) {
            let templateValues = {
                style: style,
                Style: style,
                TileMatrixSet: tileMatrixSetID
            };

            resource.setTemplateValues(templateValues);
            this._useKvp = false;
        } else {
            resource.setQueryParameters(defaultParameters);
            this._useKvp = true;
        }

        this._resource = resource;
        this.parseUrl(url);

        Promise.all(this.loadStyle()).then(function(){
            for(let key in this.cache){
                let labelTile = this.cache[key];
                labelTile.reset();
            }
        }.bind(this));

        //纹理
        this.textures = {};
        //样式
        this.styleMap = {};
    }

    draw(tilesToRender){
        let renderTileMap = this.getRenderTileMap(tilesToRender);

        //移除不是当前屏幕要显示的瓦片
        for(let key in this.cache){
            if (!renderTileMap[key]){
                let tile = this.cache[key];
                tile.remove();
            }
        }


        let renderTiles = [];
        //增加本次最新的瓦片去绘制
        for(let name in renderTileMap){
            let labelTile = this.cache[name];
            if(labelTile && labelTile.ready){
                renderTiles.push(labelTile);
                labelTile.show(this.styleFun);
            }
        }

        this.avoid(renderTiles);
    }

    avoid(renderTiles){
        let position = this.scene.camera.position;
        let dis = 100;
        if(this.prevPosition){
            dis = Cesium.Cartesian3.distance(position,this.prevPosition);
        }

        let heading = Cesium.Math.toDegrees(this.viewer.camera.heading).toFixed(2);
        if(heading > 180){
            heading = heading - 360;
        }


        if(dis >10){
            AvoidTile.init(renderTiles,heading,this.styleMap,this.viewer);
            this.prevPosition = new Cesium.Cartesian3(position.x,position.y,position.z);
        }else{
            if(heading !=this.prevHeading || this.prevRenderTilesLength !=renderTiles.length && renderTiles.length  > 0){
                AvoidTile.setTiles(renderTiles,heading);
                this.prevRenderTilesLength = renderTiles.length;
            }
            this.prevHeading = heading;
        }

        if(!AvoidTile.isFinished()){
            AvoidTile.avoidTile();
        }
    }

    /**
     * 获取当前要显示的tile
     * @returns {{}}
     */
    getRenderTileMap(renderTiles){
        let renderTileMap ={};
        for(let i = 0;i<renderTiles.length;i++){
            let tileImagerys = renderTiles[i].data.imagery;
            for(let j = 0;j<tileImagerys.length;j++){
                let tileImagery = tileImagerys[j];
                let imagery = tileImagery.readyImagery;
                if(imagery && imagery.imageryLayer._imageryProvider.id == this.id){
                    let key = imagery.x+'_'+imagery.y+'_'+imagery.level;
                    renderTileMap[key] = true;
                }
            }
        }

        return renderTileMap;
    }

    /**
     * 解析url
     */
    parseUrl(url){
        let urlParts = url.split('?');
        let urlPartOne = urlParts[0].split('/mapserver/');

        this.host = urlPartOne[0];
        if(this._subdomains.length > 0){
            this.host = this.host.replace('{s}',this._subdomains[0]);
        }

        this.servername = urlPartOne[1].split('/')[1];

        this.queryParam = urlParts[1];
        let params = this.queryParam.split('&');
        for(let i = 0;i<params.length;i++){
            let param = params[i];
            let keyValue = param.split('=');
            if(keyValue[0] == 'styleId'){
                this.styleId = keyValue[1];
                return;
            }
        }
    };

    loadStyle(){
        let styleUrl = this.host + '/mapserver/styleInfo/'+this.servername+'/'+this.styleId+'/label/style.js?'+Math.random();
        let resource = Resource.createIfNeeded(styleUrl);
        let promise1 = resource.fetchText().then(function(result){
            if(this.dataType == 'binary'){
                this.styleFun = new Function("render","level", result);
            }else{
                this.styleFun = new Function("drawer","level", result);
            }
        }.bind(this));


        let deferred = defer();
        let imageUrl = this.host + '/mapserver/styleInfo/'+this.servername+'/'+this.styleId+'/label/texture.js?'+Math.random();
        let imageResource = Resource.createIfNeeded(imageUrl);
        imageResource.fetchText().then(function(deferred,result){
            let textures = JSON.parse(result);
            let totalCount = 0;
            for(let i in textures){
                totalCount++;
            }

            if(totalCount == 0){
                deferred.resolve();
                return;
            }

            let count = 0;
            for(let key in textures){
                let img = new Image();
                img.name = key;
                img.onload = function(data) {
                    count++;
                    let name = data.target.name;
                    this.textures[name] =data.target;
                    if(count == totalCount){
                        deferred.resolve();
                    }
                }.bind(this);
                img.src = textures[key];
            }
        }.bind(this,deferred));

        return [promise1,deferred.promise];
    };

    requestImageNow(imageryProvider, col, row, level, request, interval) {
        let labels = imageryProvider._tileMatrixLabels;
        let tileMatrix = defined(labels) ? labels[level] : level.toString();
        let subdomains = imageryProvider._subdomains;
        let staticDimensions = imageryProvider._dimensions;
        let dynamicIntervalData = defined(interval) ? interval.data : undefined;

        let resource;
        if (!imageryProvider._useKvp) {
            let templateValues = {
                z: tileMatrix,
                y: row.toString(),
                x: col.toString(),
                s: subdomains[(col + row + level) % subdomains.length]
            };

            resource = imageryProvider._resource.getDerivedResource({
                request: request
            });
            resource.setTemplateValues(templateValues);

            if (defined(staticDimensions)) {
                resource.setTemplateValues(staticDimensions);
            }

            if (defined(dynamicIntervalData)) {
                resource.setTemplateValues(dynamicIntervalData);
            }
        } else {
            // build KVP request
            let query = {};
            query.tilematrix = tileMatrix;
            query.layer = imageryProvider._layer;
            query.style = imageryProvider._style;
            query.tilerow = row;
            query.tilecol = col;
            query.tilematrixset = imageryProvider._tileMatrixSetID;
            query.format = imageryProvider._format;

            if (defined(staticDimensions)) {
                query = combine(query, staticDimensions);
            }

            if (defined(dynamicIntervalData)) {
                query = combine(query, dynamicIntervalData);
            }
            resource = imageryProvider._resource.getDerivedResource({
                queryParameters: query,
                request: request
            });
        }
        let deferred = defer();
        let xyz = {x:col,y:row,z:level};
        let success = this.requestJsonData(deferred,imageryProvider, resource,xyz);
        if(!success){
            return undefined;
        }
        return deferred.promise;
    }

        requestJsonData(deferred,imageryProvider, url,xyz){
        let resource = Resource.createIfNeeded(url);
        let promises =[];
        let jsonPromise = null;
        if(this.dataType == 'binary'){
            jsonPromise = resource.fetchArrayBuffer();
        }else{
            jsonPromise = resource.fetchJson();
        }

        if(!jsonPromise){
            return false;
        }

        promises.push(jsonPromise);

        let level = url._templateValues.z;

        Promise.all(promises).then(function(deferred,xyz,level,result){
            let data = result[0];
            if(!data){
                deferred.resolve(this.image);;
                return true;
            }

            let labelTile = this.jsonPromiseResult(xyz,level,data);
            let stacks = this.getStacks(labelTile.features);
            this.getGlyphs(stacks,function(deferred,labelTile,glyphs){
                labelTile.labelCollection.setGlyphs(glyphs);
                labelTile.roadLabelCollection.setGlyphs(glyphs);
                labelTile.ready = true;
                deferred.resolve(this.image);
            }.bind(this,deferred,labelTile));
        }.bind(this,deferred,xyz,level));
        return true;
    }

    jsonPromiseResult(xyz,level,data){
        if(this.dataType == 'binary'){
            data = this.toBuffer(data);
            data = this.parseBinaryData(data);
        }

        let labelData =  data.label? data.label:data;

        if(data !={}){
            let x = xyz.x;
            let y = xyz.y;
            let z = xyz.z;

            let rectangle = this._tilingScheme.tileXYToRectangle(x, y, z);
            let name = x+'_'+y+'_'+z;
            let labelTile = this.cache[name];
            if(!labelTile){
                labelTile = new LabelTile(name,xyz,this.tileWidth,rectangle,labelData,this.indexDbNames,this.styleFun,this.dataType,
                    level,this.styleMap,this.textures,this.scene);
                this.cache[labelTile.name] = labelTile;
            }

            return labelTile;
        }
    }

    toBuffer(ab) {
        let buf = new Buffer(ab.byteLength);
        let view = new Uint8Array(ab);
        for (let i = 0; i < buf.length; ++i) {
            buf[i] = view[i];
        }
        return buf;
    }

    parseBinaryData(buf){
        let vant = new VarintReader(buf, 4, this.layerFieldMap);
        let layerNameArr = vant.getAllLayerNames();
        let layers = {};
        for (let i = 0; i < layerNameArr.length; i++) {
            let layerName = layerNameArr[i];
            layers[layerName] = {
                features: [],
                fieldsConfig: this.serverInfo[layerName] ? this.serverInfo[layerName].fieldsConfig : {},
                type: 1
            };

            let geometryType =vant.getGeometryType(layerName);
            let props = vant.getLayerPro(layerName);
            if (geometryType.toLowerCase() == "point") {
                layers[layerName].type = 1;
            } else if (geometryType.toLowerCase() == "line" ||
                geometryType.toLowerCase() == "linestring" || geometryType.toLowerCase() == "multilinestring") {
                layers[layerName].type = 2;
            }
            if (props && props.length > 0) {
                for (let k = 0; k < props.length; k++) {
                    let tDataArr = [];
                    tDataArr.push(geometryType);
                    tDataArr.push(props[k]);
                    tDataArr.push(vant.getCoordinatesByIndex(layerName, k, 10));
                    layers[layerName].features.push(tDataArr);
                }
            }
        }
        return layers;
    }

    //获取文字的code码,默认只支持一种字体
    getStacks(features){
        let stack = [];
        let statcks = {};
        statcks[this.fontName] = stack;
        let index = 0;
        for(let i = 0;i<features.length;i++){
            let label = features[i].label;
            if(label){
                for (let j = 0; j < label.length; j++) {
                    stack[index] = label.charCodeAt(j);
                    index++;
                }
            }
        }

        //多加个？号
        stack[index] = '?'.charCodeAt(0);
        return statcks;
    }

    // 获取字体
    getGlyphs(stacks, callback) {
        let remaining = Object.keys(stacks).length;
        const allGlyphs = {};

        for (const fontName in stacks) {
            this.viewer.glyphSource.getSimpleGlyphs(fontName, stacks[fontName],  done);
        }

        function done(err, glyphs, fontName) {
            if (err) console.error(err);

            allGlyphs[fontName] = glyphs;
            remaining--;

            if (remaining === 0)
                callback(allGlyphs);
        }
    }



    // updateTileElevation(xyz,tileSize){
    //     // var labels = this._tileMatrixLabels;
    //     // var tileMatrix = defined(labels) ? labels[xyz.z] : xyz.z;
    //     let name = xyz.x+'_'+xyz.y+'_'+xyz.z;
    //     let tile = this.cache[name];
    //
    //     //如果label瓦片还没，或者瓦片已经存在，并且已经有高程值了
    //     if(!tile){
    //         return false;
    //     }
    //
    //     console.log('label图层重设高程：'+name);
    //
    //     let key =  xyz.x+'_'+xyz.y+'_'+xyz.z;
    //     let promise = ElevationTool.getElevation(this.dbMap,this.indexDbNames,key);
    //     promise.then(function(name,elevationDataMap){
    //         tile = this.cache[name];
    //         if(tile){
    //             tile.updateElevationData(elevationDataMap);
    //         }
    //     }.bind(this,name));
    //     return true;
    // }

    get url() {
        return this._resource.url;
    }

    get proxy() {
        return this._resource.proxy;
    }

    get tileWidth() {
        return this._tileWidth;
    }

    get tileHeight() {
        return this._tileHeight;
    }

    get maximumLevel() {
        return this._maximumLevel;
    }

    get minimumLevel() {
        return this._minimumLevel;
    }

    get tilingScheme() {
        return this._tilingScheme;
    }

    get rectangle() {
        return this._rectangle;
    }

    get tileDiscardPolicy() {
        return this._tileDiscardPolicy;
    }

    get errorEvent() {
        return this._errorEvent;
    }

    get format() {
        return this._format;
    }

    get readyPromise() {
        return this._readyPromise;
    }

    get credit() {
        return this._credit;
    }

    get hasAlphaChannel() {
        return true;
    }

    get clock() {
        return this._timeDynamicImagery.clock;
    }

    set clock(value) {
        this._timeDynamicImagery.clock = value;
    }

    get times() {
        return this._timeDynamicImagery.times;
    }

    set times(value) {
        this._timeDynamicImagery.times = value;
    }

    get dimensions() {
        return this._dimensions;
    }

    set dimensions(value){
        if (this._dimensions !== value) {
            this._dimensions = value;
            if (defined(this._reload)) {
                this._reload();
            }
        }
    }

    getTileCredits(x, y, level) {
        return undefined;
    };

    requestImage(x, y, level, request) {
        let result;
        let timeDynamicImagery = this._timeDynamicImagery;
        let currentInterval;

        // Try and load from cache
        if (defined(timeDynamicImagery)) {
            currentInterval = timeDynamicImagery.currentInterval;
            result = timeDynamicImagery.getFromCache(x, y, level, request);
        }

        // Couldn't load from cache
        if (!defined(result)) {
            result = this.requestImageNow(this, x, y, level, request, currentInterval);
        }

        // If we are approaching an interval, preload this tile in the next interval
        if (defined(result) && defined(timeDynamicImagery)) {
            timeDynamicImagery.checkApproachingInterval(x, y, level, request);
        }

        return result;
    };

    pickFeatures(x, y, level, longitude, latitude) {
        return undefined;
    };

    destroy(){
        for(let key in this.cache){
            let tile = this.cache[key];
            tile.destroy();
        }
        this.cache = {};
    };

    removeImageryFromCache(x,y,z){
        let key = x+'_'+y+'_'+z;
        let tile = this.cache[key];
        if(tile){
            tile.destroy();
            delete this.cache[key];
        }
    }
}
module.exports =LabelTileServiceImageryProvider;

},{"../../utils/Buffer":32,"../../utils/VarintReader":36,"./AvoidTile":14,"./LabelTile":15,"./glyph/GlyphSource":27}],17:[function(require,module,exports){
let Font = null
const _path = './../../../../';
class AvoidUtil{
    static getRealLength(str) {
        var length = str.length;
        var realLength = 0
        for (var i = 0; i < length; i++) {
            let charCode = str.charCodeAt(i);
            if (charCode >= 0 && charCode <= 128) {
                realLength += 0.5;
            } else {
                realLength += 1;
            }
        }
        return realLength;
    }

    /**
     * 判断文本是否不为空
     *  Parameters :
     *  label - 要显示的文本
     *
     */
    static isNotNull(label){
        if(!label && label !=0){
            return false;
        }

        //如果是字符串
        if(typeof(label) == 'string'){
            label = label.toLowerCase();
            if(label == ''|| label == 'undefined' || label == 'null'){
                return false;
            }
        }
        return true;
    }

    /**
     * 统一转为微软雅黑
     */
    static formatFont(font,ratio,isChangeFont){
        var fontArr = font;
        if(isChangeFont){
            if(Font == null){
                Font = require(_path + 'src/utils/font/Font');
            }

            var farr = font.split(' ');
            if(farr.length - 1 != 0){
                if('italic' == farr[0].toLowerCase()){
                    if(farr[arr.length -1] != 'simbei'){
                        farr[farr.length -1] = Font.getDefaultFont();
                    }
                }
            }
            farr[farr.length -1] = 'SimHei';
            fontArr =farr.join(' ');
        }

        return fontArr.replace(
            /(\d+\.?\d*)(px|em|rem|pt)/g,
            function(w, m, u) {
                if(m < 12){
                    m = 12 * ratio;
                }else{
                    m = Math.round(m) * ratio;
                }
                return m + u;
            }
        );
    };

    /**
     * 对注记进行去空格等处理
     */
    static formatLabel(label){

        if(label){
            label = label + '';
            //去掉不可见字符
            label =  label.replace( /([\x00-\x1f\x7f])/g,'');
            label = label.replace(/(\s*$)/g,"");
            label = label.replace(/<br\/>/g, "");
        }
        return label;
    }

    //获取两点连线与y轴的夹角
    static getAngle( p1,p2){
        if(!p2 || !p1){
        }
        if(p2[0]-p1[0] == 0){
            if(p2[1]>p1[0]){
                return 90;
            }else{
                return -90;
            }
        }
        let k = (p2[1]-p1[1])/(p2[0]-p1[0]);
        let angle = 360*Math.atan(k)/(2*Math.PI);
        return angle;
    }

    /**
     *  更新线文字注记的角度
     * @param angle
     * @returns {*}
     */
    static getUpdateAngle(angle,bearing){
        let totalAngle = angle - bearing;
        if(totalAngle > 45 && totalAngle <= 135){
            return  -90;
        }
        if(totalAngle > 135 && totalAngle <= 225){
            return  - 180;
        }

        if(totalAngle >= -225 && totalAngle < -135){
            return  180;
        }
        if(totalAngle >= -135 && totalAngle < -45){
            return  90;
        }
        return 0;
    }

    /**
     *  更新线文字注记的角度
     * @param angle
     * @returns {*}
     */
    static updateAngle(angle,bearing){
        let totalAngle = angle - bearing;
        if(totalAngle > 45 && totalAngle <= 135){
            return angle -90;
        }
        if(totalAngle > 135 && totalAngle <= 225){
            return angle - 180;
        }

        if(totalAngle >= -225 && totalAngle < -135){
            return angle + 180;
        }
        if(totalAngle >= -135 && totalAngle < -45){
            return angle + 90;
        }
        return angle;
    }

    /**
     * 是否需要改变线的方向
     *  Parameters :
     *  p1 - 线段起点
     *  p2 -线段的重点
     *  angle - 两点连线与x轴的夹角
     */
    static isChangeDirection(label,p1,p2,angle){
        let showChange = false;
        //判断是否包含汉字
        if(/.*[\u4e00-\u9fa5]+.*$/.test(label)) {
            //如果是垂直线
            if(p1[0] == p2[0]){
                if(p1[1]>p2[1]){
                    showChange = true;
                    return showChange;
                }
            }

            //如果是反斜线，并且夹角与x轴的夹角大于45度
            if(angle<-45 && angle>-90 ){
                if(p1[0]< p2[0]){
                    showChange = true;
                }
            }else{
                if(p1[0]> p2[0]){
                    showChange = true;
                }
            }
        }else{
            if(p1[0] > p2[0]){
                showChange = true;
            }
        }
        return showChange;
    }


    /**
     * 如果文字注记旋转角度方向不一致(有的字向左，有的字向右旋转)，则调整为一致
     * @param textPoints
     */
    // static textToSameBearing(angle,textPoints){
        //保证竖方向的字是正的
        // if(angle >= 45){
        //     angle = angle - 90;
        // }else{
        //     if(angle <= - 45){
        //         angle = angle + 90;
        //     }
        // }
        //
        // for(let i = 0;i<textPoints.length;i++){
        //     let p = textPoints[i][1];
        //     let offsetAngle = angle - p;
        //     if(offsetAngle > 45){
        //         textPoints[i][1] = p +90;
        //     }
        //     if(offsetAngle < -45){
        //         textPoints[i][1] = p -90;
        //     }
        // }
    // }

    static textToSameBearing(textPoints){
        if(textPoints.length < 2){
            return;
        }
        for(let i = 1;i<textPoints.length;i++){
            let preAngle = textPoints[i-1][1];
            let angle1 = textPoints[i][1];
            if(Math.abs(angle1 - preAngle) > 45){
                if(angle1 - preAngle > 0){
                    textPoints[i][1] = angle1 -90;
                }else{
                    textPoints[i][1] = angle1 +90;
                }
            }
        }
    }
}

module.exports = AvoidUtil;




},{}],18:[function(require,module,exports){
/**
 * Class: GAnnoAvoid
 * 避让策略类
 *
 * Inherits:
 *  - <Object>
 */
const GGridIndex = require('./GGridIndex');
const GLabelBox = require('./GLabelBox');
const Uitl = require('./Util');
class GAnnoAvoid{
    constructor(ctx,formatFont,bearing) {
        this.ctx = ctx;
        this.grid=null;
        if(!ctx){
            this.grid = new GGridIndex(4096, 32, 0);
        }
        this.GLabelBox = new GLabelBox(ctx,formatFont,bearing);

        this.featureMap = {};
    }

    //避让
    defaultAvoid(features,styleMap,isClient,hasImportant,ableWeight){
        if(this.ctx){
            if(isClient){
                this.grid = new GGridIndex(4096, 32, 0);
            }else{
                this.grid = new GGridIndex(512, 32, 32);
            }
        }

        if(features== null || features.length<1) return [];
        // console.time('mergeFeatures');
        // features = this.mergeFeatures(features);
        // console.timeEnd('mergeFeatures');
        // console.time('排序');

        if(ableWeight){
            //权值排序
            Uitl.sort(features,styleMap,hasImportant);
        }
        // console.timeEnd('排序');

        // console.time('避让');
        //将注记添加到单元格中，进行避让
        for(let i =0;i<features.length;i++){
            let feature = features[i];
            let style = styleMap[feature.styleId];
            this.avoidFeature(feature,style);

            this.showOrHideFeature(feature);
        }
        // console.timeEnd('避让');
        // features = this.GLabelBox.filterFeature(features);
        return features;
    }

    /**
     * 给要素设置避让的box和注记的绘制坐标
     * @param f
     */
    avoidFeature(f,style){
        if(style.show == false || f.hidden == true || !f.boxs){
            f.hidden =true;
            return;
        }

        let show = true;
        if(f.boxs){
            if(f.type == 1){
                //点注记跟其它注记避让
                show =this.avoidPoint(f,style);
            }else{
                if(f.isCollision){
                    f.hidden = true;
                    return;
                }else{
                    //线注记跟其它注记进行避让
                    show =this.avoidLine(f,style);
                }
            }
        }

            f.hidden = !show;
        //如果注记显示不下
        // if(!show){
        //     let keys = this.getCollisionFeatureIds(f);
        //     let showFeature = this.isShowCurrFeature(style,f,keys);
        //
        //     if(showFeature){
        //         this.hideCollisionFeatures(f,keys);
        //         f.hidden = false;
        //         this.addBoxFeatureCells(f,style);
        //     }else{
        //         f.hidden = true;
        //     }
        // }
    }

    /**
     * 将点注记加入到计算出的多个单元格中
     * @param feature
     */
    avoidPoint(feature,style){
        feature.boxIndex = 0;

        //如果为重要的，则不避让
        if(style.isImportant == true){
            this.addBoxFeatureCells(feature,style);
            return true;
        }

        //如果前面有小图标，并且开启了四宫格避让
        if((style.isFourDirections || style.isEightDirections) && style.texture){
            return this.addFourCollisionFeatureToCells(feature,style,0);
        }else{
            //如果没有指定的方向
            if(feature.boxIndexs && !feature.boxIndexs[0]){
                return false;
            }

            let isCollision = this.isCollision(feature.box);
            if(isCollision){
                return false;
            }
            this.addBoxFeatureCells(feature,style);
            return true;
        }
    }


    /**
     * 将线注记加入到计算出的多个单元格中
     * @param feature
     */
    avoidLine(feature,style){
        //如果为重要的，则不避让
        if(style.isImportant == true){
            this.addBoxFeatureCells(feature,style);
            return true;
        }

        //线注记是否与其它注记相交
        let isCollision = false;
        for(let i = 0 ;i<feature.boxs.length;i++){
            let box = feature.boxs[i];
            if(this.isCollision(box)){
                isCollision = true;
                break;
            }
        }

        if(isCollision){
            return false;
        }else{
            this.addBoxFeatureCells(feature,style);
            return true;
        }
    }

    /**
     * 将点注记添加到单元格中
     * @param feature 点注记
     * @param index 点注记四宫格的index
     */
    addFourCollisionFeatureToCells(feature,style,index){
        let isCollision = true;
        let box = [];
        //如果有指定的方向
        if(!feature.boxIndexs || (feature.boxIndexs && feature.boxIndexs[index])){
            box = feature.boxs[index];
            isCollision = this.isCollision(box);
        }

        // 如果相交,进行四宫,八宫格避让
        if(isCollision){
            index ++;
            if(index == feature.boxs.length){
                index = index - feature.boxs.length;
            }

            //所有方向全部避让完成，仍然相交
            if(index == 0){
                return false;
            }else{
                //换个点注记方向的box，再进行递归避让检测
               return this.addFourCollisionFeatureToCells(feature,style,index);
            }
        }else{
            //换成偏移点
            // feature.textPoint =feature.fourPoints[index];
            feature.boxIndex = index;
            feature.box = box;
            this.addBoxFeatureCells(feature,style);
            return true;
        }
    }

    /**
     *  返回注记的box是否与其它注记相交
     * @param row
     * @param col
     * @param feature
     */
    isCollision(box){
        let x1 = box[0];
        let y1 = box[1];

        let x2 = box[2];
        let y2 = box[3];
        let result = this.grid.query(x1,y1,x2,y2);
        return result.length>0;
    }

    getCollisionIds(box){
        // if(!box){
        //     debugger;
        // }
        let x1 = box[0];
        let y1 = box[1];

        let x2 = box[2];
        let y2 = box[3];
        return this.grid.query(x1,y1,x2,y2);
    }

    /**
     * 获取被压盖的注记集合
     * @param feature
     * @returns {Array}
     */
    getCollisionFeatureIds(feature){
        if(feature.type ==1){
            return this.getCollisionIds(feature.boxs[feature.boxIndex]);
        }

        if(feature.type ==2){
            let ids = [];
            for(let i = 0;i<feature.boxs.length;i++){
                let keys = this.getCollisionIds(feature.boxs[i]);
                ids = ids.concat(keys);
            }
            return ids;
        }
    }

    /**
     *  判断当前注记在它避让压盖的注记中，当前注记是否要显示
     * @param style
     * @param feature
     * @param keys
     * @returns {boolean}
     */
    isShowCurrFeature(style,feature,keys){
        if(style.isImportant){
            return true;
        }

        let weight = feature.weight;
        for(let i =0;i<keys.length;i++){
            let item =this.featureMap[keys[i]];
            if(item){
                let itemStyle = item.style;
                if(itemStyle.isImportant){
                    return false;
                }

                let itemFeature = item.feature;
                if(itemFeature.weight >= weight){
                    return false;
                }
            }
        }
        return true;
    }

    /**
     *  隐藏掉压盖的注记
     * @param keys
     */
    hideCollisionFeatures(f,keys){
        for(let i =0;i<keys.length;i++){
            let item =this.featureMap[keys[i]];
            if(item){
                let itemFeature = item.feature;
                let itemStyle = item.style;

                //重要注记和不是同一个注记不隐藏
                if(itemStyle.isImportant && itemFeature.objectId != f.objectId){
                    continue;
                }

                //隐藏掉该注记, 该注记为被其它权重更高的注记顶掉了
                itemFeature.hidden = true;
                this.showOrHideFeature(itemFeature);

                //去掉注记占据的网格
                this.removeBoxFeatureCells(itemFeature);
            }
        }
    }


    /**
     *  注记box所占的单元格标识为true
     */
    addBoxToCells(feature,key,box){
        let x1 = box[0];
        let y1 = box[1];
        let x2 = box[2];
        let y2 = box[3];
        this.grid.insert(key,x1,y1,x2,y2);
    }


    // 获取过滤后的要素.
    filterFeature(features){
        let returnFeatures = [];
        //剔除需避让的要素
        for(let i= 0 ;i<features.length;i++){
            if(!features[i].hidden ) {
                features[i].drawed = true;
                returnFeatures.push(features[i]);
            }
        }
        return returnFeatures;
    }


    addBoxFeatureCells(feature,style){
        this.featureMap[feature.primaryId] = {feature,style};

        if(feature.type == 1){
            this.addBoxToCells(feature,feature.primaryId,feature.box);
        }

        if(feature.type == 2){
            for(let i = 0 ;i<feature.boxs.length;i++){
                let box = feature.boxs[i];
                this.addBoxToCells(feature,feature.primaryId,box);
            }
        }
    }

    removeBoxFeatureCells(feature){
        if(this.featureMap[feature.primaryId]){
            delete this.featureMap[feature.primaryId];
        }else{
            //注记没有加入到网格中
            return;
        }

        if(feature.type == 1){
            this.removeBoxToCells(feature.primaryId,feature.box);
        }

        if(feature.type == 2){
            for(let i = 0 ;i<feature.boxs.length;i++){
                let box = feature.boxs[i];
                this.removeBoxToCells(feature.primaryId,box);
            }
        }
    }

    /**
     *  注记box所占的单元格标识为true
     */
    removeBoxToCells(key,box){
        let x1 = box[0];
        let y1 = box[1];
        let x2 = box[2];
        let y2 = box[3];
        this.grid.remove(key,x1,y1,x2,y2);
    }

    showOrHideFeature(feature){
        let show = !feature.hidden;

        if(feature.labels){
            for(let i = 0;i<feature.labels.length;i++){
                let label = feature.labels[i];
                label.show = show;
                if(feature.type == 1 && show){
                    label.pixelOffset = feature.offsetPostion[feature.boxIndex];
                }
            }
        }

        if(feature.iconImg){
            feature.billboard.show = show;
        }
    }
}
module.exports = GAnnoAvoid;
},{"./GGridIndex":21,"./GLabelBox":22,"./Util":26}],19:[function(require,module,exports){
const GDistance = require('./GDistance');
const GisTools = require('./../../../utils/gistools/GisTools');
const AvoidUtil = require('./AvoidUtil');
class GCutLine{
    static cutLineFeature(feature,style,scale){
        let fs = [];
        let index = 0;
        if(feature.sourceData.length < 4){
            return fs;
        }

        let lineText = this.createLineTextFeatrue(feature,style,index,scale);
        index = lineText.index;
        if(lineText.feature){
            fs.push(lineText.feature);
        }

        let lineCode= this.createLineCodeFeatrue(feature,style,index);
        index = lineCode.index;
        if(lineCode.feature){
            fs.push(lineCode.feature);
        }

        let lineArrow= this.createLineArrowFeatrue(feature,style,index);
        if(lineArrow.feature){
            fs.push(lineArrow.feature);
        }
        return fs;
    }

    /**
     * 创建线文字注记
     *  Parameters :
     *  feature
     *  index - 可用的line的index位置
     *  scale 字间距缩放比例
     */
    static createLineTextFeatrue(feature,style,index,scale,filedName){
        let line = feature.sourceData;
        if(filedName){
            line = feature[filedName];
        }

        let d = new GDistance();
        let gaps = [];
        let textFeature =null;

        if(!scale){
            scale = 1;
        }

        if(AvoidUtil.isNotNull(feature.label)) {
            //线注记的文字内容
            feature.label = feature.label+ '';
            for (let count = 0; count < feature.label.length; count++) {
                gaps.push((style.lineHeight*1.2 +2+ style.gap)*scale);
            }

            let cloneGaps = [].concat(gaps);
            let points = d.getNodePath(line, gaps);
            let textPoints = points.pointList;

            if(textPoints.length > 1){
                index = points.index;
                //需要延长的字个数
                let delayLength = feature.label.length - textPoints.length;
                if(delayLength > 0){
                    index = line.length;
                    //摆不下的字数少于3个字延长
                    if(delayLength <style.extendedNum){
                        this.delayTextPoint(line,textPoints,feature.label,(style.chinaLabelWidth + style.gap)*scale);
                    }else{
                        return {feature:null,index:index};
                    }
                }


                //如果文字注记旋转角度方向不一致(有的字向左，有的字向右旋转)，则调整为一致
                AvoidUtil.textToSameBearing(textPoints);
                textFeature =  this.cloneFeature(feature);

                if(style.changeDirection != false){
                    //改变方向
                    //判断是否应该换方向
                    // let showChanged = AvoidUtil.isChangeDirection(feature.label,p1, p2,angle);
                    // if (showChanged) {
                    //     textPoints = textPoints.reverse();
                    // }
                }

                textFeature.attributeId = feature.attributeId +'_text';
                textFeature.sourceAngleData = textPoints;
                textFeature.lineType = 'text';
            }else{
                //gl 暂时不支持画一个点的线注记
                // if(style.isTransverse && !style.showRoadCode){
                //     textFeature =  this.cloneFeature(feature);
                //     textFeature.attributeId = feature.layerName +'__'+ feature.objectId +'_text';
                //     textFeature.sourceAngleData = [[[line[0],line[1]],0]];
                //     textFeature.lineType = 'text';
                //     index =2;
                // }
            }

            if(textFeature){
                //平移
                if(style.lineOffset && textFeature.sourceAngleData.length > 1){
                    textFeature.sourceAngleData = GisTools.lineOffset(textFeature.sourceAngleData,style.lineOffset);
                }
                textFeature.textPoints = textFeature.sourceAngleData;
                textFeature.primaryId = textFeature.attributeId + '_row_' + feature.xyz.y + '_col_' + feature.xyz.x + '_level_' + feature.xyz.z
                    + '_x_' + textFeature.sourceAngleData[0][0][0] + '_y_' + textFeature.sourceAngleData[0][0][1];
                textFeature.id = textFeature.attributeId + '_row_' + feature.xyz.y + '_col_' + feature.xyz.x + '_level_' + feature.xyz.z
                    + '_x_' + line[0] + '_y_' + line[1];
            }
        }
        return {feature:textFeature,index:index};
    }

    /**
     * 创建线编码注记
     *  Parameters :
     *  feature
     *  index - 可用的line的index位置
     */
    static createLineCodeFeatrue(feature,style,index){
        let line = feature.sourceData;
        let d = new GDistance();
        let gaps = [];
        let codeFeature =null;

        let roadLabel = feature.roadCodeLabel;
        //如果有道路编码
        if(style.showRoadCode && AvoidUtil.isNotNull(roadLabel) && index < line.length){
            let codeLine = line.slice(index,line.length -1);
            //默认是30个像素
            gaps.push(30);
            let cPoints = d.getNodePath(codeLine, gaps);
            let codePoints = cPoints.pointList;
            if(codePoints.length  == 1){
                index = index + cPoints.index;
                codeFeature =  this.cloneFeature(feature);
                codeFeature.attributeId = feature.attributeId+'_code';
                codeFeature.sourceAngleData = codePoints;
                codeFeature.lineType = 'code';
                codeFeature.label = roadLabel+'';
            }

            if(codePoints.length ==0){
                codeFeature =  this.cloneFeature(feature);
                codeFeature.attributeId = feature.attributeId+'_code';
                codeFeature.sourceAngleData = [[[line[0],line[1]],0]];
                codeFeature.lineType = 'code';
                codeFeature.label = roadLabel+'';
                index = 2;
            }

            codeFeature.textPoints = [codeFeature.sourceAngleData[0][0]];
            codeFeature.primaryId = codeFeature.attributeId + '_row_' + feature.xyz.y + '_col_' + feature.xyz.x + '_level_' + feature.xyz.z
                + '_x_' + codeFeature.sourceAngleData[0][0][0] + '_y_' + codeFeature.sourceAngleData[0][0][1];
            codeFeature.id = codeFeature.attributeId + '_row_' + feature.xyz.y + '_col_' + feature.xyz.x + '_level_' + feature.xyz.z
                + '_x_' + line[0] + '_y_' + line[1];
        }
        return {feature:codeFeature,index:index};
    }

    /**
     * 创建线箭头注记
     *  Parameters :
     *  feature
     *  index - 可用的line的index位置
     */
    static createLineArrowFeatrue(feature,style,index){
        let line = feature.sourceData;
        let d = new GDistance();
        let gaps = [];
        let arrowFeature =null;

        //如果有箭头
        if(style.showArrow && index < line.length){
            let arrowLine = line.slice(index,line.length -1);
            gaps.push(16);
            gaps.push(16);
            let aPoints = d.getNodePath(arrowLine, gaps);
            let arrowPoints = aPoints.pointList;

            if(arrowPoints.length == 2){
                arrowFeature =  this.cloneFeature(feature);
                arrowFeature.attributeId = feature.attributeId+'_arrow';
                arrowFeature.sourceAngleData = arrowPoints;
                arrowFeature.textPoints = arrowPoints;
                arrowFeature.lineType = 'arrow';

                arrowFeature.primaryId = arrowFeature.attributeId + '_row_' + feature.xyz.y + '_col_' + feature.xyz.x + '_level_' + feature.xyz.z
                    + '_x_' + arrowFeature.sourceAngleData[0][0][0] + '_y_' + arrowFeature.sourceAngleData[0][0][1];
                arrowFeature.id = arrowFeature.attributeId + '_row_' + feature.xyz.y + '_col_' + feature.xyz.x + '_level_' + feature.xyz.z
                    + '_x_' + line[0] + '_y_' + line[1];
            }
        }
        return {feature:arrowFeature,index:index};
    }

    /**
     * 当线文字放不下时，获取延长线上的点
     *  Parameters :
     *  line - 原始线坐标
     *  textPoints - 切割之后的点坐标
     *  label - 线注记
     *  gap - 每个字之间的间隔
     *  showChanged
     *
     */
    static delayTextPoint(line,textPoints,label,gap){
        let fristPoint = null;
        let secondPoint = null;
        //如果只能放下一个字
        if(textPoints.length == 1){
            fristPoint = [line[0],line[1]];
        }else{
            fristPoint = textPoints[textPoints.length-2][0];
        }
        secondPoint = textPoints[textPoints.length-1][0];
        let angle = textPoints[textPoints.length-1][1];

        let len = textPoints.length;
        for(let i = 1;i<label.length - len +1;i++){
            let p = this.getPoint(fristPoint,secondPoint,gap*i);
            let textPoint = [p,angle];
            textPoints.push(textPoint);
        }
    }

    /**
     * 克隆feature
     *  Parameters :
     *  feature - 单个线注记要素
     */
    static cloneFeature(feature){
        return {type:feature.type,datas:feature.datas,centerPoint:feature.centerPoint,sourceData:feature.sourceData,label:feature.label,roadCodeLabel:feature.roadCodeLabel,
            attributes:feature.attributes,attributeId:feature.attributeId,styleId:feature.styleId,textures:feature.textures,xyz:feature.xyz,
            lineType:feature.lineType,weight:feature.weight,layerName:feature.layerName,objectId:feature.objectId};
    }


    /**
     * 求两点之间的距离
     */
    static getDistance(p1,p2){
        let calX = p2[0] - p1[0];
        let calY = p2[1] - p1[1];
        return Math.pow((calX *calX + calY * calY), 0.5);
    }

    /**
     * 获取线的长度
     */
    static getLineDistance(line){
        if(line.length <4){
            return 0;
        }

        let dis = 0;
        for(let i = 0;i<line.length/2-1;i++){
            let p1 = [line[2*i],line[2*i+1]];
            let p2 = [line[2*(i+1)],line[2*(i+1)+1]];
            dis = dis + this.getDistance(p1,p2);
        }
        return dis;
    }

    /**
     * 已知两点，延长距离，获取延长线上的点坐标
     */
    static getPoint(p1,p2,d){
        let xab = p2[0] - p1[0];
        let yab = p2[1] - p1[1];
        let xd = p2[0];
        let yd = p2[1];
        if(xab == 0){
            if(yab > 0){
                yd = p2[1] + d;
            }else{
                yd = p2[1] - d;
            }
        }else{
            let xbd = Math.sqrt((d * d)/((yab/xab) * (yab/xab) + 1));
            if (xab < 0) {
                xbd = -xbd
            }

            xd = p2[0] + xbd;
            yd = p2[1] + yab / xab * xbd;
        }
        return [xd,yd];
    }
}

module.exports = GCutLine;
},{"./../../../utils/gistools/GisTools":37,"./AvoidUtil":17,"./GDistance":20}],20:[function(require,module,exports){
/**
 * Created by matt on 2017/3/5.
 */
class GDistance{
    getLengthPoint(fromX, fromY, toX, toY, len,index){
        let dx = toX - fromX;
        let dy = toY - fromY;
        let x_new;
        let y_new;
        if(dx == 0){
            x_new = toX;
            if(dy > 0){
                y_new = fromY + len;
            }else{
                y_new = fromY - len;
            }
            if(index == null){
                return [x_new,y_new];
            }else{
                return [x_new,y_new,index];
            }
        }

        let tan = dy / dx;
        let sec = Math.sqrt((tan * tan) + 1);
        let dx_new = Math.abs(len / sec);
        let dy_new = Math.abs(dx_new * tan);
        if(dx > 0){
            x_new = fromX + dx_new;
        }else{
            x_new = fromX - dx_new;
        }
        if(dy > 0){
            y_new = fromY + dy_new;
        }else{
            y_new = fromY - dy_new;
        }
        if(index == null){
            return [x_new,y_new];
        }else{
            return [x_new,y_new,index];
        }
    }

    getAngle(p1,p2){
        if(p2[0]-p1[0] == 0){
            if(p2[1]>p1[0]){
                return 90;
            }else{
                return -90;
            }
        }
        let k = (p2[1]-p1[1])/(p2[0]-p1[0]);
        let angle = 360*Math.atan(k)/(2*Math.PI);
        return angle;
    }

    length(x0, y0, x1, y1){
        let dx = x1 - x0;
        let dy = y1 - y0;
        let len = Math.sqrt(dx * dx + dy * dy);
        return len;
    }

    getNodePath(coords,interval){
        let previous = [];
        let points = {};
        let pointList = [];
        let intervalLength = interval.length;

        //初始化标记长度等于单位长度
        let fun_getInterval = function(interval){
            let value = interval[0];
            interval.splice(0,1);
            return value;
        }
        let markLength = fun_getInterval(interval);
        let index = 0;
        while(true){
            if(pointList.length == intervalLength){
                points.index = index;

                // if(pointList.length > 0){
                //     let fristPt = [[coords[0],coords[1]],pointList[0][1]];
                //     pointList.unshift(fristPt);
                //     pointList.pop();
                // }

                points.pointList = pointList;
                return points;
            }
            if(index >= coords.length){
                points.index = index;

                // if(pointList.length > 0){
                //     let fristPt = [[coords[0],coords[1]],pointList[0][1]];
                //     pointList.unshift(fristPt);
                //     pointList.pop();
                // }

                points.pointList = pointList;
                return points;
            }
            let x = coords[index];
            let y = coords[index + 1];
            //判断上一个节点是否为空
            if(previous.length == 0){
                //如果为空就设置当前点到 上一个节点上
                previous[0] = x;
                previous[1] = y;
                continue;
            }else{

                //如果不为空则需要求上一个节点与当前结点的距离
                let lengthPath = this.length(previous[0], previous[1], x, y);
                //把节点长度加起来

                if(lengthPath >= markLength){
                    //如果长度大于标记长度，则需要上一点到标记成都的点
                    let savePoint = this.getLengthPoint(previous[0],previous[1], x,y, markLength,null);
                    let angle = this.getAngle(previous,[x,y]);

                    if(angle == 90){
                        angle = 0;
                    }
                    if(angle == -90){
                        angle = 0;
                    }
                    if(angle == 0){
                        angle = 0.5;
                    }

                    //保证竖方向的字是正的
                    if(angle >= 45){
                        angle = angle - 90;
                    }else{
                        if(angle <= - 45){
                            angle = angle + 90;
                        }
                    }


                    let pointAngle = [savePoint,angle];
                    pointList.push(pointAngle);
                    previous[0] = savePoint[0];
                    previous[1] = savePoint[1];
                    markLength = fun_getInterval(interval);
                }else{
                    markLength = markLength - lengthPath;

                    previous[0] = x;
                    previous[1] = y;
                    index = index + 2;
                }
            }
        }

        points.index = index;

        // if(pointList.length > 0){
        //     let fristPt = [[coords[0],coords[1]],pointList[0][1]];
        //     pointList.unshift(fristPt);
        //     pointList.pop();
        // }
        points.pointList = pointList;
        return points;
    }
}

module.exports = GDistance;






},{}],21:[function(require,module,exports){

module.exports = GGridIndex;
var NUM_PARAMS = 3;
function GGridIndex(extent, n, padding) {
    var cells = this.cells = [];

    if (extent instanceof ArrayBuffer) {
        this.arrayBuffer = extent;
        var array = new Int32Array(this.arrayBuffer);
        extent = array[0];
        n = array[1];
        padding = array[2];

        this.d = n + 2 * padding;
        for (var k = 0; k < this.d * this.d; k++) {
            var start = array[NUM_PARAMS + k];
            var end = array[NUM_PARAMS + k + 1];
            cells.push(start === end ?
                    null :
                    array.subarray(start, end));
        }
        var keysOffset = array[NUM_PARAMS + cells.length];
        var bboxesOffset = array[NUM_PARAMS + cells.length + 1];
        this.keys = array.subarray(keysOffset, bboxesOffset);
        this.bboxes = array.subarray(bboxesOffset);

        this.insert = this._insertReadonly;

    } else {
        this.d = n + 2 * padding;
        for (var i = 0; i < this.d * this.d; i++) {
            cells.push([]);
        }
        this.keys = [];
        this.bboxes = [];
    }

    this.n = n;
    this.extent = extent;
    this.padding = padding;
    this.scale = n / extent;
    this.uid = 0;

    var p = (padding / n) * extent;
    this.min = -p;
    this.max = extent + p;

    this.keyUidMap = {};
}


GGridIndex.prototype.insert = function(key, x1, y1, x2, y2) {
    this._forEachCell(x1, y1, x2, y2, this._insertCell, this.uid++);
    this.keyUidMap[key] = this.uid;
    this.keys.push(key);
    this.bboxes.push(x1);
    this.bboxes.push(y1);
    this.bboxes.push(x2);
    this.bboxes.push(y2);
};

GGridIndex.prototype.remove = function(key,x1, y1, x2, y2) {
    var cx1 = this._convertToCellCoord(x1);
    var cy1 = this._convertToCellCoord(y1);
    var cx2 = this._convertToCellCoord(x2);
    var cy2 = this._convertToCellCoord(y2);
    let uid = this.keyUidMap[key];
    delete this.keyUidMap[key];

    for (var x = cx1; x <= cx2; x++) {
        for (var y = cy1; y <= cy2; y++) {
            var cellIndex = this.d * y + x;
            this.cells[cellIndex][uid] = -1;
        }
    }
};


GGridIndex.prototype._insertReadonly = function() {
    throw 'Cannot insert into a GridIndex created from an ArrayBuffer.';
};

GGridIndex.prototype._insertCell = function(x1, y1, x2, y2, cellIndex, uid) {
    this.cells[cellIndex].push(uid);
};

GGridIndex.prototype.query = function(x1, y1, x2, y2) {
    var min = this.min;
    var max = this.max;
    if (x1 <= min && y1 <= min && max <= x2 && max <= y2) {
        // We use `Array#slice` because `this.keys` may be a `Int32Array` and
        // some browsers (Safari and IE) do not support `TypedArray#slice`
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice#Browser_compatibility
        return Array.prototype.slice.call(this.keys);

    } else {
        var result = [];
        var seenUids = {};
        this._forEachCell(x1, y1, x2, y2, this._queryCell, result, seenUids);
        return result;
    }
};

GGridIndex.prototype._queryCell = function(x1, y1, x2, y2, cellIndex, result, seenUids) {
    var cell = this.cells[cellIndex];
    if (cell !== null) {
        var keys = this.keys;
        var bboxes = this.bboxes;
        for (var u = 0; u < cell.length; u++) {
            var uid = cell[u];
            if(uid == -1){
                continue;
            }

            if (seenUids[uid] === undefined) {
                var offset = uid * 4;
                if ((x1 <= bboxes[offset + 2]) &&
                    (y1 <= bboxes[offset + 3]) &&
                    (x2 >= bboxes[offset + 0]) &&
                    (y2 >= bboxes[offset + 1])) {
                    seenUids[uid] = true;
                    result.push(keys[uid]);
                } else {
                    seenUids[uid] = false;
                }
            }
        }
    }
};

GGridIndex.prototype._forEachCell = function(x1, y1, x2, y2, fn, arg1, arg2) {
    var cx1 = this._convertToCellCoord(x1);
    var cy1 = this._convertToCellCoord(y1);
    var cx2 = this._convertToCellCoord(x2);
    var cy2 = this._convertToCellCoord(y2);
    for (var x = cx1; x <= cx2; x++) {
        for (var y = cy1; y <= cy2; y++) {
            var cellIndex = this.d * y + x;
            if (fn.call(this, x1, y1, x2, y2, cellIndex, arg1, arg2)) return;
        }
    }
};

GGridIndex.prototype._convertToCellCoord = function(x) {
    return Math.max(0, Math.min(this.d - 1, Math.floor(x * this.scale) + this.padding));
};

GGridIndex.prototype.toArrayBuffer = function() {
    if (this.arrayBuffer) return this.arrayBuffer;

    var cells = this.cells;

    var metadataLength = NUM_PARAMS + this.cells.length + 1 + 1;
    var totalCellLength = 0;
    for (var i = 0; i < this.cells.length; i++) {
        totalCellLength += this.cells[i].length;
    }

    var array = new Int32Array(metadataLength + totalCellLength + this.keys.length + this.bboxes.length);
    array[0] = this.extent;
    array[1] = this.n;
    array[2] = this.padding;

    var offset = metadataLength;
    for (var k = 0; k < cells.length; k++) {
        var cell = cells[k];
        array[NUM_PARAMS + k] = offset;
        array.set(cell, offset);
        offset += cell.length;
    }

    array[NUM_PARAMS + cells.length] = offset;
    array.set(this.keys, offset);
    offset += this.keys.length;

    array[NUM_PARAMS + cells.length + 1] = offset;
    array.set(this.bboxes, offset);
    offset += this.bboxes.length;

    return array.buffer;
};

},{}],22:[function(require,module,exports){
/**
 * Class: GLabelBox
 *  计算注记避让box类
 *
 * Inherits:
 *  - <Object>
 */
const AvoidUtil =  require('./AvoidUtil');
const Util =  require('./Util');
class GLabelBox{
    constructor(ctx,formatFont,bearing) {
        this.boxDistance = 0;
        this.ctx =  ctx;
        this.formatFont = formatFont;
        this.bearing = bearing;
    }

    setBox(features,styleMap,isClient){
        features.forEach(function(f, index) {
            f.hidden = false;
            let style = styleMap[f.styleId];

            //如果要素不显示,没字就不画
            if(style.show == false){
                f.hidden =true;
                return;
            }

            if(f.type == 1){
                //构造点盒子
                if(isClient){
                    this.setPointBox(f,f.datas,this.ctx,style);
                }else{
                    this.setPointBox(f,f.sourceAngleData,this.ctx,style);
                }
            }
            if(f.type == 2){
                //如果是线文本注记
                if(f.lineType == 'text'){
                    if(isClient){
                        this.setTextLineBox(f,f.datas,this.ctx,style);
                    }else{
                        this.setTextLineBox(f,f.sourceAngleData,this.ctx,style);
                    }
                }

                //如果是线编码注记
                if(f.lineType == 'code') {
                    if(isClient){
                        this.setCodeLineBox(f,f.datas,this.ctx,style);
                    }else{
                        this.setCodeLineBox(f,f.sourceAngleData,this.ctx,style);
                    }
                }

                //如果是线箭头注记
                if(f.lineType == 'arrow') {
                    if(isClient){
                        this.setArrowLineBox(f,f.datas,style);
                    }else{
                        this.setArrowLineBox(f,f.sourceAngleData,style);
                    }
                }
            }
        }.bind(this));

        return features;
    }


    //构造点注记的boxs,上下左右四个方向
    setPointBox(feature,datas,ctx,style){
        style.isImportant = false;
        //对要显示的点注记内容按照用户的转换函数进行转换
        if(style.labelFunction){
            let labelFunction = new Function("label", style.labelFunction);
            try{
                feature.label = labelFunction.call({}, feature.attributes[style.labelfield]);
            }catch (e){
                console.warn(feature.label + ': 调用labelFunction失败!');
            }
        }

        let labelIsNotNull = AvoidUtil.isNotNull(feature.label);
        //如既没有文字，又没有图标,则不显示
        if(!labelIsNotNull && !feature.iconImg){
            feature.hidden =true;
            return;
        }

        let param =this.getFontWidthHeight(ctx,feature,style,labelIsNotNull);
        let graphicWidth = param.graphicWidth;
        let graphicHeight = param.graphicHeight;
        let fontWidth = param.fontWidth;
        let fontHeight = param.fontHeight;
        let maxFontheight = param.maxFontheight;

        let pointOffsetX = style.pointOffsetX;
        let pointOffsetY = style.pointOffsetY;
        if(!pointOffsetX){
            pointOffsetX = 0;
        }
        if(!pointOffsetY){
            pointOffsetY = 0;
        }
        let pt = [datas[0][0][0],datas[0][0][1]];
        pt[0] = pt[0]+pointOffsetX;
        pt[1] = pt[1]+pointOffsetY;

        if(pt[0] <0 || pt[1] <0 ){
            feature.hidden =true;
            return;
        }

        let pointBackgroundGap = style.pointBackgroundGap;
        if(style.pointHashBackground != true){
            pointBackgroundGap = 0;
        }

        let graphicDistance = style.graphicDistance;
        if(graphicHeight == 0 || graphicWidth ==0){
            graphicDistance = 0;
        }

        if(!style.hasOwnProperty('direction')){
            style.direction = 0;
        }

        let boxs = [];

        let offsetPostion = [];
        //如果有图标
        if(style.texture){
            //如果有文字
            if(feature.label){
                //避让的box比实际的box多加2个像素，避让很少部分的压盖
                boxs = this.getPointAvoidBox(pt,style,graphicDistance,
                    graphicWidth,graphicHeight,fontWidth+2,maxFontheight+2);

                offsetPostion = this.getPointOffsetPosition(style,graphicDistance,
                    graphicWidth,graphicHeight,fontWidth,fontHeight);
            }else{//只有图标，没有文字
                let middleBox = [ pt[0] - graphicWidth*0.5,
                    pt[1] -fontHeight*0.5,
                    pt[0] +graphicWidth*0.5,
                    pt[1] +fontHeight*0.5];
                middleBox = this.boxScale(middleBox,style.pointBoxDisance);
                boxs = [middleBox];

                offsetPostion = [new Cesium.Cartesian2(0,0)];
            }
        }else{
            let middleBox = [pt[0] - fontWidth*0.5,pt[1] -maxFontheight*0.5,
                pt[0] + fontWidth*0.5 ,pt[1] +maxFontheight*0.5  ];
            middleBox = this.boxScale(middleBox,style.pointBoxDisance);
            boxs = [middleBox];
            offsetPostion = [new Cesium.Cartesian2(-fontWidth*0.5,0)];
        }

        feature.boxs = boxs;
        feature.offsetPostion =offsetPostion;
        feature.box = boxs[0];
    }

    /**
     *  获取点注记的图标宽高，和注记的宽高和注记的最大高度
     * @param ctx
     * @param feature
     * @param style
     * @param labelIsNotNull
     * @returns {{}}
     */
    getFontWidthHeight(ctx,feature,style,labelIsNotNull){
        let currPara = {};
        let graphicWidth = style.graphicWidth;
        let graphicHeight = style.graphicHeight;

        let img = feature.iconImg;
        if(img){
            //如果没有
            if(!graphicWidth || !graphicHeight) {
                graphicWidth = img.width;
                graphicHeight = img.height;
            }
        }else{
            graphicWidth = 0;
            graphicHeight = 0;
        }

        currPara.graphicWidth = graphicWidth;
        currPara.graphicHeight = graphicHeight;
        currPara.fontWidth = graphicWidth;
        currPara.fontHeight = graphicHeight;

        if(labelIsNotNull){

            let lableObject = feature.labels[0];

            //各行的最宽宽度
            currPara.fontWidth =  lableObject.totalWidth;
            //文字的高度 * 文字的行数+  行间距
            currPara.fontHeight = lableObject.totalHeight;
            // 如果点符号高度（用点符号宽度代替）高于文字高度 则用点符号高度替换文字高度
            currPara.maxFontheight = currPara.fontHeight> graphicHeight ? currPara.fontHeight: graphicHeight;
        }

        return currPara;
    }

    /**
     *  获取点注记有图标也有文字时的避让boxs
     * @param pt
     * @param style
     * @param graphicDistance
     * @param graphicWidth
     * @param graphicHeight
     * @param fontWidth
     * @param maxFontheight
     * @returns {[*,*,*,*]}
     */
    getPointAvoidBox(pt,style,graphicDistance,graphicWidth,graphicHeight,fontWidth,maxFontheight){
        let rightBox = [ pt[0] - graphicWidth*0.5 ,
            pt[1] -maxFontheight*0.5,
            pt[0] +graphicWidth*0.5 +graphicDistance+ fontWidth ,
            pt[1] +maxFontheight*0.5];

        let leftBox = [pt[0] -graphicWidth*0.5 -graphicDistance- fontWidth,
            rightBox[1],pt[0] + graphicWidth*0.5,
            rightBox[3]];
        let bottomBox = [pt[0]-fontWidth*0.5,
            pt[1] -graphicHeight*0.5 , pt[0]+fontWidth*0.5,
            pt[1]+graphicHeight*0.5 + graphicDistance +maxFontheight] ;

        let topBox = [bottomBox[0],pt[1]  -graphicDistance  - maxFontheight-graphicHeight*0.5 ,
            bottomBox[2],pt[1]+graphicHeight*0.5];

        rightBox = this.boxScale(rightBox,style.pointBoxDisance);
        leftBox = this.boxScale(leftBox,style.pointBoxDisance);
        bottomBox = this.boxScale(bottomBox,style.pointBoxDisance);
        topBox = this.boxScale(topBox,style.pointBoxDisance);
        let boxs = [rightBox,leftBox,bottomBox,topBox];

        if(!style.isFourDirections && !style.isEightDirections){
            return [boxs[style.direction]];
        }

        if(style.isFourDirections){
            if(style.direction > 0){
                let item = boxs.splice(style.direction,1);
                boxs.unshift(item[0]);
            }
            return boxs;
        }


        let rightTopBox = [rightBox[0],topBox[1],
            rightBox[2],pt[1]+graphicHeight*0.5];
        let rightBottomBox = [rightBox[0],pt[1]-graphicHeight*0.5,
            rightBox[2],bottomBox[3]];
        let leftTopBox = [leftBox[0],topBox[1],
            leftBox[2],pt[1]+graphicHeight*0.5];
        let leftBottomBox = [leftBox[0],pt[1]-graphicHeight*0.5,
            leftBox[2],bottomBox[3]];

        boxs = [rightBox,leftBox,bottomBox,topBox,rightTopBox,rightBottomBox,leftTopBox,leftBottomBox];
        if(style.direction > 0){
            let item = boxs.splice(style.direction,1);
            boxs.unshift(item[0]);
        }
        return boxs;
    }

    /**
     *  获取点注记的偏移位置
     * @param style
     * @param graphicDistance
     * @param graphicWidth
     * @param graphicHeight
     * @param fontWidth
     * @param fontHeight
     * @returns {*}
     */
    getPointOffsetPosition(style,graphicDistance,graphicWidth,graphicHeight,fontWidth,fontHeight){
        //不包括点图标,用于文字绘制的起点坐标
        let rPoint = new Cesium.Cartesian2(graphicWidth*0.5 + graphicDistance ,
            0);
        let lPoint = new Cesium.Cartesian2( -graphicWidth*0.5 - graphicDistance  -fontWidth,
            0);
        let bPoint = new Cesium.Cartesian2(- fontWidth*0.5,
            graphicDistance  + fontHeight*0.5+graphicHeight*0.5);
        let tPoint = new Cesium.Cartesian2(bPoint.x,
            -graphicDistance - fontHeight*0.5-graphicHeight*0.5);

        let drawPositions = [rPoint ,lPoint  ,bPoint  ,tPoint ];

        if(!style.isFourDirections && !style.isEightDirections){
            return [drawPositions[style.direction]];
        }


        if(style.isFourDirections){
            if(style.direction > 0){
                let item = drawPositions.splice(style.direction,1);
                drawPositions.unshift(item[0]);
            }
            return drawPositions;
        }

        let rtPoint = new Cesium.Cartesian2(rPoint.x,tPoint.y);
        let rbPoint = new Cesium.Cartesian2(rPoint.x,bPoint.y);
        let ltPoint = new Cesium.Cartesian2(lPoint.x,tPoint.y);
        let lbPoint = new Cesium.Cartesian2(lPoint.x,bPoint.y);
        drawPositions = [rPoint ,lPoint ,bPoint ,tPoint ,rtPoint ,rbPoint ,ltPoint ,lbPoint];

        if(style.direction > 0){
            let item = drawPositions.splice(style.direction,1);
            drawPositions.unshift(item[0]);
        }
        return drawPositions;
    }

    /**
     * 设置线文字的box
     *  Parameters :
     *  feature - 单个线注记要素
     */
    setTextLineBox(feature,datas,ctx,style){
        let label = feature.label;
        let textPoints = datas;
        if(textPoints.length == 0){
            feature.hidden = true;
            return;
        }

        //将分段的点数据和角度数据保留，留给后面绘制
        feature.textPoints = textPoints;
        //线的boxs
        let lineBoxs = [];
        //如果线注记带底色
        if(style.lineHashBackground == true || textPoints.length ==1){
            let p = textPoints[0][0];
            if(textPoints.length >1){
                //获取线段的中间点
                let index = Math.floor(label.length/2);
                p = textPoints[index][0];
            }


            let w = feature.label.length * style.lineHeight;
            if(ctx){
                ctx.save();
                if(this.formatFont){
                    ctx.font = Util.formatFont(style.lineFillFont,1,true);
                }else{
                    ctx.font = style.lineFillFont;
                }

                w = Util.measureText(feature.label,ctx.font,ctx);
                ctx.restore();
            }else{
                // w = w * scale;
            }


            if(!style.lineBackgroundGap){
                style.lineBackgroundGap = 0;
            }
            let minX = p[0] - w/2 -style.lineBackgroundGap;
            let maxX =  p[0]+ w/2 +style.lineBackgroundGap;
            let minY = p[1] -style.lineHeight*0.5-style.lineBackgroundGap;
            let maxY = p[1]+style.lineHeight*0.5 +style.lineBackgroundGap;
            let box = [minX,minY,maxX,maxY];
            this.boxScale(box,style.lineTextBoxDisance);
            lineBoxs.push(box);
        }else{
            //如果文字需要旋转
            if(style.lineTextRotate || style.lineTextRotate == 0){
                for(let m = 0;m<textPoints.length;m++){
                    textPoints[m][1] = style.lineTextRotate;
                }
            }else{
                // //获取两点连线与x轴的夹角
                // feature.angle = AvoidUtil.getAngle(textPoints[0][0],textPoints[textPoints.length - 1][0]);
                // //如果文字注记旋转角度方向不一致(有的字向左，有的字向右旋转)，则调整为一致
                // AvoidUtil.textToSameBearing(feature.angle,textPoints);
                //更新角度
                this.updateAngle(textPoints);

                if(!style.isImportant){
                    //判断线文字之间的最大夹角是否大于指定的阈值
                    if(this.isMessy(feature,textPoints,style,label)){
                        feature.hidden = true;
                        return;
                    }
                }
            }

            //获取每个字的box,判断每个字之前是否有压盖
            let boxs = this.getLineBoxs(label,textPoints,style,ctx);
            if(boxs){
                lineBoxs =lineBoxs.concat(boxs);
            }else{
                feature.hidden = true;
                return;
            }
        }

        //是否改变方向
        let angle = AvoidUtil.getAngle(textPoints[0][0],textPoints[textPoints.length - 1][0]);
        let showChanged = AvoidUtil.isChangeDirection(label,textPoints[0][0],textPoints[textPoints.length - 1][0],angle);
        feature.changeDirection = showChanged;

        feature.boxs = lineBoxs;
    }

    boxScale(box,pointBoxDisance){
        if(!pointBoxDisance && pointBoxDisance!=0){
            pointBoxDisance = this.boxDistance;
        }

        box[0] = box[0]-pointBoxDisance*0.5;
        box[1] = box[1]-pointBoxDisance*0.5;
        box[2] = box[2]+pointBoxDisance*0.5;
        box[3] = box[3]+pointBoxDisance*0.5;
        return box;
    }


    /**
     * 设置线编码的box
     *  Parameters :
     *  feature - 单个线注记要素
     */
    setCodeLineBox(feature,datas,ctx,style){
        let codePoints = datas;
        if(codePoints.length == 0){
            feature.hidden = true;
            return;
        }

        //如果要显示道路编号
        let p = codePoints[0][0];
        let w = feature.label.length * style.codeLineHeight;
        let scale = 1;
        if(ctx){
            ctx.save();
            if(this.formatFont){
                ctx.font = Util.formatFont(style.codeLineFillFont,1,true);
            }else{
                ctx.font = style.codeLineFillFont;
            }

            w = Util.measureText(feature.label,ctx.font,ctx);
            ctx.restore();
        }else{
            // scale = codePoints[0][3];
            // w = w*scale;
        }


        let minX = p[0] - w/2 -style.codeLineBackgroundGap;
        let maxX =  p[0]+ w/2 +style.codeLineBackgroundGap;
        let minY = p[1] -style.codeLineHeight*0.5-style.codeLineBackgroundGap;
        let maxY = p[1]+ style.codeLineHeight*0.5 +style.codeLineBackgroundGap;
        let box = [minX,minY,maxX,maxY];
        this.boxScale(box,style.lineCodeBoxDisance);
        feature.boxs = [box];
        feature.codePoint = p;
    }

    /**
     * 设置线箭头的box
     *  Parameters :
     *  feature - 单个线注记要素
     */
    setArrowLineBox(feature,datas,style){
        let arrowPoints = datas;
        if(arrowPoints.length != 3){
            feature.hiden = true;
            return;
        }

        let p = arrowPoints[0][0];
        let p1 = arrowPoints[1][0];

        let minX = p[0]<p1[0]?p[0]:p1[0];
        let maxX = p[0]>p1[0]?p[0]:p1[0];
        let minY = p[1]<p1[1]?p[1]:p1[1];
        let maxY = p[1]>p1[1]?p[1]:p1[1];
        let box = [minX,minY,maxX,maxY];
        this.boxScale(box,style.lineArrowBoxDisance);
        feature.boxs = [box];
        feature.arrowPoint = arrowPoints;
    }



    /**
     * 判断线文字之间的最大夹角是否大于指定的阈值
     *  Parameters :
     * textPoints - 文本注记的线段数组
     *  style -要素的样式
     */
    isMessy(feature,textPoints,style,label){
        let firstPoint = textPoints[0][0];
        let minX = firstPoint[0];
        let minY = firstPoint[1];
        let maxX = firstPoint[0];
        let maxY = firstPoint[1];

        let minAngle = textPoints[0][1];
        let maxAngle = textPoints[0][1];
        for(let i = 0;i<label.length;i++){
            let currPoint = textPoints[i][0];
            let currAngle = textPoints[i][1];
            if(currPoint[0]>maxX)   // 判断最大值
                maxX=currPoint[0];
            if(currPoint[0]<minX)   // 判断最小值
                minX=currPoint[0];

            if(currPoint[1]>maxY)   // 判断最大值
                maxY=currPoint[1];
            if(currPoint[1]<minY)   // 判断最小值
                minY=currPoint[1];

            if(currAngle>maxAngle)   // 判断最大值
                maxAngle=currAngle;
            if(currAngle<minAngle)   // 判断最小值
                minAngle=currAngle;
        }

        //如果文字之间，相差的最大角度大于配置的角度度则不画
        if(maxAngle -minAngle > style.angle){
            if(style.angleSwitch ==false  && style.angleColor){
                feature.lineFillStyle = style.angleColor;
            }else{
                return true;
            }
        }
        return false;
    }

    /**
     * 检测线文字之间是否有自压盖
     *  Parameters :
     * boxs -
     *  style -要素的样式
     */
    getLineBoxs(label,textPoints,style,ctx){
        //和其它注记避让的boxs
        let boxs = [];
        //自相交避让的boxs
        let owmCrashBoxs = [];
        for(let i = 0;i<label.length;i++){
            let pt = textPoints[i][0];
            //解决旋转后的注记和不旋转的注记样式不一致的问题
            if(textPoints[i][1] == 0){
                textPoints[i][1] = 0.5;
            }

            let scale = 1;
            if(!ctx){
                // scale = textPoints[i][3];
            }

            //考虑到线文字注记有角度偏转，box统一增加1.2倍
            let labelBox = [pt[0]-style.lineHeight*1.2*0.5*scale,pt[1]-style.lineHeight*1.2*0.5*scale,
                pt[0]+style.lineHeight*1.2*0.5*scale,pt[1]+style.lineHeight*1.2*0.5*scale];
            let owmCrashBox = [pt[0]-style.lineHeight*0.6*0.25*scale,pt[1]-style.lineHeight*0.6*0.25*scale,
                pt[0]+style.lineHeight*0.6*0.25*scale,pt[1]+style.lineHeight*0.6*0.25*scale];
            owmCrashBoxs.push(owmCrashBox);
            boxs.push(labelBox);
        }


        if(!style.isImportant){
            for(let j = 0;j<owmCrashBoxs.length-1;j++){
                let box1 = owmCrashBoxs[j];
                for(let k=j+1 ;k<owmCrashBoxs.length ;k++){
                    let box2 = owmCrashBoxs[k];
                    if(this.crashBox(box1,box2)){
                        return null;
                    }
                }
            }
        }
        return boxs;
    }

    // 两个盒子是否相交.
    crashBox(ibox,jbox){
        return ibox[0] <= jbox[2] &&
            ibox[2]  >= jbox[0] &&
            ibox[1]  <= jbox[3] &&
            ibox[3]  >= jbox[1] ;
    }


    /**
     *  更新线文字注记在gl绘制中的角度
     * @param textPoints
     */
    updateAngle(textPoints){
        let angle = AvoidUtil.getUpdateAngle(textPoints[0][1],this.bearing);

        for(let i = 0;i<textPoints.length;i++){
            textPoints[i][2] = textPoints[i][1]+angle;
        }
    }

}

module.exports = GLabelBox;
},{"./AvoidUtil":17,"./Util":26}],23:[function(require,module,exports){
const GridFilter = require('./../../../utils/gistools/GridFilter');
const Util = require('./Util');
const GisTools = require('../../../utils/gistools/GisTools');
class GridFilterLabel{
    /**
     *  第一次初步过滤
     * @param pointFeatures 点注记集合
     * @param lineFeatures 线注记集合
     * @param styleMap 样式map
     * @param ableWeight 全局是否权重避让
     * @param needSort 第一次过滤是否需要排序
     * @param tilesize 瓦片大小
     * @param cellsize 每个小网格宽度
     * @param buffer 外扩多大像素
     * @param maxPerCell 每个网格内最多放多少个点
     * @returns {{pointFeatures: Array, lineFeatures: Array, importantFeatures: Array}}
     */
    static fristFilter(pointFeatures,lineFeatures,styleMap,ableWeight,needSort,tilesize, cellsize, buffer,maxPerCell){
        if(ableWeight && needSort){
            Util.sort(pointFeatures);
            Util.sort(lineFeatures);
        }

        //第一次过滤
         pointFeatures = GridFilterLabel.fristFilterStart(pointFeatures,tilesize, cellsize, buffer,maxPerCell);
         lineFeatures = GridFilterLabel.fristFilterStart(lineFeatures,tilesize, cellsize, buffer,maxPerCell);
        return {pointFeatures:pointFeatures,lineFeatures:lineFeatures};
    }


    /**
     *  第二次初步过滤
     * @param pointFeatures 点注记集合
     * @param lineFeatures 线注记集合
     * @param styleMap 样式map
     * @param ableWeight 全局是否权重避让
     * @param needSort 第二次过滤是否需要排序
     * @param tilesize 全局画布最大宽
     * @param cellsize 每个小网格宽度
     * @param buffer 外扩多大像素
     * @param maxPerCell 每个网格内最多放多少个点
     * @returns {{pointFeatures: Array, lineFeatures: Array, importantFeatures: Array}}
     */
    static scendFilter(pointFeatures,lineFeatures,styleMap,ableWeight,needSort,tilesize, cellsize, buffer,maxPerCell){
        if(ableWeight && needSort){
            Util.sort(pointFeatures);
            Util.sort(lineFeatures);
        }
        //第二次过滤
         pointFeatures = GridFilterLabel.scendFilterStart(pointFeatures,tilesize, 16, buffer);
         lineFeatures = GridFilterLabel.scendFilterStart(lineFeatures,tilesize, 16, buffer);

        let returnFeatures = [];
        returnFeatures = returnFeatures.concat(pointFeatures);
        returnFeatures = returnFeatures.concat(lineFeatures);
        return returnFeatures;
    }


    /**
     *  移除瓦片外的点注记
     * @param features
     * @param tilesize
     */
    static removeTileOutPointFeatures(features,tileSize){
        let newFeatures = [];
        for(let i = 0;i<features.length;i++){
            let feature = features[i];
            let pt =feature .centerPoint;
            if(pt[0] >= 0 && pt[0] <= tileSize && pt[1] >= 0 && pt[1] <= tileSize){
                newFeatures.push(feature);
            }
        }
        return newFeatures;
    }

    /**
     *  移除瓦片外的线注记
     * @param features
     * @param tilesize
     */
    static removeTileOutLineFeatures(features,tileSize){
        let newFeatures = [];
        for(let i = 0;i<features.length;i++){
            let feature = features[i];
            for(let j = 0;j<feature.datas.length;j++){
                let pt = feature.datas[j][0];
                if(pt[0] >= 0 && pt[0] <= tileSize && pt[1] >= 0 && pt[1] <= tileSize){
                    newFeatures.push(feature);
                    break;
                }
            }
        }
        return newFeatures;
    }

    /**
     *  注记第一次初步格网过滤
     * @param features
     * @param tilesize 瓦片大小
     * @param cellsize 小正方形网格的宽
     * @param buffer  外扩多少像素
     * @param maxPerCell  小正方形中允许放多小个注记
     * @returns {Array}
     */
    static fristFilterStart(features,tilesize, cellsize, buffer,maxPerCell){
        let gridFilter = new GridFilter(tilesize, cellsize, buffer,maxPerCell);
        let returnFeatures = [];
        for(let i = 0;i<features.length;i++){
            let feature = features[i];
            let bool = gridFilter.filter(feature.centerPoint[0],feature.centerPoint[1]);
            if(bool){
                returnFeatures.push(feature);
            }
        }
        return returnFeatures;
    }

    /**
     *  注记第二次box格网过滤
     * @param features
     * @param tilesize 瓦片大小
     * @param cellsize 小正方形网格的宽
     * @param buffer  外扩多少像素
     * @param maxPerCell  小正方形中允许放多小个注记
     * @returns {Array}
     */
    static scendFilterStart(features,tilesize, cellsize, buffer){
        let gridFilter = new GridFilter(tilesize, cellsize, buffer,1);
        let returnFeatures = [];
        for(let i = 0;i<features.length;i++){
            let feature = features[i];
            let bool = gridFilter.filterByBox(feature.filterBox);
            if(bool){
                returnFeatures.push(feature);
            }
        }
        return returnFeatures;
    }



    /**
     *  第三次过滤，注记去重
     * @param features
     * @param tileSize
     * @returns {Array}
     */
    static threeFilter(features,styleMap,tileSize){
        let fs= GridFilterLabel.getImportantOtherFeatures(features,styleMap);

        let labelMap = Util.groupByLabel(fs.otherFeatures);
        let returnFeatures = [];

        let box2= [0,0,tileSize,tileSize];
        for(let label in labelMap){
            let labelArr = labelMap[label];
            if(labelArr.length == 1){
                returnFeatures.push(labelArr[0]);
            }else{
                let inBoxFeatures = [];
                for(let i = 0;i<labelArr.length;i++){
                    let feature = labelArr[i];
                    if(feature.type ==1){
                        if(GisTools.isInBox(feature.box,box2)){
                            inBoxFeatures.push(feature);
                        }else{
                            returnFeatures.push(feature);
                        }
                    }

                    if(feature.type ==2){
                        let isInBox = true;
                        for(let j =0;j<feature.boxs.length;j++){
                            let box = feature.boxs[j];
                            if(!GisTools.isInBox(box,box2)){
                                isInBox = false;
                                break;
                            }
                        }

                        if(isInBox){
                            inBoxFeatures.push(feature);
                        }else{
                            returnFeatures.push(feature);
                        }
                    }
                }

                if(inBoxFeatures.length > 0){
                    //按照权重排序
                    inBoxFeatures = Util.sortPrimaryId(inBoxFeatures);
                    //保留第一个
                    // returnFeatures.push(inBoxFeatures[0]);
                    returnFeatures = returnFeatures.concat(GridFilterLabel.distinctFeatures(inBoxFeatures,styleMap));
                }
            }
        }

        returnFeatures = returnFeatures.concat(fs.importantFeatures);
        return returnFeatures;
    }


    static distinctFeatures(features,styleMap){
        let feature = features[0];
        let field = '';
        if(feature.type == 1){
            field = 'distance';
        }
        if(feature.type == 2){
            if(feature.lineType == 'text'){
                field = 'lineTextDistance';
            }
            if(feature.lineType == 'code'){
                field = 'lineCodeDistance';
            }
        }

        let fs = [];
        fs.push(features[0]);
        for(let i = 0;i<features.length -1;i++){
            let feature = features[i];
            if(feature.hidden ==true){
                continue;
            }
            let nextFeature = features[i+1];
            //求两个点注记之间的距离
            let distance = GridFilterLabel.getDistance(feature.centerPoint,nextFeature.centerPoint);
            let style = styleMap[feature.styleId];
            let d = style[field]?style[field]:0;
            if(distance < d){
                nextFeature.hidden = true;
            }else{
                fs.push(nextFeature);
            }
        }
        return fs;
    }

    /**
     * 求两点之间的距离
     */
    static getDistance(p1,p2){
        let calX = p2[0] - p1[0];
        let calY = p2[1] - p1[1];
        return Math.pow((calX *calX + calY * calY), 0.5);
    }


    /**
     *  将注记分为重要注记和非重要注记
     * @param features
     * @param styleMap
     */
    static getImportantOtherFeatures(features,styleMap){
        let importantFeatures =[];
        let otherFeatures = [];

        for(let i = 0;i<features.length;i++){
            let feature = features[i];
            let style = styleMap[feature.styleId];
            if(style.isImportant){
                importantFeatures.push(feature);
            }else{
                otherFeatures.push(feature);
            }
        }

        return {otherFeatures:otherFeatures,importantFeatures:importantFeatures};
    }

}

module.exports = GridFilterLabel;
},{"../../../utils/gistools/GisTools":37,"./../../../utils/gistools/GridFilter":38,"./Util":26}],24:[function(require,module,exports){
/**
 * Created by kongjian on 2017/5/1.
 */
class LabelDrawer{
    constructor(layerDataMap,styleMap,level) {
        this.layerDataMap = layerDataMap;
        this.level = level;
        this.styleMap = styleMap;
        this.propertyGetterMap = {};
    }

    getLayer(layername){
        this.layerDatas = {};
        let data = this.layerDataMap[layername];
        if(data == null || data.features == null){
            return this;
        }
        this.propertyGetterMap[layername] = this.getProperty(data.fieldsConfig);
        this.layerDatas[layername] = data;
        return this;
    }

    getAllLayer(){
        this.layerDatas = this.layerDataMap;
        for(let layername in this.layerDataMap){
            this.propertyGetterMap[layername] = this.getProperty(this.layerDataMap[layername].fieldsConfig);
        }
        return this;
    }


    getGroupLayer(layername,value){
        this.layerDatas = {};
        let valueArr = value.split(',');
        let length = valueArr.length;
        if(length == 0){
            return this;
        }

        let data = this.layerDataMap[layername];
        if(data == null || data.features == null){
            return this;
        }
        this.propertyGetterMap[layername] = this.getProperty(data.fieldsConfig);
        this.layerDatas[layername] = data;
        return this;
    }

    getProperty(fieldsConfig){
        let propertyConfig = {};
        let idIndex = 0;
        for(var i = 0 ;i < fieldsConfig.length; i ++){
            if(fieldsConfig[i].id == 'true' || fieldsConfig[i].id == true){
                idIndex = fieldsConfig[i].index;
            }
            propertyConfig[fieldsConfig[i].name] = parseInt(fieldsConfig[i].index);
        }
        return {propertyConfig:propertyConfig,idIndex:idIndex};
    }

    setStyle(fn){
		for(let layername in  this.layerDatas){
		    let layerData = this.layerDatas[layername];
		    let propertyGetter = this.propertyGetterMap[layername];
		    for(let i =0;i<layerData.features.length;i++){
                let feature = layerData.features[i];

                let get = function(key){
                    return feature[1][propertyGetter.propertyConfig[key]]
                };

                let style = fn.call({},this.level,get);

                if(style && style.show == true){
                    if(!this.styleMap[style._id]){
                        this.styleMap[style._id] = style;
                    }
                    feature.avoidWeight = this.getWeight(style,feature,propertyGetter);
                    feature.styleId = style._id;
                }

            }
        }
    }

    setGlobalStyle(fn){
        this.globalStyle = fn.call({});
    }

    getWeight(style,feature,propertyGetter){

        let weight = feature[1][propertyGetter.propertyConfig[style.avoidField]];
        if (weight) {
            weight = parseInt(weight);
            if (isNaN(weight)) {
                weight = 0;
            }
        }else{
            weight =  0;
        }

        if(weight ==0){
            if(style.avoidWeight){
                return style.avoidWeight;
            }
        }
        return weight;
    }

    draw(){

    }
}

module.exports = LabelDrawer;


},{}],25:[function(require,module,exports){
const GCutLine = require('./GCutLine');
const AvoidUtil =  require('./AvoidUtil');
const _path = './../../../../';
let TextureManager =null;
class ParseLabelData{
    /**
     * 解析瓦片内注记数据
     * @param layerDatas
     * @param styleMap
     * @param isClient
     */
    static parseLayerDatas(layerDatas,styleMap,textures,xyz,isClient){
        let pointFeatures = [];
        let lineFeatures =[];
        for(let layername in layerDatas){
            if(layername == '_layerAvoids'){
                continue;
            }
            let layerData = layerDatas[layername];
            layerData.xyz = xyz;
            let propertyGetter = ParseLabelData.getProperty(layerData.fieldsConfig);
            if(layerData.type == 1){
                let pfs = ParseLabelData.parsePointLayer(layerData,layername,propertyGetter,styleMap,textures,isClient);
                pointFeatures = pointFeatures.concat(pfs);
            }
            if(layerData.type == 2){
                let lfs = ParseLabelData.parseLineLayer(layerData,layername,propertyGetter,styleMap,isClient);
                lineFeatures = lineFeatures.concat(lfs);
            }
        }

        return {pointFeatures:pointFeatures,lineFeatures:lineFeatures};
    }

    /**
     *  解析点图层数据
     */
    static parsePointLayer(layerData,layername,propertyGetter,styleMap,textures,isClient){
        let pointFeatures = [];
        for(let i =0;i<layerData.features.length;i++){
            let feature = layerData.features[i];
            let style = styleMap[feature.styleId];
            if(!style){
                continue;
            }

            feature.centerPoint = feature[2];
            feature.attributeId = layername +'__'+ feature[1][propertyGetter.idIndex];
            feature.layerName = layername;
            feature.xyz = layerData.xyz;
            feature.propertyGetter =propertyGetter;
            feature.type =layerData.type;
            feature.weight = feature.avoidWeight;
            if(feature.avoidWeight == null || isNaN(feature.avoidWeight)){
                feature.avoidWeight = style.avoidWeight;
                feature.weight = feature.avoidWeight;
                if(feature.weight == null){
                    feature.weight = 0;
                    feature.avoidWeight = 0;
                }
            }
            if(style.isImportant){
                feature.avoidWeight = 99999999;
                feature.weight = 99999999;
            }

            feature = ParseLabelData.parsePoint(feature,style,textures,isClient);
            pointFeatures.push(feature);
        }

        return pointFeatures;
    }


    /**
     *  解析线图层数据
     */
    static parseLineLayer(layerData,layername,propertyGetter,styleMap,isClient){
        let lineFeatures = [];
        for(let i =0;i<layerData.features.length;i++){
            let feature = layerData.features[i];
            let style = styleMap[feature.styleId];
            if(!style){
                continue;
            }
            feature.layerName = layername;
            let features = ParseLabelData.parseLine(feature,style,layerData,propertyGetter,isClient);
            lineFeatures = lineFeatures.concat(features);
        }
        return lineFeatures;
    }

    /**
     *  解析点数据
     * @param feature
     * @param style
     * @param isClient
     * @returns {Array}
     */
    static parsePoint(feature,style,textures,isClient){
        if(isClient){
            feature.iconImg = textures[style.texture];
        }else{
            if(TextureManager == null){
                TextureManager = require(_path + 'src/process/texture/TextureManager');
            }
            if(style.texture){
                let texture = TextureManager.getTexture(style.texture);
                if(texture != null) {
                    feature.iconImg = texture.toPattern(ratio);
                }
            }
        }

        feature.attributes = ParseLabelData.getAttributes(feature[1],feature.propertyGetter);
        let point = feature[2];
        let sourceAngleData = [[point, 0]];
        let label = feature.attributes[style.labelfield];
        feature.primaryId = feature.attributeId + '_row_' + feature.xyz.y + '_col_' + feature.xyz.x + '_level_' + feature.xyz.z + '_x_' + sourceAngleData[0][0][0] + '_y_' + sourceAngleData[0][0][1];
        //去掉尾部的空格
        feature.label = AvoidUtil.formatLabel(label);
        feature.weight = feature.avoidWeight;

        let radius = 0;
        if(style.pointBoxDisance){
            radius = style.pointBoxDisance*0.5;
        }

        feature.filterBox =[feature.centerPoint[0]-radius,feature.centerPoint[1]-radius,
            feature.centerPoint[0]+radius,feature.centerPoint[1]+radius];
        feature.sourceData = point;
        feature.sourceAngleData = sourceAngleData;

        if(isClient){
            feature.id = Math.round(Math.random() * 256 * 256 * 256);
            // feature.datas = ParseLabelData.transformData(sourceAngleData, feature.xyz);
        }
        // else{
        //     feature.datas = sourceAngleData;
        // }

        return feature;
    }

    /**
     *  解析线数据
     * @param itemData
     * @param style
     * @param isClient
     * @returns {Array}
     */
    static parseLine(feature,style,layerData,propertyGetter,isClient){
        if (feature[2].length == 0) {
            return [];
        }

        let lines = [];
        ParseLabelData.processLineString(lines,feature[2],feature,style,layerData,propertyGetter,isClient);
        return lines;
    }

    static processLineString(lines,components,feature,style,layerData,propertyGetter,isClient) {
        if (Array.isArray(components[0])) {
            let len = components.length;
            for (let i = 0; i < len; i++) {
                let component = components[i];
                ParseLabelData.processLineString(lines,component,feature,style,layerData,propertyGetter,isClient);
            }
        } else {
            let ls = ParseLabelData.parseMultiLine(feature,components,layerData,propertyGetter,style,isClient);
            for(let i =0;i<ls.length;i++){
                lines.push(ls[i]);
            }
        }
    }

    /**
     *  解析多线数据
     * @param itemData
     * @param style
     * @param isClient
     * @returns {Array}
     */
    static parseMultiLine(feature,line, layerData,propertyGetter,style,isClient){
        let attributes = ParseLabelData.getAttributes(feature[1],propertyGetter);
        let multiLines = [];
        let label = attributes[style.labelfield];
        let roadCodeLabel = attributes[style.roadCodeLabel];
        //去掉尾部的空格
        label = AvoidUtil.formatLabel(label);
        //去掉尾部的空格
        roadCodeLabel = AvoidUtil.formatLabel(roadCodeLabel);

        let objectid = feature[1][propertyGetter.idIndex];
        let attributeId = feature.layerName +'__'+ objectid;
        let weight = feature.avoidWeight;
        if(style.isImportant){
            weight = 99999999;
        }

        let featureItem = {
            type: layerData.type,
            sourceData: line,
            label: label,
            weight: feature.avoidWeight,
            roadCodeLabel: roadCodeLabel,
            attributes: attributes,
            attributeId:attributeId ,
            styleId: feature.styleId,
            xyz: layerData.xyz,
            layerName: feature.layerName
        };
        multiLines = multiLines.concat(ParseLabelData.cutLineFeature(featureItem,style,isClient, false));
        return multiLines;
    }


    /**
     *  切割线注记
     * @param feature
     * @param style
     * @param isClient
     * @param isLocal
     * @returns {*}
     */
    static cutLineFeature(feature, style,isClient,isLocal){
        if(isClient) {
            if (style.type == '_default__') {
                feature.sourceAngleData = ParseLabelData.lineToSourceAngleData(feature.sourceData);
                // feature.datas = ParseLabelData.transformData(feature.sourceAngleData, feature.xyz);
                return [feature];
            }
        }

        let features = GCutLine.cutLineFeature(feature,style,1.0);
        //默认外扩为10
        let radius = 5;

        for (let i = 0; i < features.length; i++) {
            let f = features[i];

            f.primaryId = f.attributeId + '_row_' + feature.xyz.y + '_col_' + feature.xyz.x + '_level_' + feature.xyz.z
                + '_x_' + f.sourceAngleData[0][0][0] + '_y_' + f.sourceAngleData[0][0][1];

            if(isClient){
                //转换为屏幕坐标
                // if (isLocal) {
                //     f.datas = feature.transformData(this.extent, this.res);
                // } else {
                //     f.datas = ParseLabelData.transformData(f.sourceAngleData, f.xyz,maxExtent,extent,res,tileSize);
                // }
                //用于拾取的id
                f.id = Math.round(Math.random() * 256 * 256 * 256);
            }
            // else{
            //     f.datas = f.sourceAngleData;
            // }

            f.layerName = feature.layerName;
            //获取注记的中心点
            if (f.lineType == 'text') {
                let centerIndex = Math.floor(f.sourceAngleData.length / 2);
                f.centerPoint = f.sourceAngleData[centerIndex][0];
                if(style.lineTextBoxDisance){
                    //杭州的外扩距离设置太大，导致大片没线注记，故注释掉了这段
                    radius = style.lineTextBoxDisance*0.5;
                }
            }

            //获取注记的中心点
            if (f.lineType == 'code') {
                f.centerPoint = f.sourceAngleData[0][0];
                if(style.lineCodeBoxDisance){
                    radius = style.lineCodeBoxDisance*0.5;
                }
            }

            //获取注记的中心点
            if (f.lineType == 'arrow') {
                f.centerPoint = f.sourceAngleData[1][0];
            }

            //第二次过滤的box
            f.filterBox = [f.centerPoint[0]-radius,f.centerPoint[1]-radius,f.centerPoint[0]+radius,f.centerPoint[1]+radius];
        }
        return features;
    }

    /**
     * 将线注记原始坐标带点和角度的格式，和切过的线的格式一致（针对默认样式的线主机）
     * Parameters:
     * line - 线注记原始数据
     * Returns:
     */
    static lineToSourceAngleData(line) {
        let sourceAngleData = [];
        for (let i = 0; i < line.length; i++) {
            let x = line[i];
            let y = line[i + 1];
            sourceAngleData.push([[x, y], 0]);
            i++;
        }
        return sourceAngleData;
    };

    /**
     * 将瓦片内坐标转换为当前屏幕坐标
     * Parameters:
     * points - 瓦片内坐标数组,item示例：[[12,20],0] [12,20]为点坐标，0为旋转的角度
     * xyz - 瓦片的层行列号
     * Returns:
     * rdata - 本地屏幕内坐标数组
     */
    static transformData(points, xyz,maxExtent,extent,res,tileSize) {
        //取出当前视口左上角的地理坐标
        let left = extent[0];
        let top = extent[3];

        //地图最大的范围
        let mLeft = maxExtent[0];
        let mTop = maxExtent[3];

        //计算坐上角的屏幕坐标
        let x = (left - mLeft) / res;
        let y = (mTop - top) / res;

        let rPoint = [];

        for (let i = 0; i < points.length; i++) {
            let point = points[i][0];
            let gx = point[0] + xyz.x * tileSize;
            let gy = point[1] + xyz.y * tileSize;
            let p = [gx - x, gy - y];
            rPoint.push([p, points[i][1]]);
        }
        return rPoint;
    };

    static toLonlat(rectangle,point,tileSize){
        var lon = CesiumMath.toDegrees(rectangle.west + rectangle.width/ tileSize* x);
        var lat = CesiumMath.toDegrees(rectangle.north - rectangle.height/ tileSize* y);
        return [lon,lat];
    }




    static getProperty(fieldsConfig){
        let propertyConfig = {};
        let idIndex = 0;
        for(var i = 0 ;i < fieldsConfig.length; i ++){
            if(fieldsConfig[i].id == 'true' || fieldsConfig[i].id == true){
                idIndex = fieldsConfig[i].index;
            }
            propertyConfig[fieldsConfig[i].name] = parseInt(fieldsConfig[i].index);
        }
        return {propertyConfig:propertyConfig,idIndex:idIndex};
    }

    static getAttributes(feature,propertyGetter){
        let attributes = {};
        let propertyConfig = propertyGetter.propertyConfig;
        for(let name in propertyConfig){
            attributes[name] = feature[propertyConfig[name]];
        }
        return attributes;
    }
}

module.exports = ParseLabelData;
},{"./AvoidUtil":17,"./GCutLine":19}],26:[function(require,module,exports){
class Util{
    static measureText(label,font,ctx){
        return ctx.measureText(label).width;
    }

    //要素排序.
    static sort(features,styleMap,hasImportant){
        if(features.length > 0) {
            //从大到少排序
            return  features.sort(function (a, b) {
                if(hasImportant){
                    let aStyle = styleMap[a.styleId];
                    let bStyle = styleMap[b.styleId];
                    if(aStyle.isImportant && !bStyle.isImportant){
                        return -1;
                    }
                    if(bStyle.isImportant && !aStyle.isImportant){
                        return 1;
                    }
                }

                let aAttr = a.weight;
                let bAttr = b.weight;

                // let aId = a.attributeId;
                // let bId = b.attributeId;
                let aId = a.primaryId;
                let bId = b.primaryId;

                if(!aAttr){
                    aAttr = -1;
                }
                if(!bAttr){
                    bAttr = -1;
                }
                if (aAttr < bAttr) {
                    return 1;
                } else if (aAttr == bAttr){
                    if(aId < bId){
                        return 1;
                    }
                    else{
                        return -1;
                    }
                } else {
                    return -1;
                }
            }.bind(this));
        }
    }

    //要素排序.
    static sortPrimaryId(features){
        if(features.length > 0) {
            //从大到少排序
            return  features.sort(function (a, b) {
                let aAttr = a.weight;
                let bAttr = b.weight;

                let aId = a.primaryId;
                let bId = b.primaryId;

                if(!aAttr){
                    aAttr = -1;
                }
                if(!bAttr){
                    bAttr = -1;
                }
                if (aAttr < bAttr) {
                    return 1;
                } else if (aAttr == bAttr){
                    if(aId < bId){
                        return 1;
                    }
                    else{
                        return -1;
                    }
                } else {
                    return -1;
                }
            }.bind(this));
        }
    }

    /**
     * 把注记按照显示的注记名称分组
     * @param features
     * @returns {{}}
     */
    static groupByLabel(features){
        let labelMap = {};
        for(let i = 0;i<features.length;i++){
            let feature = features[i];
            if(feature.label == null && feature.iconImg != null){
                if(labelMap[feature.attributeId] == null){
                    labelMap[feature.attributeId] = [];
                }
                labelMap[feature.attributeId].push(feature);
            }else {
                if (!labelMap[feature.type + '_' + feature.label]) {
                    labelMap[feature.type + '_' + feature.label] = [];
                }
                labelMap[feature.type + '_' + feature.label].push(feature);
            }
        }
        return labelMap;
    }
}
module.exports = Util;




},{}],27:[function(require,module,exports){
'use strict';

const verticalizePunctuation = require('./verticalize_punctuation');
const Glyphs = require('./glyphs');
const Protobuf = require('pbf');
const Resource = Cesium.Resource;

/**
 * A glyph source has a URL from which to load new glyphs and manages
 * GlyphAtlases in which to store glyphs used by the requested fontstacks
 * and ranges.
 *
 * @private
 */
class GlyphSource {
    /**
     * @param {string} url glyph template url
     */
    constructor(url) {
        // this.url = url && normalizeURL(url);
        this.url = url;
        this.stacks = {};
        this.loading = {};
    }


    getSimpleGlyphs(fontstack, glyphIDs, callback) {
        if (this.stacks[fontstack] === undefined) {
            this.stacks[fontstack] = {};
        }

        const glyphs = {};
        const stack = this.stacks[fontstack];

        // the number of pixels the sdf bitmaps are padded by
        const buffer = 3;

        const missing = {};
        let remaining = 0;

        const getGlyph = (glyphID) => {
            const range = Math.floor(glyphID / 256);

            if (stack[range]) {
                const glyph = stack[range].glyphs[glyphID];
                if (glyph) glyphs[glyphID] = glyph;
            } else {
                if (missing[range] === undefined) {
                    missing[range] = [];
                    remaining++;
                }
                missing[range].push(glyphID);
            }
        };

        for (let i = 0; i < glyphIDs.length; i++) {
            const glyphID = glyphIDs[i];
            const string = String.fromCharCode(glyphID);
            getGlyph(glyphID);
            if (verticalizePunctuation.lookup[string]) {
                getGlyph(verticalizePunctuation.lookup[string].charCodeAt(0));
            }
        }

        if (!remaining) callback(undefined, glyphs, fontstack);

        const onRangeLoaded = (err, range, data) => {
            if (!err) {
                const stack = this.stacks[fontstack][range] = data.stacks[0];
                for (let i = 0; i < missing[range].length; i++) {
                    const glyphID = missing[range][i];
                    const glyph = stack.glyphs[glyphID];
                    if (glyph){
                        glyphs[glyphID] = glyph;
                    }
                }
            }
            remaining--;
            if (!remaining) callback(undefined, glyphs, fontstack);
        };

        for (const r in missing) {
            this.loadRange(fontstack, r, onRangeLoaded);
        }
    }

    loadRange(fontstack, range, callback) {
        if (range * 256 > 65535) return callback('glyphs > 65535 not supported');

        if (this.loading[fontstack] === undefined) {
            this.loading[fontstack] = {};
        }
        const loading = this.loading[fontstack];

        if (loading[range]) {
            loading[range].push(callback);
        } else {
            loading[range] = [callback];

            const rangeName = `${range * 256}-${range * 256 + 255}`;
            const url = glyphUrl(fontstack, rangeName, this.url);

            let resource = new Resource({url:url});
            resource.fetchArrayBuffer().then(function(data){
                const glyphs = new Glyphs(new Protobuf(data));
                for (let i = 0; i < loading[range].length; i++) {
                    loading[range][i](null, range, glyphs);
                }
                delete loading[range];
            }.bind(this));
            // ajax.getArrayBuffer(url, (err, response) => {
            //     const glyphs = !err && new Glyphs(new Protobuf(response.data));
            //     for (let i = 0; i < loading[range].length; i++) {
            //         loading[range][i](err, range, glyphs);
            //     }
            //     delete loading[range];
            // });
        }
    }
}

/**
 * Use CNAME sharding to load a specific glyph range over a randomized
 * but consistent subdomain.
 * @param {string} fontstack comma-joined fonts
 * @param {string} range comma-joined range
 * @param {url} url templated url
 * @param {string} [subdomains=abc] subdomains as a string where each letter is one.
 * @returns {string} a url to load that section of glyphs
 * @private
 */
function glyphUrl(fontstack, range, url) {
    fontstack = encodeURIComponent(fontstack);
    return url
        .replace('{fontstack}', fontstack)
        .replace('{range}', range);
}

module.exports = GlyphSource;

},{"./glyphs":28,"./verticalize_punctuation":31,"pbf":7}],28:[function(require,module,exports){
'use strict';

module.exports = Glyphs;

function toRGBA(glyph){
    glyph.height=glyph.height + 6;
    glyph.width = glyph.width + 6;

    let dist = new Uint8Array(glyph.bitmap.length*4);
    //由a通道恢复成rgba通道
    for(let i = 0;i<glyph.bitmap.length;i++){
        let a = glyph.bitmap[i];
        // if(a != 0){
        //     dist[i*4 + 0] = a;
        //     dist[i*4 + 1] = a;
        //     dist[i*4 + 2] = a;
        //     dist[i*4 + 3] = a;
        // }
        if(a != 0){
            dist[i*4 + 0] = a;
            dist[i*4 + 1] = a;
            dist[i*4 + 2] = a;
            dist[i*4 + 3] = a;
        }
    }
    glyph.arrayBufferView = dist;
}


// function toRGBA(glyph){
//     glyph.rw = glyph.width;
//     glyph.rh = glyph.height;
//     glyph.height = glyph.height + 6 + (glyph.width - glyph.height);
//     glyph.width = glyph.width + 6;
//
//     var gamma = 0.21;
//     var buff = (256.0 - 64.0) / 256.0;
//     var p1 = buff - gamma;
//     var p2 = buff + gamma;
//
//     let dist = new Uint8Array(glyph.bitmap.length*4);
//     for(let i = 0;i<glyph.bitmap.length;i++){
//         let a = glyph.bitmap[i];
//         var o = smoothstep(p1,p2,a/256);
//         dist[i*4 + 0] = 255;
//         dist[i*4 + 1] = 255;
//         dist[i*4 + 2] = 255;
//         dist[i*4 + 3] = o*256;
//     }
//     glyph.arrayBufferView = dist;
// }

function smoothstep (min, max, value) {
    var x = Math.max(0, Math.min(1, (value-min)/(max-min)));
    return x*x*(3 - 2*x);
};

function Glyphs(pbf, end) {
    this.stacks = pbf.readFields(readFontstacks, [], end);
    for(var i =0;i<this.stacks.length;i++){
        var glyphs = this.stacks[i].glyphs;
        for(var key in glyphs){
            var glyph =glyphs[key];
            toRGBA(glyph);
        }
    }
}

function readFontstacks(tag, stacks, pbf) {
    if (tag === 1) {
        const fontstack = pbf.readMessage(readFontstack, {glyphs: {}});
        stacks.push(fontstack);
    }
}

function readFontstack(tag, fontstack, pbf) {
    if (tag === 1) fontstack.name = pbf.readString();
    else if (tag === 2) fontstack.range = pbf.readString();
    else if (tag === 3) {
        const glyph = pbf.readMessage(readGlyph, {});
        fontstack.glyphs[glyph.id] = glyph;
    }
}

function readGlyph(tag, glyph, pbf) {
    if (tag === 1) glyph.id = pbf.readVarint();
    else if (tag === 2) glyph.bitmap = pbf.readBytes();
    else if (tag === 3) glyph.width = pbf.readVarint();
    else if (tag === 4) glyph.height = pbf.readVarint();
    else if (tag === 5) glyph.left = pbf.readSVarint();
    else if (tag === 6) glyph.top = pbf.readSVarint();
    else if (tag === 7) glyph.advance = pbf.readVarint();
}

},{}],29:[function(require,module,exports){
'use strict';
// @flow

// The following table comes from <http://www.unicode.org/Public/9.0.0/ucd/Blocks.txt>.
// Keep it synchronized with <http://www.unicode.org/Public/UCD/latest/ucd/Blocks.txt>.

// type UnicodeBlockLookup = {[key: string]: (char: number) => boolean};

const unicodeBlockLookup = {
    // 'Basic Latin': (char) => char >= 0x0000 && char <= 0x007F,
    'Latin-1 Supplement': (char) => char >= 0x0080 && char <= 0x00FF,
    // 'Latin Extended-A': (char) => char >= 0x0100 && char <= 0x017F,
    // 'Latin Extended-B': (char) => char >= 0x0180 && char <= 0x024F,
    // 'IPA Extensions': (char) => char >= 0x0250 && char <= 0x02AF,
    // 'Spacing Modifier Letters': (char) => char >= 0x02B0 && char <= 0x02FF,
    // 'Combining Diacritical Marks': (char) => char >= 0x0300 && char <= 0x036F,
    // 'Greek and Coptic': (char) => char >= 0x0370 && char <= 0x03FF,
    // 'Cyrillic': (char) => char >= 0x0400 && char <= 0x04FF,
    // 'Cyrillic Supplement': (char) => char >= 0x0500 && char <= 0x052F,
    // 'Armenian': (char) => char >= 0x0530 && char <= 0x058F,
    //'Hebrew': (char) => char >= 0x0590 && char <= 0x05FF,
    'Arabic': (char) => char >= 0x0600 && char <= 0x06FF,
    //'Syriac': (char) => char >= 0x0700 && char <= 0x074F,
    'Arabic Supplement': (char) => char >= 0x0750 && char <= 0x077F,
    // 'Thaana': (char) => char >= 0x0780 && char <= 0x07BF,
    // 'NKo': (char) => char >= 0x07C0 && char <= 0x07FF,
    // 'Samaritan': (char) => char >= 0x0800 && char <= 0x083F,
    // 'Mandaic': (char) => char >= 0x0840 && char <= 0x085F,
    'Arabic Extended-A': (char) => char >= 0x08A0 && char <= 0x08FF,
    // 'Devanagari': (char) => char >= 0x0900 && char <= 0x097F,
    // 'Bengali': (char) => char >= 0x0980 && char <= 0x09FF,
    // 'Gurmukhi': (char) => char >= 0x0A00 && char <= 0x0A7F,
    // 'Gujarati': (char) => char >= 0x0A80 && char <= 0x0AFF,
    // 'Oriya': (char) => char >= 0x0B00 && char <= 0x0B7F,
    // 'Tamil': (char) => char >= 0x0B80 && char <= 0x0BFF,
    // 'Telugu': (char) => char >= 0x0C00 && char <= 0x0C7F,
    // 'Kannada': (char) => char >= 0x0C80 && char <= 0x0CFF,
    // 'Malayalam': (char) => char >= 0x0D00 && char <= 0x0D7F,
    // 'Sinhala': (char) => char >= 0x0D80 && char <= 0x0DFF,
    // 'Thai': (char) => char >= 0x0E00 && char <= 0x0E7F,
    // 'Lao': (char) => char >= 0x0E80 && char <= 0x0EFF,
    // 'Tibetan': (char) => char >= 0x0F00 && char <= 0x0FFF,
    // 'Myanmar': (char) => char >= 0x1000 && char <= 0x109F,
    // 'Georgian': (char) => char >= 0x10A0 && char <= 0x10FF,
    'Hangul Jamo': (char) => char >= 0x1100 && char <= 0x11FF,
    // 'Ethiopic': (char) => char >= 0x1200 && char <= 0x137F,
    // 'Ethiopic Supplement': (char) => char >= 0x1380 && char <= 0x139F,
    // 'Cherokee': (char) => char >= 0x13A0 && char <= 0x13FF,
    'Unified Canadian Aboriginal Syllabics': (char) => char >= 0x1400 && char <= 0x167F,
    // 'Ogham': (char) => char >= 0x1680 && char <= 0x169F,
    // 'Runic': (char) => char >= 0x16A0 && char <= 0x16FF,
    // 'Tagalog': (char) => char >= 0x1700 && char <= 0x171F,
    // 'Hanunoo': (char) => char >= 0x1720 && char <= 0x173F,
    // 'Buhid': (char) => char >= 0x1740 && char <= 0x175F,
    // 'Tagbanwa': (char) => char >= 0x1760 && char <= 0x177F,
    // 'Khmer': (char) => char >= 0x1780 && char <= 0x17FF,
    // 'Mongolian': (char) => char >= 0x1800 && char <= 0x18AF,
    'Unified Canadian Aboriginal Syllabics Extended': (char) => char >= 0x18B0 && char <= 0x18FF,
    // 'Limbu': (char) => char >= 0x1900 && char <= 0x194F,
    // 'Tai Le': (char) => char >= 0x1950 && char <= 0x197F,
    // 'New Tai Lue': (char) => char >= 0x1980 && char <= 0x19DF,
    // 'Khmer Symbols': (char) => char >= 0x19E0 && char <= 0x19FF,
    // 'Buginese': (char) => char >= 0x1A00 && char <= 0x1A1F,
    // 'Tai Tham': (char) => char >= 0x1A20 && char <= 0x1AAF,
    // 'Combining Diacritical Marks Extended': (char) => char >= 0x1AB0 && char <= 0x1AFF,
    // 'Balinese': (char) => char >= 0x1B00 && char <= 0x1B7F,
    // 'Sundanese': (char) => char >= 0x1B80 && char <= 0x1BBF,
    // 'Batak': (char) => char >= 0x1BC0 && char <= 0x1BFF,
    // 'Lepcha': (char) => char >= 0x1C00 && char <= 0x1C4F,
    // 'Ol Chiki': (char) => char >= 0x1C50 && char <= 0x1C7F,
    // 'Cyrillic Extended-C': (char) => char >= 0x1C80 && char <= 0x1C8F,
    // 'Sundanese Supplement': (char) => char >= 0x1CC0 && char <= 0x1CCF,
    // 'Vedic Extensions': (char) => char >= 0x1CD0 && char <= 0x1CFF,
    // 'Phonetic Extensions': (char) => char >= 0x1D00 && char <= 0x1D7F,
    // 'Phonetic Extensions Supplement': (char) => char >= 0x1D80 && char <= 0x1DBF,
    // 'Combining Diacritical Marks Supplement': (char) => char >= 0x1DC0 && char <= 0x1DFF,
    // 'Latin Extended Additional': (char) => char >= 0x1E00 && char <= 0x1EFF,
    // 'Greek Extended': (char) => char >= 0x1F00 && char <= 0x1FFF,
    'General Punctuation': (char) => char >= 0x2000 && char <= 0x206F,
    // 'Superscripts and Subscripts': (char) => char >= 0x2070 && char <= 0x209F,
    // 'Currency Symbols': (char) => char >= 0x20A0 && char <= 0x20CF,
    // 'Combining Diacritical Marks for Symbols': (char) => char >= 0x20D0 && char <= 0x20FF,
    'Letterlike Symbols': (char) => char >= 0x2100 && char <= 0x214F,
    'Number Forms': (char) => char >= 0x2150 && char <= 0x218F,
    // 'Arrows': (char) => char >= 0x2190 && char <= 0x21FF,
    // 'Mathematical Operators': (char) => char >= 0x2200 && char <= 0x22FF,
    'Miscellaneous Technical': (char) => char >= 0x2300 && char <= 0x23FF,
    'Control Pictures': (char) => char >= 0x2400 && char <= 0x243F,
    'Optical Character Recognition': (char) => char >= 0x2440 && char <= 0x245F,
    'Enclosed Alphanumerics': (char) => char >= 0x2460 && char <= 0x24FF,
    // 'Box Drawing': (char) => char >= 0x2500 && char <= 0x257F,
    // 'Block Elements': (char) => char >= 0x2580 && char <= 0x259F,
    'Geometric Shapes': (char) => char >= 0x25A0 && char <= 0x25FF,
    'Miscellaneous Symbols': (char) => char >= 0x2600 && char <= 0x26FF,
    // 'Dingbats': (char) => char >= 0x2700 && char <= 0x27BF,
    // 'Miscellaneous Mathematical Symbols-A': (char) => char >= 0x27C0 && char <= 0x27EF,
    // 'Supplemental Arrows-A': (char) => char >= 0x27F0 && char <= 0x27FF,
    // 'Braille Patterns': (char) => char >= 0x2800 && char <= 0x28FF,
    // 'Supplemental Arrows-B': (char) => char >= 0x2900 && char <= 0x297F,
    // 'Miscellaneous Mathematical Symbols-B': (char) => char >= 0x2980 && char <= 0x29FF,
    // 'Supplemental Mathematical Operators': (char) => char >= 0x2A00 && char <= 0x2AFF,
    'Miscellaneous Symbols and Arrows': (char) => char >= 0x2B00 && char <= 0x2BFF,
    // 'Glagolitic': (char) => char >= 0x2C00 && char <= 0x2C5F,
    // 'Latin Extended-C': (char) => char >= 0x2C60 && char <= 0x2C7F,
    // 'Coptic': (char) => char >= 0x2C80 && char <= 0x2CFF,
    // 'Georgian Supplement': (char) => char >= 0x2D00 && char <= 0x2D2F,
    // 'Tifinagh': (char) => char >= 0x2D30 && char <= 0x2D7F,
    // 'Ethiopic Extended': (char) => char >= 0x2D80 && char <= 0x2DDF,
    // 'Cyrillic Extended-A': (char) => char >= 0x2DE0 && char <= 0x2DFF,
    // 'Supplemental Punctuation': (char) => char >= 0x2E00 && char <= 0x2E7F,
    'CJK Radicals Supplement': (char) => char >= 0x2E80 && char <= 0x2EFF,
    'Kangxi Radicals': (char) => char >= 0x2F00 && char <= 0x2FDF,
    'Ideographic Description Characters': (char) => char >= 0x2FF0 && char <= 0x2FFF,
    'CJK Symbols and Punctuation': (char) => char >= 0x3000 && char <= 0x303F,
    'Hiragana': (char) => char >= 0x3040 && char <= 0x309F,
    'Katakana': (char) => char >= 0x30A0 && char <= 0x30FF,
    'Bopomofo': (char) => char >= 0x3100 && char <= 0x312F,
    'Hangul Compatibility Jamo': (char) => char >= 0x3130 && char <= 0x318F,
    'Kanbun': (char) => char >= 0x3190 && char <= 0x319F,
    'Bopomofo Extended': (char) => char >= 0x31A0 && char <= 0x31BF,
    'CJK Strokes': (char) => char >= 0x31C0 && char <= 0x31EF,
    'Katakana Phonetic Extensions': (char) => char >= 0x31F0 && char <= 0x31FF,
    'Enclosed CJK Letters and Months': (char) => char >= 0x3200 && char <= 0x32FF,
    'CJK Compatibility': (char) => char >= 0x3300 && char <= 0x33FF,
    'CJK Unified Ideographs Extension A': (char) => char >= 0x3400 && char <= 0x4DBF,
    'Yijing Hexagram Symbols': (char) => char >= 0x4DC0 && char <= 0x4DFF,
    'CJK Unified Ideographs': (char) => char >= 0x4E00 && char <= 0x9FFF,
    'Yi Syllables': (char) => char >= 0xA000 && char <= 0xA48F,
    'Yi Radicals': (char) => char >= 0xA490 && char <= 0xA4CF,
    // 'Lisu': (char) => char >= 0xA4D0 && char <= 0xA4FF,
    // 'Vai': (char) => char >= 0xA500 && char <= 0xA63F,
    // 'Cyrillic Extended-B': (char) => char >= 0xA640 && char <= 0xA69F,
    // 'Bamum': (char) => char >= 0xA6A0 && char <= 0xA6FF,
    // 'Modifier Tone Letters': (char) => char >= 0xA700 && char <= 0xA71F,
    // 'Latin Extended-D': (char) => char >= 0xA720 && char <= 0xA7FF,
    // 'Syloti Nagri': (char) => char >= 0xA800 && char <= 0xA82F,
    // 'Common Indic Number Forms': (char) => char >= 0xA830 && char <= 0xA83F,
    // 'Phags-pa': (char) => char >= 0xA840 && char <= 0xA87F,
    // 'Saurashtra': (char) => char >= 0xA880 && char <= 0xA8DF,
    // 'Devanagari Extended': (char) => char >= 0xA8E0 && char <= 0xA8FF,
    // 'Kayah Li': (char) => char >= 0xA900 && char <= 0xA92F,
    // 'Rejang': (char) => char >= 0xA930 && char <= 0xA95F,
    'Hangul Jamo Extended-A': (char) => char >= 0xA960 && char <= 0xA97F,
    // 'Javanese': (char) => char >= 0xA980 && char <= 0xA9DF,
    // 'Myanmar Extended-B': (char) => char >= 0xA9E0 && char <= 0xA9FF,
    // 'Cham': (char) => char >= 0xAA00 && char <= 0xAA5F,
    // 'Myanmar Extended-A': (char) => char >= 0xAA60 && char <= 0xAA7F,
    // 'Tai Viet': (char) => char >= 0xAA80 && char <= 0xAADF,
    // 'Meetei Mayek Extensions': (char) => char >= 0xAAE0 && char <= 0xAAFF,
    // 'Ethiopic Extended-A': (char) => char >= 0xAB00 && char <= 0xAB2F,
    // 'Latin Extended-E': (char) => char >= 0xAB30 && char <= 0xAB6F,
    // 'Cherokee Supplement': (char) => char >= 0xAB70 && char <= 0xABBF,
    // 'Meetei Mayek': (char) => char >= 0xABC0 && char <= 0xABFF,
    'Hangul Syllables': (char) => char >= 0xAC00 && char <= 0xD7AF,
    'Hangul Jamo Extended-B': (char) => char >= 0xD7B0 && char <= 0xD7FF,
    // 'High Surrogates': (char) => char >= 0xD800 && char <= 0xDB7F,
    // 'High Private Use Surrogates': (char) => char >= 0xDB80 && char <= 0xDBFF,
    // 'Low Surrogates': (char) => char >= 0xDC00 && char <= 0xDFFF,
    'Private Use Area': (char) => char >= 0xE000 && char <= 0xF8FF,
    'CJK Compatibility Ideographs': (char) => char >= 0xF900 && char <= 0xFAFF,
    // 'Alphabetic Presentation Forms': (char) => char >= 0xFB00 && char <= 0xFB4F,
    'Arabic Presentation Forms-A': (char) => char >= 0xFB50 && char <= 0xFDFF,
    // 'Variation Selectors': (char) => char >= 0xFE00 && char <= 0xFE0F,
    'Vertical Forms': (char) => char >= 0xFE10 && char <= 0xFE1F,
    // 'Combining Half Marks': (char) => char >= 0xFE20 && char <= 0xFE2F,
    'CJK Compatibility Forms': (char) => char >= 0xFE30 && char <= 0xFE4F,
    'Small Form Variants': (char) => char >= 0xFE50 && char <= 0xFE6F,
    'Arabic Presentation Forms-B': (char) => char >= 0xFE70 && char <= 0xFEFF,
    'Halfwidth and Fullwidth Forms': (char) => char >= 0xFF00 && char <= 0xFFEF
    // 'Specials': (char) => char >= 0xFFF0 && char <= 0xFFFF,
    // 'Linear B Syllabary': (char) => char >= 0x10000 && char <= 0x1007F,
    // 'Linear B Ideograms': (char) => char >= 0x10080 && char <= 0x100FF,
    // 'Aegean Numbers': (char) => char >= 0x10100 && char <= 0x1013F,
    // 'Ancient Greek Numbers': (char) => char >= 0x10140 && char <= 0x1018F,
    // 'Ancient Symbols': (char) => char >= 0x10190 && char <= 0x101CF,
    // 'Phaistos Disc': (char) => char >= 0x101D0 && char <= 0x101FF,
    // 'Lycian': (char) => char >= 0x10280 && char <= 0x1029F,
    // 'Carian': (char) => char >= 0x102A0 && char <= 0x102DF,
    // 'Coptic Epact Numbers': (char) => char >= 0x102E0 && char <= 0x102FF,
    // 'Old Italic': (char) => char >= 0x10300 && char <= 0x1032F,
    // 'Gothic': (char) => char >= 0x10330 && char <= 0x1034F,
    // 'Old Permic': (char) => char >= 0x10350 && char <= 0x1037F,
    // 'Ugaritic': (char) => char >= 0x10380 && char <= 0x1039F,
    // 'Old Persian': (char) => char >= 0x103A0 && char <= 0x103DF,
    // 'Deseret': (char) => char >= 0x10400 && char <= 0x1044F,
    // 'Shavian': (char) => char >= 0x10450 && char <= 0x1047F,
    // 'Osmanya': (char) => char >= 0x10480 && char <= 0x104AF,
    // 'Osage': (char) => char >= 0x104B0 && char <= 0x104FF,
    // 'Elbasan': (char) => char >= 0x10500 && char <= 0x1052F,
    // 'Caucasian Albanian': (char) => char >= 0x10530 && char <= 0x1056F,
    // 'Linear A': (char) => char >= 0x10600 && char <= 0x1077F,
    // 'Cypriot Syllabary': (char) => char >= 0x10800 && char <= 0x1083F,
    // 'Imperial Aramaic': (char) => char >= 0x10840 && char <= 0x1085F,
    // 'Palmyrene': (char) => char >= 0x10860 && char <= 0x1087F,
    // 'Nabataean': (char) => char >= 0x10880 && char <= 0x108AF,
    // 'Hatran': (char) => char >= 0x108E0 && char <= 0x108FF,
    // 'Phoenician': (char) => char >= 0x10900 && char <= 0x1091F,
    // 'Lydian': (char) => char >= 0x10920 && char <= 0x1093F,
    // 'Meroitic Hieroglyphs': (char) => char >= 0x10980 && char <= 0x1099F,
    // 'Meroitic Cursive': (char) => char >= 0x109A0 && char <= 0x109FF,
    // 'Kharoshthi': (char) => char >= 0x10A00 && char <= 0x10A5F,
    // 'Old South Arabian': (char) => char >= 0x10A60 && char <= 0x10A7F,
    // 'Old North Arabian': (char) => char >= 0x10A80 && char <= 0x10A9F,
    // 'Manichaean': (char) => char >= 0x10AC0 && char <= 0x10AFF,
    // 'Avestan': (char) => char >= 0x10B00 && char <= 0x10B3F,
    // 'Inscriptional Parthian': (char) => char >= 0x10B40 && char <= 0x10B5F,
    // 'Inscriptional Pahlavi': (char) => char >= 0x10B60 && char <= 0x10B7F,
    // 'Psalter Pahlavi': (char) => char >= 0x10B80 && char <= 0x10BAF,
    // 'Old Turkic': (char) => char >= 0x10C00 && char <= 0x10C4F,
    // 'Old Hungarian': (char) => char >= 0x10C80 && char <= 0x10CFF,
    // 'Rumi Numeral Symbols': (char) => char >= 0x10E60 && char <= 0x10E7F,
    // 'Brahmi': (char) => char >= 0x11000 && char <= 0x1107F,
    // 'Kaithi': (char) => char >= 0x11080 && char <= 0x110CF,
    // 'Sora Sompeng': (char) => char >= 0x110D0 && char <= 0x110FF,
    // 'Chakma': (char) => char >= 0x11100 && char <= 0x1114F,
    // 'Mahajani': (char) => char >= 0x11150 && char <= 0x1117F,
    // 'Sharada': (char) => char >= 0x11180 && char <= 0x111DF,
    // 'Sinhala Archaic Numbers': (char) => char >= 0x111E0 && char <= 0x111FF,
    // 'Khojki': (char) => char >= 0x11200 && char <= 0x1124F,
    // 'Multani': (char) => char >= 0x11280 && char <= 0x112AF,
    // 'Khudawadi': (char) => char >= 0x112B0 && char <= 0x112FF,
    // 'Grantha': (char) => char >= 0x11300 && char <= 0x1137F,
    // 'Newa': (char) => char >= 0x11400 && char <= 0x1147F,
    // 'Tirhuta': (char) => char >= 0x11480 && char <= 0x114DF,
    // 'Siddham': (char) => char >= 0x11580 && char <= 0x115FF,
    // 'Modi': (char) => char >= 0x11600 && char <= 0x1165F,
    // 'Mongolian Supplement': (char) => char >= 0x11660 && char <= 0x1167F,
    // 'Takri': (char) => char >= 0x11680 && char <= 0x116CF,
    // 'Ahom': (char) => char >= 0x11700 && char <= 0x1173F,
    // 'Warang Citi': (char) => char >= 0x118A0 && char <= 0x118FF,
    // 'Pau Cin Hau': (char) => char >= 0x11AC0 && char <= 0x11AFF,
    // 'Bhaiksuki': (char) => char >= 0x11C00 && char <= 0x11C6F,
    // 'Marchen': (char) => char >= 0x11C70 && char <= 0x11CBF,
    // 'Cuneiform': (char) => char >= 0x12000 && char <= 0x123FF,
    // 'Cuneiform Numbers and Punctuation': (char) => char >= 0x12400 && char <= 0x1247F,
    // 'Early Dynastic Cuneiform': (char) => char >= 0x12480 && char <= 0x1254F,
    // 'Egyptian Hieroglyphs': (char) => char >= 0x13000 && char <= 0x1342F,
    // 'Anatolian Hieroglyphs': (char) => char >= 0x14400 && char <= 0x1467F,
    // 'Bamum Supplement': (char) => char >= 0x16800 && char <= 0x16A3F,
    // 'Mro': (char) => char >= 0x16A40 && char <= 0x16A6F,
    // 'Bassa Vah': (char) => char >= 0x16AD0 && char <= 0x16AFF,
    // 'Pahawh Hmong': (char) => char >= 0x16B00 && char <= 0x16B8F,
    // 'Miao': (char) => char >= 0x16F00 && char <= 0x16F9F,
    // 'Ideographic Symbols and Punctuation': (char) => char >= 0x16FE0 && char <= 0x16FFF,
    // 'Tangut': (char) => char >= 0x17000 && char <= 0x187FF,
    // 'Tangut Components': (char) => char >= 0x18800 && char <= 0x18AFF,
    // 'Kana Supplement': (char) => char >= 0x1B000 && char <= 0x1B0FF,
    // 'Duployan': (char) => char >= 0x1BC00 && char <= 0x1BC9F,
    // 'Shorthand Format Controls': (char) => char >= 0x1BCA0 && char <= 0x1BCAF,
    // 'Byzantine Musical Symbols': (char) => char >= 0x1D000 && char <= 0x1D0FF,
    // 'Musical Symbols': (char) => char >= 0x1D100 && char <= 0x1D1FF,
    // 'Ancient Greek Musical Notation': (char) => char >= 0x1D200 && char <= 0x1D24F,
    // 'Tai Xuan Jing Symbols': (char) => char >= 0x1D300 && char <= 0x1D35F,
    // 'Counting Rod Numerals': (char) => char >= 0x1D360 && char <= 0x1D37F,
    // 'Mathematical Alphanumeric Symbols': (char) => char >= 0x1D400 && char <= 0x1D7FF,
    // 'Sutton SignWriting': (char) => char >= 0x1D800 && char <= 0x1DAAF,
    // 'Glagolitic Supplement': (char) => char >= 0x1E000 && char <= 0x1E02F,
    // 'Mende Kikakui': (char) => char >= 0x1E800 && char <= 0x1E8DF,
    // 'Adlam': (char) => char >= 0x1E900 && char <= 0x1E95F,
    // 'Arabic Mathematical Alphabetic Symbols': (char) => char >= 0x1EE00 && char <= 0x1EEFF,
    // 'Mahjong Tiles': (char) => char >= 0x1F000 && char <= 0x1F02F,
    // 'Domino Tiles': (char) => char >= 0x1F030 && char <= 0x1F09F,
    // 'Playing Cards': (char) => char >= 0x1F0A0 && char <= 0x1F0FF,
    // 'Enclosed Alphanumeric Supplement': (char) => char >= 0x1F100 && char <= 0x1F1FF,
    // 'Enclosed Ideographic Supplement': (char) => char >= 0x1F200 && char <= 0x1F2FF,
    // 'Miscellaneous Symbols and Pictographs': (char) => char >= 0x1F300 && char <= 0x1F5FF,
    // 'Emoticons': (char) => char >= 0x1F600 && char <= 0x1F64F,
    // 'Ornamental Dingbats': (char) => char >= 0x1F650 && char <= 0x1F67F,
    // 'Transport and Map Symbols': (char) => char >= 0x1F680 && char <= 0x1F6FF,
    // 'Alchemical Symbols': (char) => char >= 0x1F700 && char <= 0x1F77F,
    // 'Geometric Shapes Extended': (char) => char >= 0x1F780 && char <= 0x1F7FF,
    // 'Supplemental Arrows-C': (char) => char >= 0x1F800 && char <= 0x1F8FF,
    // 'Supplemental Symbols and Pictographs': (char) => char >= 0x1F900 && char <= 0x1F9FF,
    // 'CJK Unified Ideographs Extension B': (char) => char >= 0x20000 && char <= 0x2A6DF,
    // 'CJK Unified Ideographs Extension C': (char) => char >= 0x2A700 && char <= 0x2B73F,
    // 'CJK Unified Ideographs Extension D': (char) => char >= 0x2B740 && char <= 0x2B81F,
    // 'CJK Unified Ideographs Extension E': (char) => char >= 0x2B820 && char <= 0x2CEAF,
    // 'CJK Compatibility Ideographs Supplement': (char) => char >= 0x2F800 && char <= 0x2FA1F,
    // 'Tags': (char) => char >= 0xE0000 && char <= 0xE007F,
    // 'Variation Selectors Supplement': (char) => char >= 0xE0100 && char <= 0xE01EF,
    // 'Supplementary Private Use Area-A': (char) => char >= 0xF0000 && char <= 0xFFFFF,
    // 'Supplementary Private Use Area-B': (char) => char >= 0x100000 && char <= 0x10FFFF,
};

module.exports = unicodeBlockLookup;

},{}],30:[function(require,module,exports){
'use strict';
/* eslint-disable new-cap */

const isChar = require('./is_char_in_unicode_block');

module.exports.allowsIdeographicBreaking = function(chars) {
    for (const char of chars) {
        if (!exports.charAllowsIdeographicBreaking(char.charCodeAt(0))) return false;
    }
    return true;
};

module.exports.allowsVerticalWritingMode = function(chars) {
    for (const char of chars) {
        if (exports.charHasUprightVerticalOrientation(char.charCodeAt(0))) return true;
    }
    return false;
};

module.exports.allowsLetterSpacing = function(chars) {
    for (const char of chars) {
        if (!exports.charAllowsLetterSpacing(char.charCodeAt(0))) return false;
    }
    return true;
};

module.exports.charAllowsLetterSpacing = function(char) {
    if (isChar['Arabic'](char)) return false;
    if (isChar['Arabic Supplement'](char)) return false;
    if (isChar['Arabic Extended-A'](char)) return false;
    if (isChar['Arabic Presentation Forms-A'](char)) return false;
    if (isChar['Arabic Presentation Forms-B'](char)) return false;

    return true;
};

module.exports.charAllowsIdeographicBreaking = function(char) {
    // Return early for characters outside all ideographic ranges.
    if (char < 0x2E80) return false;

    if (isChar['Bopomofo Extended'](char)) return true;
    if (isChar['Bopomofo'](char)) return true;
    if (isChar['CJK Compatibility Forms'](char)) return true;
    if (isChar['CJK Compatibility Ideographs'](char)) return true;
    if (isChar['CJK Compatibility'](char)) return true;
    if (isChar['CJK Radicals Supplement'](char)) return true;
    if (isChar['CJK Strokes'](char)) return true;
    if (isChar['CJK Symbols and Punctuation'](char)) return true;
    if (isChar['CJK Unified Ideographs Extension A'](char)) return true;
    if (isChar['CJK Unified Ideographs'](char)) return true;
    if (isChar['Enclosed CJK Letters and Months'](char)) return true;
    if (isChar['Halfwidth and Fullwidth Forms'](char)) return true;
    if (isChar['Hiragana'](char)) return true;
    if (isChar['Ideographic Description Characters'](char)) return true;
    if (isChar['Kangxi Radicals'](char)) return true;
    if (isChar['Katakana Phonetic Extensions'](char)) return true;
    if (isChar['Katakana'](char)) return true;
    if (isChar['Vertical Forms'](char)) return true;
    if (isChar['Yi Radicals'](char)) return true;
    if (isChar['Yi Syllables'](char)) return true;

    return false;
};

// The following logic comes from
// <http://www.unicode.org/Public/vertical/revision-16/VerticalOrientation-16.txt>.
// The data file denotes with “U” or “Tu” any codepoint that may be drawn
// upright in vertical text but does not distinguish between upright and
// “neutral” characters.

// Blocks in the Unicode supplementary planes are excluded from this module due
// to <https://github.com/mapbox/mapbox-gl/issues/29>.

/**
 * Returns true if the given Unicode codepoint identifies a character with
 * upright orientation.
 *
 * A character has upright orientation if it is drawn upright (unrotated)
 * whether the line is oriented horizontally or vertically, even if both
 * adjacent characters can be rotated. For example, a Chinese character is
 * always drawn upright. An uprightly oriented character causes an adjacent
 * “neutral” character to be drawn upright as well.
 */
exports.charHasUprightVerticalOrientation = function(char) {
    if (char === 0x02EA /* modifier letter yin departing tone mark */ ||
        char === 0x02EB /* modifier letter yang departing tone mark */) {
        return true;
    }

    // Return early for characters outside all ranges whose characters remain
    // upright in vertical writing mode.
    if (char < 0x1100) return false;

    if (isChar['Bopomofo Extended'](char)) return true;
    if (isChar['Bopomofo'](char)) return true;
    if (isChar['CJK Compatibility Forms'](char)) {
        if (!(char >= 0xFE49 /* dashed overline */ && char <= 0xFE4F /* wavy low line */)) {
            return true;
        }
    }
    if (isChar['CJK Compatibility Ideographs'](char)) return true;
    if (isChar['CJK Compatibility'](char)) return true;
    if (isChar['CJK Radicals Supplement'](char)) return true;
    if (isChar['CJK Strokes'](char)) return true;
    if (isChar['CJK Symbols and Punctuation'](char)) {
        if (!(char >= 0x3008 /* left angle bracket */ && char <= 0x3011 /* right black lenticular bracket */) &&
            !(char >= 0x3014 /* left tortoise shell bracket */ && char <= 0x301F /* low double prime quotation mark */) &&
            char !== 0x3030 /* wavy dash */) {
            return true;
        }
    }
    if (isChar['CJK Unified Ideographs Extension A'](char)) return true;
    if (isChar['CJK Unified Ideographs'](char)) return true;
    if (isChar['Enclosed CJK Letters and Months'](char)) return true;
    if (isChar['Hangul Compatibility Jamo'](char)) return true;
    if (isChar['Hangul Jamo Extended-A'](char)) return true;
    if (isChar['Hangul Jamo Extended-B'](char)) return true;
    if (isChar['Hangul Jamo'](char)) return true;
    if (isChar['Hangul Syllables'](char)) return true;
    if (isChar['Hiragana'](char)) return true;
    if (isChar['Ideographic Description Characters'](char)) return true;
    if (isChar['Kanbun'](char)) return true;
    if (isChar['Kangxi Radicals'](char)) return true;
    if (isChar['Katakana Phonetic Extensions'](char)) return true;
    if (isChar['Katakana'](char)) {
        if (char !== 0x30FC /* katakana-hiragana prolonged sound mark */) {
            return true;
        }
    }
    if (isChar['Halfwidth and Fullwidth Forms'](char)) {
        if (char !== 0xFF08 /* fullwidth left parenthesis */ &&
            char !== 0xFF09 /* fullwidth right parenthesis */ &&
            char !== 0xFF0D /* fullwidth hyphen-minus */ &&
            !(char >= 0xFF1A /* fullwidth colon */ && char <= 0xFF1E /* fullwidth greater-than sign */) &&
            char !== 0xFF3B /* fullwidth left square bracket */ &&
            char !== 0xFF3D /* fullwidth right square bracket */ &&
            char !== 0xFF3F /* fullwidth low line */ &&
            !(char >= 0xFF5B /* fullwidth left curly bracket */ && char <= 0xFFDF) &&
            char !== 0xFFE3 /* fullwidth macron */ &&
            !(char >= 0xFFE8 /* halfwidth forms light vertical */ && char <= 0xFFEF)) {
            return true;
        }
    }
    if (isChar['Small Form Variants'](char)) {
        if (!(char >= 0xFE58 /* small em dash */ && char <= 0xFE5E /* small right tortoise shell bracket */) &&
            !(char >= 0xFE63 /* small hyphen-minus */ && char <= 0xFE66 /* small equals sign */)) {
            return true;
        }
    }
    if (isChar['Unified Canadian Aboriginal Syllabics'](char)) return true;
    if (isChar['Unified Canadian Aboriginal Syllabics Extended'](char)) return true;
    if (isChar['Vertical Forms'](char)) return true;
    if (isChar['Yijing Hexagram Symbols'](char)) return true;
    if (isChar['Yi Syllables'](char)) return true;
    if (isChar['Yi Radicals'](char)) return true;

    return false;
};

/**
 * Returns true if the given Unicode codepoint identifies a character with
 * neutral orientation.
 *
 * A character has neutral orientation if it may be drawn rotated or unrotated
 * when the line is oriented vertically, depending on the orientation of the
 * adjacent characters. For example, along a verticlly oriented line, the vulgar
 * fraction ½ is drawn upright among Chinese characters but rotated among Latin
 * letters. A neutrally oriented character does not influence whether an
 * adjacent character is drawn upright or rotated.
 */
exports.charHasNeutralVerticalOrientation = function(char) {
    if (isChar['Latin-1 Supplement'](char)) {
        if (char === 0x00A7 /* section sign */ ||
            char === 0x00A9 /* copyright sign */ ||
            char === 0x00AE /* registered sign */ ||
            char === 0x00B1 /* plus-minus sign */ ||
            char === 0x00BC /* vulgar fraction one quarter */ ||
            char === 0x00BD /* vulgar fraction one half */ ||
            char === 0x00BE /* vulgar fraction three quarters */ ||
            char === 0x00D7 /* multiplication sign */ ||
            char === 0x00F7 /* division sign */) {
            return true;
        }
    }
    if (isChar['General Punctuation'](char)) {
        if (char === 0x2016 /* double vertical line */ ||
            char === 0x2020 /* dagger */ ||
            char === 0x2021 /* double dagger */ ||
            char === 0x2030 /* per mille sign */ ||
            char === 0x2031 /* per ten thousand sign */ ||
            char === 0x203B /* reference mark */ ||
            char === 0x203C /* double exclamation mark */ ||
            char === 0x2042 /* asterism */ ||
            char === 0x2047 /* double question mark */ ||
            char === 0x2048 /* question exclamation mark */ ||
            char === 0x2049 /* exclamation question mark */ ||
            char === 0x2051 /* two asterisks aligned vertically */) {
            return true;
        }
    }
    if (isChar['Letterlike Symbols'](char)) return true;
    if (isChar['Number Forms'](char)) return true;
    if (isChar['Miscellaneous Technical'](char)) {
        if ((char >= 0x2300 /* diameter sign */ && char <= 0x2307 /* wavy line */) ||
            (char >= 0x230C /* bottom right crop */ && char <= 0x231F /* bottom right corner */) ||
            (char >= 0x2324 /* up arrowhead between two horizontal bars */ && char <= 0x2328 /* keyboard */) ||
            char === 0x232B /* erase to the left */ ||
            (char >= 0x237D /* shouldered open box */ && char <= 0x239A /* clear screen symbol */) ||
            (char >= 0x23BE /* dentistry symbol light vertical and top right */ && char <= 0x23CD /* square foot */) ||
            char === 0x23CF /* eject symbol */ ||
            (char >= 0x23D1 /* metrical breve */ && char <= 0x23DB /* fuse */) ||
            (char >= 0x23E2 /* white trapezium */ && char <= 0x23FF)) {
            return true;
        }
    }
    if (isChar['Control Pictures'](char) && char !== 0x2423 /* open box */) return true;
    if (isChar['Optical Character Recognition'](char)) return true;
    if (isChar['Enclosed Alphanumerics'](char)) return true;
    if (isChar['Geometric Shapes'](char)) return true;
    if (isChar['Miscellaneous Symbols'](char)) {
        if (!(char >= 0x261A /* black left pointing index */ && char <= 0x261F /* white down pointing index */)) {
            return true;
        }
    }
    if (isChar['Miscellaneous Symbols and Arrows'](char)) {
        if ((char >= 0x2B12 /* square with top half black */ && char <= 0x2B2F /* white vertical ellipse */) ||
            (char >= 0x2B50 /* white medium star */ && char <= 0x2B59 /* heavy circled saltire */) ||
            (char >= 0x2BB8 /* upwards white arrow from bar with horizontal bar */ && char <= 0x2BEB)) {
            return true;
        }
    }
    if (isChar['CJK Symbols and Punctuation'](char)) return true;
    if (isChar['Katakana'](char)) return true;
    if (isChar['Private Use Area'](char)) return true;
    if (isChar['CJK Compatibility Forms'](char)) return true;
    if (isChar['Small Form Variants'](char)) return true;
    if (isChar['Halfwidth and Fullwidth Forms'](char)) return true;

    if (char === 0x221E /* infinity */ ||
        char === 0x2234 /* therefore */ ||
        char === 0x2235 /* because */ ||
        (char >= 0x2700 /* black safety scissors */ && char <= 0x2767 /* rotated floral heart bullet */) ||
        (char >= 0x2776 /* dingbat negative circled digit one */ && char <= 0x2793 /* dingbat negative circled sans-serif number ten */) ||
        char === 0xFFFC /* object replacement character */ ||
        char === 0xFFFD /* replacement character */) {
        return true;
    }

    return false;
};

/**
 * Returns true if the given Unicode codepoint identifies a character with
 * rotated orientation.
 *
 * A character has rotated orientation if it is drawn rotated when the line is
 * oriented vertically, even if both adjacent characters are upright. For
 * example, a Latin letter is drawn rotated along a vertical line. A rotated
 * character causes an adjacent “neutral” character to be drawn rotated as well.
 */
exports.charHasRotatedVerticalOrientation = function(char) {
    return !(exports.charHasUprightVerticalOrientation(char) ||
             exports.charHasNeutralVerticalOrientation(char));
};

},{"./is_char_in_unicode_block":29}],31:[function(require,module,exports){
'use strict';

const scriptDetection = require('./script_detection');

module.exports = function verticalizePunctuation(input) {
    let output = '';

    for (let i = 0; i < input.length; i++) {
        const nextCharCode = input.charCodeAt(i + 1) || null;
        const prevCharCode = input.charCodeAt(i - 1) || null;

        const canReplacePunctuation = (
            (!nextCharCode || !scriptDetection.charHasRotatedVerticalOrientation(nextCharCode) || module.exports.lookup[input[i + 1]]) &&
            (!prevCharCode || !scriptDetection.charHasRotatedVerticalOrientation(prevCharCode) || module.exports.lookup[input[i - 1]])
        );

        if (canReplacePunctuation && module.exports.lookup[input[i]]) {
            output += module.exports.lookup[input[i]];
        } else {
            output += input[i];
        }
    }

    return output;
};

module.exports.lookup = {
    '!': '︕',
    '#': '＃',
    '$': '＄',
    '%': '％',
    '&': '＆',
    '(': '︵',
    ')': '︶',
    '*': '＊',
    '+': '＋',
    ',': '︐',
    '-': '︲',
    '.': '・',
    '/': '／',
    ':': '︓',
    ';': '︔',
    '<': '︿',
    '=': '＝',
    '>': '﹀',
    '?': '︖',
    '@': '＠',
    '[': '﹇',
    '\\': '＼',
    ']': '﹈',
    '^': '＾',
    '_': '︳',
    '`': '｀',
    '{': '︷',
    '|': '―',
    '}': '︸',
    '~': '～',
    '¢': '￠',
    '£': '￡',
    '¥': '￥',
    '¦': '￤',
    '¬': '￢',
    '¯': '￣',
    '–': '︲',
    '—': '︱',
    '‘': '﹃',
    '’': '﹄',
    '“': '﹁',
    '”': '﹂',
    '…': '︙',
    '‧': '・',
    '₩': '￦',
    '、': '︑',
    '。': '︒',
    '〈': '︿',
    '〉': '﹀',
    '《': '︽',
    '》': '︾',
    '「': '﹁',
    '」': '﹂',
    '『': '﹃',
    '』': '﹄',
    '【': '︻',
    '】': '︼',
    '〔': '︹',
    '〕': '︺',
    '〖': '︗',
    '〗': '︘',
    '！': '︕',
    '（': '︵',
    '）': '︶',
    '，': '︐',
    '－': '︲',
    '．': '・',
    '：': '︓',
    '；': '︔',
    '＜': '︿',
    '＞': '﹀',
    '？': '︖',
    '［': '﹇',
    '］': '﹈',
    '＿': '︳',
    '｛': '︷',
    '｜': '―',
    '｝': '︸',
    '｟': '︵',
    '｠': '︶',
    '｡': '︒',
    '｢': '﹁',
    '｣': '﹂'
};

},{"./script_detection":30}],32:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

const ieee754 = require('./ieee754');
const isArray = require('./isArray');

var INSPECT_MAX_BYTES = 50;


/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = true;

/*
 * Export kMaxLength after typed array support is determined.
 */
var _kMaxLength = kMaxLength()
function typedArraySupport () {
    return true;
}

function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
}

function createBuffer (that, length) {
    if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length)
        that.__proto__ = Buffer.prototype
    } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
            that = new Buffer(length)
        }
        that.length = length
    }

    return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

module.exports = function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
            throw new Error(
                'If encoding is specified then the first argument must be a string'
            )
        }
        return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype
    return arr
}

function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array
    if (typeof Symbol !== 'undefined' && Symbol.species &&
        Buffer[Symbol.species] === Buffer) {
        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
        // Object.defineProperty(Buffer, Symbol.species, {
        //   value: null,
        //   configurable: true
        // })
    }
}

function assertSize (size) {
    if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
    }
}

function alloc (that, size, fill, encoding) {
    assertSize(size)
    if (size <= 0) {
        return createBuffer(that, size)
    }
    if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
            ? createBuffer(that, size).fill(fill, encoding)
            : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
    assertSize(size)
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
            that[i] = 0
        }
    }
    return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8'
    }

    if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0
    that = createBuffer(that, length)

    var actual = that.write(string, encoding)

    if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual)
    }

    return that
}

function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0
    that = createBuffer(that, length)
    for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255
    }
    return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array)
    } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset)
    } else {
        array = new Uint8Array(array, byteOffset, length)
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array
        that.__proto__ = Buffer.prototype
    } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array)
    }
    return that
}

function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0
        that = createBuffer(that, len)

        if (that.length === 0) {
            return that
        }

        obj.copy(that, 0, 0, len)
        return that
    }

    if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
            if (typeof obj.length !== 'number' || isnan(obj.length)) {
                return createBuffer(that, 0)
            }
            return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray(obj.data)) {
            return fromArrayLike(that, obj.data)
        }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
            'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
}

// export function SlowBuffer (length) {
//   if (+length != length) { // eslint-disable-line eqeqeq
//     length = 0
//   }
//   return Buffer.alloc(+length)
// }
Buffer.isBuffer = isBuffer;
function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length
    var y = b.length

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
            x = a[i]
            y = b[i]
            break
        }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true
        default:
            return false
    }
}

Buffer.concat = function concat (list, length) {
    if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
        return Buffer.alloc(0)
    }

    var i
    if (length === undefined) {
        length = 0
        for (i = 0; i < list.length; ++i) {
            length += list[i].length
        }
    }

    var buffer = Buffer.allocUnsafe(length)
    var pos = 0
    for (i = 0; i < list.length; ++i) {
        var buf = list[i]
        if (!internalIsBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos)
        pos += buf.length
    }
    return buffer
}

function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
        return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
    }
    if (typeof string !== 'string') {
        string = '' + string
    }

    var len = string.length
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false
    for (;;) {
        switch (encoding) {
            case 'ascii':
            case 'latin1':
            case 'binary':
                return len
            case 'utf8':
            case 'utf-8':
            case undefined:
                return utf8ToBytes(string).length
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return len * 2
            case 'hex':
                return len >>> 1
            case 'base64':
            default:
                if (loweredCase) return utf8ToBytes(string).length // assume utf8
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
        }
    }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
    var loweredCase = false

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
        start = 0
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
        return ''
    }

    if (end === undefined || end > this.length) {
        end = this.length
    }

    if (end <= 0) {
        return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0
    start >>>= 0

    if (end <= start) {
        return ''
    }

    if (!encoding) encoding = 'utf8'

    while (true) {
        switch (encoding) {
            case 'hex':
                return hexSlice(this, start, end)

            case 'utf8':
            case 'utf-8':
                return utf8Slice(this, start, end)

            case 'ascii':
                return asciiSlice(this, start, end)

            case 'latin1':
            case 'binary':
                return latin1Slice(this, start, end)

            case 'base64':
                // return base64Slice(this, start, end)

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return utf16leSlice(this, start, end)

            default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = (encoding + '').toLowerCase()
                loweredCase = true
        }
    }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
    var i = b[n]
    b[n] = b[m]
    b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
    var len = this.length
    if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1)
    }
    return this
}

Buffer.prototype.swap32 = function swap32 () {
    var len = this.length
    if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3)
        swap(this, i + 1, i + 2)
    }
    return this
}

Buffer.prototype.swap64 = function swap64 () {
    var len = this.length
    if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7)
        swap(this, i + 1, i + 6)
        swap(this, i + 2, i + 5)
        swap(this, i + 3, i + 4)
    }
    return this
}

Buffer.prototype.toString = function toString () {
    var length = this.length | 0
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
    var str = ''
    var max = INSPECT_MAX_BYTES
    if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
        if (this.length > max) str += ' ... '
    }
    return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
        start = 0
    }
    if (end === undefined) {
        end = target ? target.length : 0
    }
    if (thisStart === undefined) {
        thisStart = 0
    }
    if (thisEnd === undefined) {
        thisEnd = this.length
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
        return 0
    }
    if (thisStart >= thisEnd) {
        return -1
    }
    if (start >= end) {
        return 1
    }

    start >>>= 0
    end >>>= 0
    thisStart >>>= 0
    thisEnd >>>= 0

    if (this === target) return 0

    var x = thisEnd - thisStart
    var y = end - start
    var len = Math.min(x, y)

    var thisCopy = this.slice(thisStart, thisEnd)
    var targetCopy = target.slice(start, end)

    for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i]
            y = targetCopy[i]
            break
        }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset
        byteOffset = 0
    } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff
    } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000
    }
    byteOffset = +byteOffset  // Coerce to Number.
    if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1)
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset
    if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0
        else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
        val = Buffer.from(val, encoding)
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
            return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
            } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
            }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1
    var arrLength = arr.length
    var valLength = val.length

    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase()
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) {
                return -1
            }
            indexSize = 2
            arrLength /= 2
            valLength /= 2
            byteOffset /= 2
        }
    }

    function read (buf, i) {
        if (indexSize === 1) {
            return buf[i]
        } else {
            return buf.readUInt16BE(i * indexSize)
        }
    }

    var i
    if (dir) {
        var foundIndex = -1
        for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
            } else {
                if (foundIndex !== -1) i -= i - foundIndex
                foundIndex = -1
            }
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
        for (i = byteOffset; i >= 0; i--) {
            var found = true
            for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                    found = false
                    break
                }
            }
            if (found) return i
        }
    }

    return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0
    var remaining = buf.length - offset
    if (!length) {
        length = remaining
    } else {
        length = Number(length)
        if (length > remaining) {
            length = remaining
        }
    }

    // must be an even number of digits
    var strLen = string.length
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
        length = strLen / 2
    }
    for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16)
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed
    }
    return i
}

function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8'
        length = this.length
        offset = 0
        // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset
        length = this.length
        offset = 0
        // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset | 0
        if (isFinite(length)) {
            length = length | 0
            if (encoding === undefined) encoding = 'utf8'
        } else {
            encoding = length
            length = undefined
        }
        // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
        throw new Error(
            'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
    }

    var remaining = this.length - offset
    if (length === undefined || length > remaining) length = remaining

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8'

    var loweredCase = false
    for (;;) {
        switch (encoding) {
            case 'hex':
                return hexWrite(this, string, offset, length)

            case 'utf8':
            case 'utf-8':
                return utf8Write(this, string, offset, length)

            case 'ascii':
                return asciiWrite(this, string, offset, length)

            case 'latin1':
            case 'binary':
                return latin1Write(this, string, offset, length)

            case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length)

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
                return ucs2Write(this, string, offset, length)

            default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
        }
    }
}

Buffer.prototype.toJSON = function toJSON () {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    }
}


function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end)
    var res = []

    var i = start
    while (i < end) {
        var firstByte = buf[i]
        var codePoint = null
        var bytesPerSequence = (firstByte > 0xEF) ? 4
            : (firstByte > 0xDF) ? 3
                : (firstByte > 0xBF) ? 2
                    : 1

        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint

            switch (bytesPerSequence) {
                case 1:
                    if (firstByte < 0x80) {
                        codePoint = firstByte
                    }
                    break
                case 2:
                    secondByte = buf[i + 1]
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                        if (tempCodePoint > 0x7F) {
                            codePoint = tempCodePoint
                        }
                    }
                    break
                case 3:
                    secondByte = buf[i + 1]
                    thirdByte = buf[i + 2]
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                            codePoint = tempCodePoint
                        }
                    }
                    break
                case 4:
                    secondByte = buf[i + 1]
                    thirdByte = buf[i + 2]
                    fourthByte = buf[i + 3]
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                            codePoint = tempCodePoint
                        }
                    }
            }
        }

        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD
            bytesPerSequence = 1
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000
            res.push(codePoint >>> 10 & 0x3FF | 0xD800)
            codePoint = 0xDC00 | codePoint & 0x3FF
        }

        res.push(codePoint)
        i += bytesPerSequence
    }

    return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
    var len = codePoints.length
    if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = ''
    var i = 0
    while (i < len) {
        res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        )
    }
    return res
}

function asciiSlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F)
    }
    return ret
}

function latin1Slice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i])
    }
    return ret
}

function hexSlice (buf, start, end) {
    var len = buf.length

    if (!start || start < 0) start = 0
    if (!end || end < 0 || end > len) end = len

    var out = ''
    for (var i = start; i < end; ++i) {
        out += toHex(buf[i])
    }
    return out
}

function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end)
    var res = ''
    for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
    }
    return res
}

Buffer.prototype.slice = function slice (start, end) {
    var len = this.length
    start = ~~start
    end = end === undefined ? len : ~~end

    if (start < 0) {
        start += len
        if (start < 0) start = 0
    } else if (start > len) {
        start = len
    }

    if (end < 0) {
        end += len
        if (end < 0) end = 0
    } else if (end > len) {
        end = len
    }

    if (end < start) end = start

    var newBuf
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end)
        newBuf.__proto__ = Buffer.prototype
    } else {
        var sliceLen = end - start
        newBuf = new Buffer(sliceLen, undefined)
        for (var i = 0; i < sliceLen; ++i) {
            newBuf[i] = this[i + start]
        }
    }

    return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
    }

    return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) {
        checkOffset(offset, byteLength, this.length)
    }

    var val = this[offset + --byteLength]
    var mul = 1
    while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul
    }

    return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var i = byteLength
    var mul = 1
    var val = this[offset + --i]
    while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset] | (this[offset + 1] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset + 1] | (this[offset] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
    }

    var mul = 1
    var i = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1
        checkInt(this, value, offset, byteLength, maxBytes, 0)
    }

    var i = byteLength - 1
    var mul = 1
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    this[offset] = (value & 0xff)
    return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
    }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff)
        this[offset + 1] = (value >>> 8)
    } else {
        objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8)
        this[offset + 1] = (value & 0xff)
    } else {
        objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
    }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24)
        this[offset + 2] = (value >>> 16)
        this[offset + 1] = (value >>> 8)
        this[offset] = (value & 0xff)
    } else {
        objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24)
        this[offset + 1] = (value >>> 16)
        this[offset + 2] = (value >>> 8)
        this[offset + 3] = (value & 0xff)
    } else {
        objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1)

        checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = 0
    var mul = 1
    var sub = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1)

        checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = byteLength - 1
    var mul = 1
    var sub = 0
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    if (value < 0) value = 0xff + value + 1
    this[offset] = (value & 0xff)
    return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff)
        this[offset + 1] = (value >>> 8)
    } else {
        objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8)
        this[offset + 1] = (value & 0xff)
    } else {
        objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff)
        this[offset + 1] = (value >>> 8)
        this[offset + 2] = (value >>> 16)
        this[offset + 3] = (value >>> 24)
    } else {
        objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (value < 0) value = 0xffffffff + value + 1
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24)
        this[offset + 1] = (value >>> 16)
        this[offset + 2] = (value >>> 8)
        this[offset + 3] = (value & 0xff)
    } else {
        objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4)
    return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8)
    return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0
    if (!end && end !== 0) end = this.length
    if (targetStart >= target.length) targetStart = target.length
    if (!targetStart) targetStart = 0
    if (end > 0 && end < start) end = start

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length
    if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start
    }

    var len = end - start
    var i

    if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start]
        }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
            target[i + targetStart] = this[i + start]
        }
    } else {
        Uint8Array.prototype.set.call(
            target,
            this.subarray(start, start + len),
            targetStart
        )
    }

    return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start
            start = 0
            end = this.length
        } else if (typeof end === 'string') {
            encoding = end
            end = this.length
        }
        if (val.length === 1) {
            var code = val.charCodeAt(0)
            if (code < 256) {
                val = code
            }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding)
        }
    } else if (typeof val === 'number') {
        val = val & 255
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
    }

    if (end <= start) {
        return this
    }

    start = start >>> 0
    end = end === undefined ? this.length : end >>> 0

    if (!val) val = 0

    var i
    if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
            this[i] = val
        }
    } else {
        var bytes = internalIsBuffer(val)
            ? val
            : utf8ToBytes(new Buffer(val, encoding).toString())
        var len = bytes.length
        for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len]
        }
    }

    return this
}

// HELPER FUNCTIONS
// ================


function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
}

function utf8ToBytes (string, units) {
    units = units || Infinity
    var codePoint
    var length = string.length
    var leadSurrogate = null
    var bytes = []

    for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i)

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    continue
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    continue
                }

                // valid lead
                leadSurrogate = codePoint

                continue
            }

            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                leadSurrogate = codePoint
                continue
            }

            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
        } else if (leadSurrogate) {
            // valid bmp char, but last char was a lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        }

        leadSurrogate = null

        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break
            bytes.push(codePoint)
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break
            bytes.push(
                codePoint >> 0x6 | 0xC0,
                codePoint & 0x3F | 0x80
            )
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break
            bytes.push(
                codePoint >> 0xC | 0xE0,
                codePoint >> 0x6 & 0x3F | 0x80,
                codePoint & 0x3F | 0x80
            )
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break
            bytes.push(
                codePoint >> 0x12 | 0xF0,
                codePoint >> 0xC & 0x3F | 0x80,
                codePoint >> 0x6 & 0x3F | 0x80,
                codePoint & 0x3F | 0x80
            )
        } else {
            throw new Error('Invalid code point')
        }
    }

    return bytes
}

function asciiToBytes (str) {
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF)
    }
    return byteArray
}

function utf16leToBytes (str, units) {
    var c, hi, lo
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i)
        hi = c >> 8
        lo = c % 256
        byteArray.push(lo)
        byteArray.push(hi)
    }

    return byteArray
}


function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i]
    }
    return i
}

function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
}


// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
}

function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
}

}).call(this)}).call(this,require("buffer").Buffer)

},{"./ieee754":39,"./isArray":40,"buffer":2}],33:[function(require,module,exports){
(function (Buffer){(function (){
/**
 * 编码工具类
 */
class CodeTool {

    constructor() {}

    /**
     * //生成随机头
     * @returns {[]}
     */
    static getHeaderArray(headerLength) {
        let harr = [];
        for (let i = 0; i < headerLength; i++) {
            harr[i] = this._getRandomNum();
        }
        return harr;
    }

    /**
     * 生成随机数头
     * @returns {number}
     * @private
     */
    static _getRandomNum() {
        let Range = 80;
        let Rand = Math.random();
        return (50 + Math.round(Rand * Range));
    }

    /**
     * 字符串转byte数组
     * @param str 字符串
     * @param encoding 字符串编码;默认utf8
     * @returns {[]} 字节数组
     */
    static stringToByte(str, encoding) {
        if (encoding === undefined) {
            encoding = "utf8";
        }
        let bytes = [];
        let buffer = Buffer.from(str, encoding);
        for (let i = 0; i < buffer.length; i++) {
            bytes.push(buffer[i]);
        }

        return bytes;
    }

    /**
     * byte数组转字符串
     * @param bytes 字节数组
     * @param encoding 字符串编码;默认utf8
     * @returns {string}
     */
    static byteToString(bytes, encoding) {
        if (encoding === undefined) {
            encoding = "utf8";
        }
        return Buffer.from(bytes).toString(encoding);
    }

    /**
     * 数字转byte数组
     * @param num
     * @returns {number[]}
     */
    static intToBytes(num) {
        return [(num >> 24) & 0x00ff, (num >> 16) & 0x00ff, (num >> 8) & 0x00ff, num & 0x00ff];
    }

    /**
     * byte数组转数字
     * @param bytes
     * @returns {number}
     */
    static bytesToInt(bytes) {
        return bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3];
    }

    /**
     * varint转数字
     * @param buffer 单个数字的varint编码
     * @returns {number}
     */
    static varintToInt(buffer) {
        let intBuffer = [];
        let highBuffer = [];
        let j = 3;
        let offset = 0;
        for (let i = buffer.length - 1; i >= 0; i--) {
            if (i - 1 >= 0) {
                highBuffer[0] = (buffer[i - 1] << (7 - offset));
            } else {
                highBuffer[0] = 0;
            }
            if (j === -1) {
                break;
            }
            intBuffer[j] = ((buffer[i] & 0x7f) >> offset | highBuffer[0]);
            j--;
            offset++;
        }

        let t = intBuffer[0] << 24 & 0xff000000 | intBuffer[1] << 16 & 0x00ff0000 | intBuffer[2] << 8 & 0x0000ff00 | intBuffer[3] & 0x000000ff;
        t = (t >> 1) ^ -(t & 1);
        return t;
    }

    /**
     * 数字转varint编码
     * @param num
     * @returns {[]|number[]}
     */
    static intToVarint(num) {
        if (num === 0) {
            return [0];
        }

        num = this._zigZagEncoding(num);
        let buffer = [];
        let now;
        let high = 0;
        for (let i = 5; i > 0; i--) {
            now = num >> ((i - 1) * 7) & 0x7f;
            if (high !== 0) {
                now = now | 0x80;
            }
            if (now !== 0) {
                buffer.push(now);
            }
            high = now;
        }
        return buffer;
    }


    /**
     * varint编码转数字数组
     * @param buffer
     * @returns {[]}
     */
    static varintToIntArray(buffer) {
        let varintCode = [];
        let high;
        let bf_index = 0;
        let nums = [];
        for (let i = 0; i < buffer.length; i++) {
            high = 0x00000000 | (buffer[i] >> 7) & 0x01;
            if (high === 0) {
                if (bf_index > 0 && bf_index <= 5) {
                    nums.push(this.varintToInt(varintCode));
                    varintCode = [];
                    bf_index = 0;
                }
            }
            varintCode.push(buffer[i]);
            bf_index++;

        }
        nums.push(this.varintToInt(varintCode));
        return nums;
    }

    /**
     * 数字数组转varint编码buffer
     * @param numArray 数字数组
     * @returns {Buffer} varint编码buffer
     */
    static intArrayToVarintBuffer(numArray) {
        let bytea = [];
        let numBytes;
        for (let i = 0; i < numArray.length; i++) {
            numBytes = this.intToVarint(numArray[i]);
            bytea.push(...numBytes);
        }
        return Buffer.from(bytea);
    }

    /**
     * 负数转正数编码
     * @param num
     * @returns {number}
     * @private
     */
    static _zigZagEncoding(num) {
        return (num >> 31) ^ (num << 1);
    }

}
module.exports = CodeTool;
}).call(this)}).call(this,require("buffer").Buffer)

},{"buffer":2}],34:[function(require,module,exports){
/**
 * Created by matt on 2017/7/16.
 */
//几个像素可以算是命中
let _dis = 5;

class GisTools {
    static pointDistToLine(x, y, startx, starty, endx, endy) {
        let se = (startx - endx) * (startx - endx) + (starty - endy) * (starty - endy);
        let p = ((x - startx) * (endx - startx) + (y - starty) * (endy - starty));
        let r = p / se;
        let outx = startx + r * (endx - startx);
        let outy = starty + r * (endy - starty);
        let des = Math.sqrt((x - outx) * (x - outx) + (y - outy) * (y - outy));

        //console.log(des);
        return des;
    }
    static isPointOnSegment(px, py, p1x, p1y, p2x, p2y) {

        if ((px - _dis > p1x && px + _dis > p2x) || (px + _dis < p1x && px - _dis < p2x)) {
            return 0;
        }
        if ((py - _dis > p1y && py + _dis > p2y) || (py + _dis < p1y && py - _dis < p2y)) {
            return 0;
        }
        let d = GisTools.pointDistToLine(px, py, p1x, p1y, p2x, p2y);
        if (d < _dis) {
            return 1;
        } else {
            return 0;
        }
    }
    static pointInLine(px, py, polyline) {
        let flag = 0;
        let line = [];
        if (Array.isArray(polyline[0])) {
            line = polyline;
        } else {
            line.push(polyline);
        }
        for (var polyIndex = 0; polyIndex < line.length; polyIndex++) {
            let subpoly = line[polyIndex];
            let length = subpoly.length / 2;
            // for (var i = 0, l = length, j = l - 1; i < l; j = i, i++) {

            for (var i = 0; i < length - 1; i++) {
                let j;
                j = i + 1;
                let sx = subpoly[2 * i],
                    sy = subpoly[2 * i + 1],
                    tx = subpoly[2 * j],
                    ty = subpoly[2 * j + 1]
                if (GisTools.isPointOnSegment(px, py, sx, sy, tx, ty) == 1) {
                    return 1;
                }
            }
        }
        return 0;
    }
    static pointInPolygon(px, py, polygen) {
        let flag = 0;
        let poly = [];
        if (Array.isArray(polygen[0])) {
            poly = polygen;
        } else {
            poly.push(polygen);
        }

        for (var polyIndex = 0; polyIndex < poly.length; polyIndex++) {
            let subpoly = poly[polyIndex];
            let length = subpoly.length / 2;


            for (var i = 0, l = length, j = l - 1; i < l; j = i, i++) {
                let sx = subpoly[2 * i],
                    sy = subpoly[2 * i + 1],
                    tx = subpoly[2 * j],
                    ty = subpoly[2 * j + 1]

                // 点与多边形顶点重合
                if ((sx === px && sy === py) || (tx === px && ty === py)) {
                    return 1
                }

                // 判断线段两端点是否在射线两侧
                if ((sy < py && ty >= py) || (sy >= py && ty < py)) {
                    // 线段上与射线 Y 坐标相同的点的 X 坐标
                    let x = sx + (py - sy) * (tx - sx) / (ty - sy)

                    // 点在多边形的边上
                    if (x === px) {
                        return 1
                    }
                    if (x > px) {
                        flag = !flag
                    }
                }
            }
        }
        return flag ? 1 : 0;

    }

    static lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {
        var denominator,
            a,
            b,
            numerator1,
            numerator2,
            onLine1 = false,
            onLine2 = false,
            res = [null, null];

        denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));
        if (denominator === 0) {
            if (res[0] !== null && res[1] !== null) {
                return res;
            } else {
                return false;
            }
        }
        a = line1StartY - line2StartY;
        b = line1StartX - line2StartX;
        numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);
        numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);
        a = numerator1 / denominator;
        b = numerator2 / denominator;

        // if we cast these lines infinitely in both directions, they intersect here:
        res[0] = line1StartX + (a * (line1EndX - line1StartX));
        res[1] = line1StartY + (a * (line1EndY - line1StartY));


        // if line2 is a segment and line1 is infinite, they intersect if:
        if (b > 0 && b < 1) {
            return res;
        } else {
            return false;
        }
    }

    /**
     * 判断两个poly的关系
     * @param polyOut
     * @param polyIn
     * @returns {1,相交，2包涵，3，没关系}
     */
    static polyWith(polyOut, polyIn) {
        let lengthOut = polyOut.length / 2;
        let lengthIn = polyIn.length / 2;
        let flag = false;
        let bY;
        let aX;
        let aY;
        let bX;
        let dY;
        let cX;
        let cY;
        let dX;
        for (let i = 0; i < lengthOut; i++) {

            if (i != lengthOut - 1) {
                aX = polyOut[(i * 2)];
                aY = polyOut[(i * 2 + 1)];
                bX = polyOut[(i * 2 + 2)];
                bY = polyOut[(i * 2 + 3)];
            } else {
                aX = polyOut[(i * 2)];
                aY = polyOut[(i * 2 + 1)];
                bX = polyOut[0];
                bY = polyOut[1];
            }
            for (let j = 0; j < lengthIn; j++) {

                if (j != lengthIn - 1) {
                    cX = polyIn[(j * 2)];
                    cY = polyIn[(j * 2 + 1)];
                    dX = polyIn[(j * 2 + 2)];
                    dY = polyIn[(j * 2 + 3)];
                } else {
                    cX = polyIn[(j * 2)];
                    cY = polyIn[(j * 2 + 1)];
                    dX = polyIn[0];
                    dY = polyIn[1];
                }

                if (GisTools.lineIntersects(aX, aY, bX, bY, cX, cY, dX, dY) != false) {
                    return 1;
                }
            }
        }

        let firstX = polyIn[0];
        let firstY = polyIn[1];
        if (GisTools.pointInPolygon(firstX, firstY, polyOut)) {
            return 2;
        }
        return 3;
    }

    /**
     * 把bbox转成double Array
     * @param left
     * @param bottom
     * @param right
     * @param top
     * @returns {Array}
     */
    static boxToPolyArr(left, bottom, right, top) {
        let arr = [];
        arr.push(left);
        arr.push(bottom);

        arr.push(left);
        arr.push(top);

        arr.push(right);
        arr.push(top);

        arr.push(right);
        arr.push(bottom);

        arr.push(left);
        arr.push(bottom);

        return arr;
    }

    static getExtensionPoint(p1, p2, d) {
        let xab = p2[0] - p1[0];
        let yab = p2[1] - p1[1];
        let xd = p2[0];
        let yd = p2[1];
        if (xab == 0) {
            if (yab > 0) {
                yd = p2[1] + d;
            } else {
                yd = p2[1] - d;
            }
        } else {
            let xbd = Math.sqrt((d * d) / ((yab / xab) * (yab / xab) + 1));
            if (xab < 0) {
                xbd = -xbd
            }

            xd = p2[0] + xbd;
            yd = p2[1] + yab / xab * xbd;
        }
        return [xd, yd];
    }


    /**
     * 线平行偏移
     * @param coords
     * @param distance
     * @returns {Array}
     */
    static lineOffset(coords, distance) {
        let segments = [];
        let finalCoords = [];
        coords.forEach(function(currentCoords, index) {
            if (index !== coords.length - 1) {
                let segment = GisTools.processSegment(currentCoords, coords[index + 1], distance);
                segments.push(segment);
                if (index > 0) {
                    let seg2Coords = segments[index - 1];
                    let intersects = GisTools.lineIntersects(segment[0][0], segment[0][1], segment[1][0], segment[1][1],
                        seg2Coords[0][0], seg2Coords[0][1], seg2Coords[1][0], seg2Coords[1][1]);

                    // Handling for line segments that aren't straight
                    if (intersects !== false) {
                        seg2Coords[1] = intersects;
                        segment[0] = intersects;
                    }

                    finalCoords.push(seg2Coords[0]);
                    if (index === coords.length - 2) {
                        finalCoords.push(segment[0]);
                        finalCoords.push(segment[1]);
                    }
                }
                // Handling for lines that only have 1 segment
                if (coords.length === 2) {
                    finalCoords.push(segment[0]);
                    finalCoords.push(segment[1]);
                }
            }
        });
        return finalCoords;
    }

    /**
     * Process Segment
     * Inspiration taken from http://stackoverflow.com/questions/2825412/draw-a-parallel-line
     *
     * @private
     * @param {Array<number>} point1 Point coordinates
     * @param {Array<number>} point2 Point coordinates
     * @param {number} offset Offset
     * @returns {Array<Array<number>>} offset points
     */
    static processSegment(pointAngle1, pointAngle2, offset) {
        let point1 = pointAngle1[0];
        let point2 = pointAngle2[0];
        let L = Math.sqrt((point1[0] - point2[0]) * (point1[0] - point2[0]) + (point1[1] - point2[1]) * (point1[1] - point2[1]));

        let out1x = point1[0] + offset * (point2[1] - point1[1]) / L;
        let out2x = point2[0] + offset * (point2[1] - point1[1]) / L;
        let out1y = point1[1] + offset * (point1[0] - point2[0]) / L;
        let out2y = point2[1] + offset * (point1[0] - point2[0]) / L;
        return [
            [
                [out1x, out1y], pointAngle1[1]
            ],
            [
                [out2x, out2y], pointAngle2[1]
            ]
        ];
    }

    /**
     *  判断box1是否在box2内部
     * @param box1
     * @param box2
     */
    static isInBox(box1, box2) {
        if (box1[0] >= box2[0] && box1[1] >= box2[1] && box1[2] <= box2[2] && box1[3] <= box2[3]) {
            return true;
        }
        return false;
    }

    static Utf8ArrayToStr(array) {
        var out, i, len, c;
        var char2, char3;

        out = "";
        len = array.length;
        i = 0;
        while (i < len) {
            c = array[i++];
            switch (c >> 4) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    // 0xxxxxxx
                    out += String.fromCharCode(c);
                    break;
                case 12:
                case 13:
                    // 110x xxxx   10xx xxxx
                    char2 = array[i++];
                    out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                    break;
                case 14:
                    // 1110 xxxx  10xx xxxx  10xx xxxx
                    char2 = array[i++];
                    char3 = array[i++];
                    out += String.fromCharCode(((c & 0x0F) << 12) |
                        ((char2 & 0x3F) << 6) |
                        ((char3 & 0x3F) << 0));
                    break;
            }
        }

        return out;
    }

}
module.exports = GisTools;
},{}],35:[function(require,module,exports){
(function (Buffer){(function (){
class LayerContentModel {

    constructor() {
        this.layerHeaderProBuffer = Buffer.alloc(0);
        this.coordinateBufferArray = [];
        this.featureArray = [];
    }

    /**
     * 获取头属性
     * @returns {Buffer}
     */
    getLayerHeaderProBuffer() {
        return this.layerHeaderProBuffer;
    }

    /**
     * 设置头属性
     * @param headerProMap {Buffer}
     */
    setLayerHeaderProBuffer(layerHeaderProBuffer) {
        this.layerHeaderProBuffer = layerHeaderProBuffer;
    }

    /**
     * 获得要素buffer数组
     * @returns {[Buffer]}
     */
    getFeatureArray() {
        return this.featureArray;
    }

    /**
     * 设置要素buffer数组
     * @param featureArray {[Buffer]}
     */
    setFeatureArray(featureArray) {
        this.featureArray = featureArray;
    }

    /**
     * 获得坐标buffer数组
     * @returns {[Buffer]}
     */
    getCoordinateBufferArray() {
        return this.coordinateBufferArray;
    }

    /**
     * 设置坐标buffer数组
     * @param coordinateBufferArray {[Buffer]}
     */
    setCoordinateBufferArray(coordinateBufferArray) {
        this.coordinateBufferArray = coordinateBufferArray;
    }

}

module.exports = LayerContentModel;
}).call(this)}).call(this,require("buffer").Buffer)

},{"buffer":2}],36:[function(require,module,exports){
const uncompress = require('./snappyJs');
const CodeTool = require('./CodeTool');
const LayerContentModel = require('./LayerContentModel');
const GisTool = require('./GisTools');

/**
 * 瓦片数据解析
 */
class VarintReader {

    /**
     * 构造函数
     * @param vectorVarintBuffer {Buffer} vector或layer格式buffer
     * @param headerLength {number} 数据头长度
     * @param proSizeObj {Object} 要素属性数量
     */
    constructor(vectorVarintBuffer, headerLength, proSizeObj) {
        //缩进长度
        this.headerLength = headerLength;
        //要素属性数量
        this.proSizeObj = proSizeObj;
        //数字类型的byte长度
        this.intLength = 4;
        //瓦片数据的标识
        this.vectorName = "vector";
        //空间类型的key
        this.gTypeKey = "gType";
        //字符串编码
        this.encoding = "utf8";
        //要素属性间隔
        this.featureSpace = "#@";
        //瓦片buffer
        this.vectorVarintBuffer = vectorVarintBuffer;
        //图层buffer
        this.layerMap = new Object();
        //瓦片头带有的属性
        this.vectorHeaderProMap = new Object();
        //图层头带的属性
        this.layerHeaderProMap = new Object();
         this.layerHeaderProBuffer = new Object();
        //图层的空间数据类型
        this.geometyTypeMap = new Object();
        //图层要素
        this.featureMap = new Object();
        this.featureArrayMap = new Object();
        //图层坐标索引buffer
        this.offsetBufferMap = new Object();
        //图层坐标索引数组
        this.offsetArrayMap = new Object();
        //图层坐标
        this.varintMap = new Object();

        this._parseVector(vectorVarintBuffer);
    }

    /**
     * 获取vector的头属性
     * @returns {Object}
     */
    getVectorHeaderProMap() {
        return this.vectorHeaderProMap;
    }

    /**
     * 获取layer的头属性
     * @returns {Object}
     */
    getLayerHeaderProMap() {
        return this.layerHeaderProMap;
    }

    /**
     * 获得图层varint编码buffer
     * @param layerName {string}
     * @returns {Buffer}
     */
    getLayerBuffer(layerName) {
        return this.layerMap[layerName];
    }

    /**
     * 通过要素过滤对应的buffer
     * @param layerName {string}图层名称
     * @param featureIndexArray {[number]}选择的要素数组下标
     * @returns {LayerContentModel}
     */
    getLayerProByFilter(layerName, featureIndexArray) {
        let coordinateBufferArray = [];
        let offsetArray = this.offsetArrayMap[layerName];
        let featureArray = this._lazyParseFeature(layerName);
        let filterArray = [];
        let idx;
        let offset;
        let length;
        let proSize = this.proSizeObj[layerName];
        for (let i = 0; i < featureIndexArray.length; i++) {
            idx = featureIndexArray[i];
            //挑选要素
            filterArray.push(...featureArray[idx]);
            //挑选要素对应的坐标索引
            offset = offsetArray[idx*2];
            length = offsetArray[idx*2 + 1];
            coordinateBufferArray.push(this.varintMap[layerName].slice(offset, offset + length));
        }

        let model = new LayerContentModel();
        model.setLayerHeaderProBuffer(this.layerHeaderProBuffer[layerName]);
        model.setFeatureArray(filterArray);
        model.setCoordinateBufferArray(coordinateBufferArray);

        return model;
    }

    /**
     * 获得图层名称数组
     * @returns {[图层名称1， 图层名称2， ...]}
     */
    getAllLayerNames() {
        let layerNames = [];
        for (let value in this.layerMap) {
            layerNames.push(value);
        }
        return layerNames;
    }


    /**
     * 图层的空间类型
     * @param {string} layerName
     * @returns {any}
     */
    getGeometryType(layerName) {
        return this.geometyTypeMap[layerName];
    }

    /**
     * 获取指定的图层要素属性
     * @param layerName {string} 图层名称
     * @param featureIndex {number}要素数组的下标
     * @returns {*|string[]}
     */
    getLayerProByIndex(layerName, featureIndex) {
        let featureArray = this._lazyParseFeature(layerName);
        return featureArray[featureIndex]
    }

    /**
     * 图层的属性信息
     * @param layerName {string}图层名称
     * @returns {[属性数组]}
     */
    getLayerPro(layerName) {
        return this._lazyParseFeature(layerName);
    }

    /**
     * 获得图层所有坐标数组的偏移量数组
     * @param layerName {string}图层名称
     * @returns {[number]} [属性1字节开始位置，属性1坐标字节长度 ,属性2字节开始位置，属性2坐标字节长度 ,....]
     */
    getOffsetArray(layerName) {
        return this.offsetArrayMap[layerName];
    }

    /**
     * 获得图层某个属性的坐标偏移量数组
     * @param layerName {string}图层名称
     * @param featureIndex {number} 要素所在数组的位置
     * @returns {[属性字节开始位置，属性坐标字节长度]}
     */
    getOffsetByIndex(layerName, featureIndex) {
        let all = this.offsetArrayMap[layerName];

        let arr = [];
        arr.push(all[featureIndex * 2]);
        arr.push(all[featureIndex * 2 + 1]);

        return arr;
    }

    /**
     * 获得图层的所有坐标字节
     * @param layerName {string}图层名称
     * @returns {Buffer}
     */
    getLayerCoordinate(layerName) {
        return this.varintMap[layerName];
    }

    /**
     * 获得要素
     * @param layerName {string}图层名称
     * @returns {[object]} [要素属性数组， 坐标偏移量， 坐标varint数组]
     */
    getLayerFeature(layerName) {
        return [this.featureMap[layerName], this.offsetArrayMap[layerName], this.varintMap[layerName]];
    }

    /**
     * 图层所有数字坐标
     * @param layerName {string} 图层名称
     * @param precision {number} 数字精度
     * @returns {[[number]]} [[要素1坐标],[要素2坐标],...]
     */
    getAllCoordinates(layerName, precision) {
        let ofs = this.offsetArrayMap[layerName];
        let buffer = this.varintMap[layerName];
        let coorArray = [];
        let offset;
        let length;
        let bf;
        for (let i = 0; i < ofs.length / 2; i++) {
            offset = ofs[i * 2];
            length = ofs[i * 2 + 1];
            bf = buffer.slice(offset, offset + length);
            coorArray.push(this._bufferToDoubleArray(bf, precision)[0]);
        }
        return coorArray;
    }

    /**
     * 图层某个要素的数字坐标
     * @param layerName {string}图层名称
     * @param proIndex {[number]} 属性所在数组的位置
     * @param precision {number} 数字精度
     * @returns {[number]} 要素坐标
     */
    getCoordinatesByIndex(layerName, proIndex, precision) {
        let ofs = this.getOffsetByIndex(layerName, proIndex);
        let buffer = this.varintMap[layerName];
        let offset = ofs[0];
        let length = ofs[1];
        let bf = buffer.slice(offset, offset + length);
        return this._bufferToDoubleArray(bf, precision)[0];
    }

    /**
     * 解析瓦片数据
     * @param vectorVarintBuffer {Buffer} varint编码Buffer
     * @private
     */
    _parseVector(vectorVarintBuffer) {
        //读取geometry类型的字节长度
        let offset = this.headerLength;

        let typeLength = vectorVarintBuffer.readInt32BE(offset);
        offset = offset + this.intLength;
        //读取数据类型。vector是多图层结构；其它geometry类型的为单图层结构
        let type = vectorVarintBuffer.slice( offset, offset + typeLength).toString("utf-8");
        offset = offset + typeLength;
        if (type !== this.vectorName) {
            console.error("不是瓦片数据！");
            return;
        }
        //读取vector头属性
        let array = this._parseHeaderPro(vectorVarintBuffer, offset);
        offset = array[0];
        this.vectorHeaderProMap = array[1];

        //读取坐标数据索引字节开始位置
        let indexLength = vectorVarintBuffer.readInt32BE(offset);
        //截取index表述字节
        offset = offset + this.intLength;
        let indexBuffer = vectorVarintBuffer.slice(offset, offset + indexLength);
        //截取数字字节
        offset = offset + indexLength;
        let dataBuffer = vectorVarintBuffer.slice(offset, this.vectorVarintBuffer.length);

        let layerNameLength = 0;
        let layerName;
        let dataLength;
        let dataBegin = 0;
        let begin = 0;
        let end = 0;
        let layerBuffer;
        for (let i = 0; i < indexBuffer.length;) {
            begin = i;
            layerNameLength = indexBuffer.readInt32BE(begin);
            begin = begin + this.intLength;
            end = begin + layerNameLength;
            layerName = indexBuffer.toString(this.encoding, begin, end);
            begin = end;
            dataLength = indexBuffer.readInt32BE(begin);
            begin = begin + this.intLength;
            //截取每个layer的坐标字节段
            layerBuffer = dataBuffer.slice(dataBegin, dataBegin + dataLength);
            dataBegin = dataBegin + dataLength;
            this.layerMap[layerName] = layerBuffer;
            this._parseLayer(layerName, layerBuffer);
            i = begin;
        }
    }

    /**
     * 解析图层Buffer
     * @param layerName 图层名
     * @param buffer varint编码Buffer
     * @private
     */
    _parseLayer(layerName, layerBuffer) {

        if (layerBuffer.length === 0) {
            return;
        }

        let offset = this.headerLength;
        //读取layer头属性
        let array = this._parseHeaderPro(layerBuffer, offset);
        offset = array[0];
        this.layerHeaderProMap[layerName] = array[1];
        this.layerHeaderProBuffer[layerName] = array[2];
        //读取空间类型
        let geometrytype = this.layerHeaderProMap[layerName][this.gTypeKey];
        this.geometyTypeMap[layerName] = geometrytype;
        //要素数组
        let featureLength = layerBuffer.readInt32BE(offset);
        offset = offset + this.intLength;
        let featureBuffer = layerBuffer.slice(offset, offset + featureLength);
        featureBuffer = uncompress(featureBuffer);
        offset = offset + featureLength;
        this.featureMap[layerName]=featureBuffer;
        //读取偏移量数组
        let indexRes = this._parseIndex(layerBuffer, offset);
        offset = indexRes.offset;
        this.offsetBufferMap[layerName]=indexRes.buffer;
        this.offsetArrayMap[layerName]=indexRes.array;
        //读取坐标
        let varintBuf = layerBuffer.slice(offset);
        this.varintMap[layerName]=varintBuf;
    }
        /**
         * 解析头属性
         * @param varintBuffer
         * @param offset
         * @returns {(*|Map<any, any>)[]}
         * @private
         */
    _parseHeaderPro(varintBuffer, offset) {
        let proMap = new Object();
        let headerProLength = varintBuffer.readInt32BE(offset);
        offset = offset + this.intLength;
        let headerProBuffer = varintBuffer.slice(offset, offset + headerProLength);
        offset = offset + headerProLength;
        if (headerProLength == 0) {
            return [offset, proMap];
        }

        let headerProArray = GisTool.Utf8ArrayToStr(uncompress(headerProBuffer)).split(":");

        for (let i = 0; i < headerProArray.length / 2; i++) {
            proMap[headerProArray[i * 2]] = headerProArray[i * 2 + 1];
        }

        return [offset, proMap, headerProBuffer];
    }

    /**
     * 解析偏移量数组
     * @param layerBuffer
     * @param offset
     * @returns {{offset: *, array: *[], buffer: *}}
     * @private
     */
    _parseIndex(layerBuffer, offset) {
        //读取偏移量数组长度
        let length = layerBuffer.readInt32BE(offset);
        offset = offset + this.intLength;
        //截取出偏移量数组
        let buffer = layerBuffer.slice(offset, offset + length);
        offset = offset + length;
        //把varint编码的byte流转换为数组
        let array = CodeTool.varintToIntArray(buffer);
        return {
            "offset": offset,
            "buffer": buffer,
            "array": array
        };
    }

    _lazyParseFeature(layerName) {
        let featureArray = this.featureArrayMap[layerName];
        let proSize = this.proSizeObj[layerName];
        if (featureArray == undefined) {
            let buffer = this.featureMap[layerName];
            let props = [];
            if (buffer.length > 0) {
                props = GisTool.Utf8ArrayToStr(this.featureMap[layerName]).split(this.featureSpace);
            } else {
                this.featureArrayMap[layerName] = [];
                return [];
            }
            let item = [];
            let length = (props.length - 1) / proSize;
            featureArray = [];
            let current = 0;
            let next = current;
            for (let i = 0; i < length; i++) {
                next = current + proSize;
                item = props.slice(current, next);
                featureArray.push(item);
                current = next;
            }
            this.featureArrayMap[layerName] = featureArray;
        }
        return featureArray;
    }

    /**
     * varint坐标转数字坐标
     * @param buffer varint字节数组
     * @param precision 数字精度
     * @returns {[number]} 数字坐标
     * @private
     */
    _bufferToDoubleArray(buffer, precision) {
        let varintCode = [];
        let path = [];
        let high;
        let bf_index = 0;
        let nums = [];
        let oldX = 0;
        let oldY = 0;
        let x;
        let y;
        let isX = true;
        //多循环一次处理最后一段数据
        for (let i = 0; i <= buffer.length; i++) { //buffer.length
            high = 0x00000000 | (buffer[i] >> 7) & 0x01;
            if (high === 0 && bf_index > 0) {
                if (bf_index > 0 && bf_index <= 5) {
                    if (isX) {
                        x = CodeTool.varintToInt(varintCode) + oldX;
                        path.push(x / precision);
                        isX = false;
                        oldX = x;
                    } else {
                        y = CodeTool.varintToInt(varintCode) + oldY;
                        path.push(y / precision);
                        isX = true;
                        oldY = y;
                    }
                    bf_index = 0;
                    varintCode = [];
                } else if (bf_index > 5) { //bf_index > 5为间隔符
                    oldX = 0;
                    oldY = 0;
                    bf_index = 0;
                    varintCode = [];
                    nums.push(path);
                    path = [];
                }
            }

             if (i !== buffer.length){
                varintCode.push(buffer[i]);
                bf_index++;
            } else {
                if (path.length > 0) {
                nums.push(path);
                }
            }
        }
        return nums;
    }

}

module.exports = VarintReader;
},{"./CodeTool":33,"./GisTools":34,"./LayerContentModel":35,"./snappyJs":41}],37:[function(require,module,exports){
/**
 * Created by matt on 2017/7/16.
 */
//几个像素可以算是命中
let _dis =  5;

class GisTools{
    static pointDistToLine(x, y, startx, starty, endx, endy) {
        let se =  (startx - endx) * (startx - endx) + (starty - endy) * (starty - endy);
        let p = ((x - startx) * (endx - startx) + (y - starty) * (endy - starty));
        let r = p / se;
        let outx = startx + r * (endx - startx);
        let outy = starty + r * (endy - starty);
        let des = Math.sqrt((x - outx) * (x - outx) + (y - outy) * (y - outy));

        //console.log(des);
        return des;
    }
    static isPointOnSegment(px,py,p1x,p1y,p2x,p2y) {

        if ((px - _dis > p1x && px + _dis > p2x) || (px + _dis < p1x && px - _dis < p2x)) {
            return 0;
        }
        if ((py - _dis > p1y && py + _dis > p2y) || (py + _dis < p1y && py - _dis < p2y)) {
            return 0;
        }
        let d = GisTools.pointDistToLine(px,py,p1x,p1y,p2x,p2y);
        if(d < _dis){
            return 1;
        }else{
            return 0;
        }
    }
    static pointInLine(px,py, polyline) {
        let flag = 0;
        let line = [];
        if(Array.isArray(polyline[0])) {
            line = polyline;
        }else{
            line.push(polyline);
        }
        for(var polyIndex = 0 ; polyIndex < line.length ; polyIndex++){
            let subpoly = line[polyIndex];
            let length = subpoly.length / 2;
           // for (var i = 0, l = length, j = l - 1; i < l; j = i, i++) {

            for (var i = 0; i < length - 1 ; i++) {
                let j;
                j = i + 1;
                let sx = subpoly[2 * i],
                    sy = subpoly[2 * i + 1],
                    tx = subpoly[2 * j],
                    ty = subpoly[2 * j + 1]
                if(GisTools.isPointOnSegment(px,py,sx,sy,tx,ty) == 1){
                    return 1;
                }else{

                }
            }
        }
        return 0;
    }
    static pointInPolygon(px,py, polygen) {
        let flag = 0;
        let poly = [];
        if(Array.isArray(polygen[0])) {
            poly = polygen;
        }else{
            poly.push(polygen);
        }

        for(var polyIndex = 0 ; polyIndex < poly.length ; polyIndex++){
            let subpoly = poly[polyIndex];
            let length = subpoly.length / 2;


            for (var i = 0, l = length, j = l - 1; i < l; j = i, i++) {
                let sx = subpoly[2 * i],
                    sy = subpoly[2 * i + 1],
                    tx = subpoly[2 * j],
                    ty = subpoly[2 * j + 1]

                // 点与多边形顶点重合
                if ((sx === px && sy === py) || (tx === px && ty === py)) {
                    return 1
                }

                // 判断线段两端点是否在射线两侧
                if ((sy < py && ty >= py) || (sy >= py && ty < py)) {
                    // 线段上与射线 Y 坐标相同的点的 X 坐标
                    let x = sx + (py - sy) * (tx - sx) / (ty - sy)

                    // 点在多边形的边上
                    if (x === px) {
                        return 1
                    }
                    if (x > px) {
                        flag = !flag
                    }
                }
            }
        }
        return flag ? 1 : 0;

    }

    static lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {
        var denominator,
            a,
            b,
            numerator1,
            numerator2,
            onLine1= false,
            onLine2= false,
            res = [null, null];

        denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));
        if (denominator === 0) {
            if(res[0] !== null && res[1] !== null) {
                return res;
            } else {
                return false;
            }
        }
        a = line1StartY - line2StartY;
        b = line1StartX - line2StartX;
        numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);
        numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);
        a = numerator1 / denominator;
        b = numerator2 / denominator;

        // if we cast these lines infinitely in both directions, they intersect here:
        res[0] = line1StartX + (a * (line1EndX - line1StartX));
        res[1] = line1StartY + (a * (line1EndY - line1StartY));


        // if line2 is a segment and line1 is infinite, they intersect if:
        if (b > 0 && b < 1) {
            return res;
        }
        else {
            return false;
        }
    }

    /**
     * 判断两个poly的关系
     * @param polyOut
     * @param polyIn
     * @returns {1,相交，2包涵，3，没关系}
     */
    static polyWith(polyOut, polyIn) {
        let lengthOut = polyOut.length / 2;
        let lengthIn = polyIn.length / 2;
        let flag = false;
        let bY;
        let aX;
        let aY;
        let bX;
        let dY;
        let cX;
        let cY;
        let dX;
        for (let i = 0; i < lengthOut; i++) {

            if (i != lengthOut - 1) {
                aX = polyOut[(i * 2)];
                aY = polyOut[(i * 2 + 1)];
                bX = polyOut[(i * 2 + 2)];
                bY = polyOut[(i * 2 + 3)];
            } else {
                aX = polyOut[(i * 2)];
                aY = polyOut[(i * 2 + 1)];
                bX = polyOut[0];
                bY = polyOut[1];
            }
            for (let j = 0; j < lengthIn; j++) {

                if (j != lengthIn - 1) {
                    cX = polyIn[(j * 2)];
                    cY = polyIn[(j * 2 + 1)];
                    dX = polyIn[(j * 2 + 2)];
                    dY = polyIn[(j * 2 + 3)];
                } else {
                    cX = polyIn[(j * 2)];
                    cY = polyIn[(j * 2 + 1)];
                    dX = polyIn[0];
                    dY = polyIn[1];
                }

                if (GisTools.lineIntersects(aX, aY, bX, bY, cX, cY, dX, dY) != false) {
                    return 1;
                }
            }
        }

        let firstX = polyIn[0];
        let firstY = polyIn[1];
        if (GisTools.pointInPolygon(firstX, firstY,  polyOut )) {
            return 2;
        }
        return 3;
    }

    /**
     * 把bbox转成double Array
     * @param left
     * @param bottom
     * @param right
     * @param top
     * @returns {Array}
     */
    static boxToPolyArr(left, bottom, right, top){
        let arr = [];
        arr.push(left);
        arr.push(bottom);

        arr.push(left);
        arr.push(top);

        arr.push(right);
        arr.push(top);

        arr.push(right);
        arr.push(bottom);

        arr.push(left);
        arr.push(bottom);

        return arr;
    }

    static getExtensionPoint(p1,p2,d){
        let xab = p2[0] - p1[0];
        let yab = p2[1] - p1[1];
        let xd = p2[0];
        let yd = p2[1];
        if(xab == 0){
            if(yab > 0){
                yd = p2[1] + d;
            }else{
                yd = p2[1] - d;
            }
        }else{
            let xbd = Math.sqrt((d * d)/((yab/xab) * (yab/xab) + 1));
            if (xab < 0) {
                xbd = -xbd
            }

            xd = p2[0] + xbd;
            yd = p2[1] + yab / xab * xbd;
        }
        return [xd,yd];
    }


    /**
     * 线平行偏移
     * @param coords
     * @param distance
     * @returns {Array}
     */
    static lineOffset(coords, distance) {
        let segments = [];
        let finalCoords = [];
        coords.forEach(function (currentCoords, index) {
            if (index !== coords.length - 1) {
                let segment = GisTools.processSegment(currentCoords, coords[index + 1], distance);
                segments.push(segment);
                if (index > 0) {
                    let seg2Coords = segments[index - 1];
                    let intersects = GisTools.lineIntersects(segment[0][0],segment[0][1], segment[1][0],segment[1][1],
                        seg2Coords[0][0],seg2Coords[0][1],seg2Coords[1][0],seg2Coords[1][1]);

                    // Handling for line segments that aren't straight
                    if (intersects !== false) {
                        seg2Coords[1] = intersects;
                        segment[0] = intersects;
                    }

                    finalCoords.push(seg2Coords[0]);
                    if (index === coords.length - 2) {
                        finalCoords.push(segment[0]);
                        finalCoords.push(segment[1]);
                    }
                }
                // Handling for lines that only have 1 segment
                if (coords.length === 2) {
                    finalCoords.push(segment[0]);
                    finalCoords.push(segment[1]);
                }
            }
        });
        return finalCoords;
    }

    /**
     * Process Segment
     * Inspiration taken from http://stackoverflow.com/questions/2825412/draw-a-parallel-line
     *
     * @private
     * @param {Array<number>} point1 Point coordinates
     * @param {Array<number>} point2 Point coordinates
     * @param {number} offset Offset
     * @returns {Array<Array<number>>} offset points
     */
    static processSegment(pointAngle1, pointAngle2, offset) {
        let point1 = pointAngle1[0];
        let point2 = pointAngle2[0];
        let L = Math.sqrt((point1[0] - point2[0]) * (point1[0] - point2[0]) + (point1[1] - point2[1]) * (point1[1] - point2[1]));

        let out1x = point1[0] + offset * (point2[1] - point1[1]) / L;
        let out2x = point2[0] + offset * (point2[1] - point1[1]) / L;
        let out1y = point1[1] + offset * (point1[0] - point2[0]) / L;
        let out2y = point2[1] + offset * (point1[0] - point2[0]) / L;
        return [[[out1x, out1y],pointAngle1[1]], [[out2x, out2y],pointAngle2[1]]];
    }

    /**
     *  判断box1是否在box2内部
     * @param box1
     * @param box2
     */
    static isInBox(box1,box2){
        if(box1[0] >= box2[0] && box1[1] >= box2[1] && box1[2]<= box2[2] && box1[3] <=box2[3]){
            return true;
        }
        return false;
    }
}
module.exports = exports = GisTools;




},{}],38:[function(require,module,exports){

class GridFilter{
    /**
     *
     * @param tilesize 瓦片大小
     * @param cellsize 小正方形网格的宽
     * @param buffer  外扩多少像素
     * @param maxPerCell  小正方形中允许放多小个注记
     */
    constructor(tilesize, cellsize, buffer,maxPerCell) {
        let n = tilesize / cellsize;
        let padding = buffer / cellsize;
        this.maxPerCell = maxPerCell == null ? 1 : maxPerCell;

        this.cells = {};
        this.d = n + 2 * padding;
        this.n = n;
        this.padding = padding;
        this.scale = n / tilesize;
        let p = (padding / n) * tilesize;
        this.min = -p;
        this.max = tilesize + p;
    }

    /**
     *  是否能放下指定的点
     * @param x
     * @param y
     * @returns {boolean}
     */
    filter(x,y){
        if (x < this.min || x > this.max || y < this.min || y > this.max ) {
            return false;
        }

        let cx = this.convertToCellCoord(x);
        let cy = this.convertToCellCoord(y);
        let cellIndex = this.d * cy + cx;
        //console.log('格网号：'+cellIndex);
        if(this.cells[cellIndex] >= this.maxPerCell){
            return false;
        }else{
            let i = this.cells[cellIndex];
            if(i == null){
                this.cells[cellIndex] = 1;
            }else{
                this.cells[cellIndex] = i++;
            }
            return true;
        }
    }

    /**
     *  是否能放下指定的box
     * @param box
     * @returns {boolean}
     */
    filterByBox(box){
        let startX = this.convertToCellCoord(box[0]);
        let endX = this.convertToCellCoord(box[2]);
        let startY = this.convertToCellCoord(box[1]);
        let endY = this.convertToCellCoord(box[3]);
        for(let i =startX;i<= endX;i++){
            for(let j=startY;j<=endY;j++){
                let cellIndex = this.d * j + i;
                //如果任意一个小格网被占用，则本box不能放下
                if(this.cells[cellIndex]){
                    return false;
                }
            }
        }

        //标识小格网被占用
        for(let i =startX;i<= endX;i++){
            for(let j=startY;j<=endY;j++){
                let cellIndex = this.d * j + i;
                this.cells[cellIndex] = 1;
            }
        }
        return true;
    }


    clean(){
        this.cells = {};
        this.saveCount = 0;
    }

    convertToCellCoord(x){
        return Math.max(0, Math.min(this.d - 1, Math.floor(x * this.scale) + this.padding));
    }
}

module.exports = GridFilter;
},{}],39:[function(require,module,exports){

var read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}
var write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

module.exports = {read,write};

},{}],40:[function(require,module,exports){
var toString = {}.toString;

module.exports =  Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],41:[function(require,module,exports){
(function (process,Buffer){(function (){
/**
 * Modules in this bundle
 * @license
 *
 * snappyjs:
 *   license: MIT (http://opensource.org/licenses/MIT)
 *   author: Zhipeng Jia
 *   version: 0.6.0
 *
 * This header is generated by licensify (https://github.com/twada/licensify)
 */
// define(['exports'], function (exports) {

    'use strict'

    var WORD_MASK = [0, 0xff, 0xffff, 0xffffff, 0xffffffff]

    function copyBytes (fromArray, fromPos, toArray, toPos, length) {
        var i
        for (i = 0; i < length; i++) {
            toArray[toPos + i] = fromArray[fromPos + i]
        }
    }

    function selfCopyBytes (array, pos, offset, length) {
        var i
        for (i = 0; i < length; i++) {
            array[pos + i] = array[pos - offset + i]
        }
    }

    function SnappyDecompressor (compressed) {
        this.array = compressed
        this.pos = 0
    }

    SnappyDecompressor.prototype.readUncompressedLength = function () {
        var result = 0
        var shift = 0
        var c, val
        while (shift < 32 && this.pos < this.array.length) {
            c = this.array[this.pos]
            this.pos += 1
            val = c & 0x7f
            if (((val << shift) >>> shift) !== val) {
                return -1
            }
            result |= val << shift
            if (c < 128) {
                return result
            }
            shift += 7
        }
        return -1
    }

    SnappyDecompressor.prototype.uncompressToBuffer = function (outBuffer) {
        var array = this.array
        var arrayLength = array.length
        var pos = this.pos
        var outPos = 0

        var c, len, smallLen
        var offset

        while (pos < array.length) {
            c = array[pos]
            pos += 1
            if ((c & 0x3) === 0) {
                // Literal
                len = (c >>> 2) + 1
                if (len > 60) {
                    if (pos + 3 >= arrayLength) {
                        return false
                    }
                    smallLen = len - 60
                    len = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)
                    len = (len & WORD_MASK[smallLen]) + 1
                    pos += smallLen
                }
                if (pos + len > arrayLength) {
                    return false
                }
                copyBytes(array, pos, outBuffer, outPos, len)
                pos += len
                outPos += len
            } else {
                switch (c & 0x3) {
                    case 1:
                        len = ((c >>> 2) & 0x7) + 4
                        offset = array[pos] + ((c >>> 5) << 8)
                        pos += 1
                        break
                    case 2:
                        if (pos + 1 >= arrayLength) {
                            return false
                        }
                        len = (c >>> 2) + 1
                        offset = array[pos] + (array[pos + 1] << 8)
                        pos += 2
                        break
                    case 3:
                        if (pos + 3 >= arrayLength) {
                            return false
                        }
                        len = (c >>> 2) + 1
                        offset = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)
                        pos += 4
                        break
                    default:
                        break
                }
                if (offset === 0 || offset > outPos) {
                    return false
                }
                selfCopyBytes(outBuffer, outPos, offset, len)
                outPos += len
            }
        }
        return true
    }


    // var snappyJS = {};
    // SnappyDecompressor.prototype.readUncompressedLength = function () {
    //     var result = 0
    //     var shift = 0
    //     var c, val
    //     while (shift < 32 && this.pos < this.array.length) {
    //         c = this.array[this.pos]
    //         this.pos += 1
    //         val = c & 0x7f
    //         if (((val << shift) >>> shift) !== val) {
    //             return -1
    //         }
    //         result |= val << shift
    //         if (c < 128) {
    //             return result
    //         }
    //         shift += 7
    //     }
    //     return -1
    // }
    //
    // SnappyDecompressor.prototype.uncompressToBuffer = function (outBuffer) {
    //     var array = this.array
    //     var arrayLength = array.length
    //     var pos = this.pos
    //     var outPos = 0
    //
    //     var c, len, smallLen
    //     var offset
    //
    //     while (pos < array.length) {
    //         c = array[pos]
    //         pos += 1
    //         if ((c & 0x3) === 0) {
    //             // Literal
    //             len = (c >>> 2) + 1
    //             if (len > 60) {
    //                 if (pos + 3 >= arrayLength) {
    //                     return false
    //                 }
    //                 smallLen = len - 60
    //                 len = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)
    //                 len = (len & WORD_MASK[smallLen]) + 1
    //                 pos += smallLen
    //             }
    //             if (pos + len > arrayLength) {
    //                 return false
    //             }
    //             copyBytes(array, pos, outBuffer, outPos, len)
    //             pos += len
    //             outPos += len
    //         } else {
    //             switch (c & 0x3) {
    //                 case 1:
    //                     len = ((c >>> 2) & 0x7) + 4
    //                     offset = array[pos] + ((c >>> 5) << 8)
    //                     pos += 1
    //                     break
    //                 case 2:
    //                     if (pos + 1 >= arrayLength) {
    //                         return false
    //                     }
    //                     len = (c >>> 2) + 1
    //                     offset = array[pos] + (array[pos + 1] << 8)
    //                     pos += 2
    //                     break
    //                 case 3:
    //                     if (pos + 3 >= arrayLength) {
    //                         return false
    //                     }
    //                     len = (c >>> 2) + 1
    //                     offset = array[pos] + (array[pos + 1] << 8) + (array[pos + 2] << 16) + (array[pos + 3] << 24)
    //                     pos += 4
    //                     break
    //                 default:
    //                     break
    //             }
    //             if (offset === 0 || offset > outPos) {
    //                 return false
    //             }
    //             selfCopyBytes(outBuffer, outPos, offset, len)
    //             outPos += len
    //         }
    //     }
    //     return true
    // }


    function isNode () {
        if (typeof process === 'object') {
            if (typeof process.versions === 'object') {
                if (typeof process.versions.node !== 'undefined') {
                    return true
                }
            }
        }
        return false
    }

    function isUint8Array (object) {
        return object instanceof Uint8Array && (!isNode() || !Buffer.isBuffer(object))
    }

    function isArrayBuffer (object) {
        return object instanceof ArrayBuffer
    }

    function isBuffer (object) {
        if (!isNode()) {
            return false
        }
        return Buffer.isBuffer(object)
    }
    var TYPE_ERROR_MSG = 'Argument compressed must be type of ArrayBuffer, Buffer, or Uint8Array'
    function uncompress (compressed) {
        if (!isUint8Array(compressed) && !isArrayBuffer(compressed) && !isBuffer(compressed)) {
            throw new TypeError(TYPE_ERROR_MSG)
        }
        var uint8Mode = false
        var arrayBufferMode = false
        if (isUint8Array(compressed)) {
            uint8Mode = true
        } else if (isArrayBuffer(compressed)) {
            arrayBufferMode = true
            compressed = new Uint8Array(compressed)
        }
        var decompressor = new SnappyDecompressor(compressed)
        var length = decompressor.readUncompressedLength()
        if (length === -1) {
            throw new Error('Invalid Snappy bitstream')
        }
        var uncompressed, uncompressedView
        if (uint8Mode) {
            uncompressed = new Uint8Array(length)
            if (!decompressor.uncompressToBuffer(uncompressed)) {
                throw new Error('Invalid Snappy bitstream')
            }
        } else if (arrayBufferMode) {
            uncompressed = new ArrayBuffer(length)
            uncompressedView = new Uint8Array(uncompressed)
            if (!decompressor.uncompressToBuffer(uncompressedView)) {
                throw new Error('Invalid Snappy bitstream')
            }
        } else {
            uncompressed = Buffer.alloc(length)
            if (!decompressor.uncompressToBuffer(uncompressed)) {
                throw new Error('Invalid Snappy bitstream')
            }
        }
        return uncompressed
    }

module.exports = uncompress;

}).call(this)}).call(this,require('_process'),require("buffer").Buffer)

},{"_process":4,"buffer":2}]},{},[12])(12)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
